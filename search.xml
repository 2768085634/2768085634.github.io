<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python控制excel</title>
      <link href="/2022/12/10/python/python%E6%8E%A7%E5%88%B6excel/"/>
      <url>/2022/12/10/python/python%E6%8E%A7%E5%88%B6excel/</url>
      
        <content type="html"><![CDATA[<h1 id="xls"><a href="#xls" class="headerlink" title="xls"></a>xls</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd  </span><br><span class="line"><span class="keyword">from</span> xlutils.copy <span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要导入xls文件路径</span></span><br><span class="line">excel_path = <span class="string">r&quot;D:\Users\zx\Desktop\information.xls&quot;</span>  </span><br><span class="line"></span><br><span class="line">rexcel = xlrd.open_workbook(excel_path, formatting_info=<span class="literal">True</span>)  </span><br><span class="line">excel = copy(rexcel)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第0页</span></span><br><span class="line">table = excel.get_sheet(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 纵坐标, 横坐标</span></span><br><span class="line">rows = rexcel.sheets()[<span class="number">0</span>].nrows</span><br><span class="line">cols = rexcel.sheets()[<span class="number">0</span>].ncols</span><br><span class="line"></span><br><span class="line"><span class="comment"># 样式</span></span><br><span class="line">style = xlwt.easyxf(<span class="string">&#x27;pattern: pattern solid, fore_colour red&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入</span></span><br><span class="line"><span class="comment"># 横坐标, 纵坐标, 值, 样式</span></span><br><span class="line">table.write(row, col, tag, style)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line">excel.save(<span class="string">r&quot;D:\Users\zx\Desktop\information.xls&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="xls和csv"><a href="#xls和csv" class="headerlink" title="xls和csv"></a>xls和csv</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">dt = pd.DataFrame(peo)  </span><br><span class="line">dt.to_excel(peo_url, index=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>md5</title>
      <link href="/2022/12/10/python/md5/"/>
      <url>/2022/12/10/python/md5/</url>
      
        <content type="html"><![CDATA[<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    <span class="built_in">bytes</span> = f.read()  </span><br><span class="line">    md5 = hashlib.md5(<span class="built_in">bytes</span>).hexdigest()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件夹处理</title>
      <link href="/2022/12/10/python/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%84%E7%90%86/"/>
      <url>/2022/12/10/python/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取路径下所有文件名字(仅当前文件夹下的文件名和其他文件夹名, 不包含子文件夹下文件)</span></span><br><span class="line"><span class="built_in">dir</span> = os.listdir(filePath)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路径下所有文件(包括子目录文件)</span></span><br><span class="line"><span class="comment"># root -&gt; 当前目录(路径)</span></span><br><span class="line"><span class="comment"># dirs -&gt; 当前目录下包含的子目录(路径)</span></span><br><span class="line"><span class="comment"># files -&gt; 当前文件夹下文件(名称)</span></span><br><span class="line"><span class="comment"># 参数可选, 见最下方</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(url, 参数)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割</span></span><br><span class="line"><span class="comment"># 返回值为一个数组, 两个参数[文件路径(无拓展名), 文件拓展名(如果是文件夹则为空)]</span></span><br><span class="line">os.path.splitext(url)</span><br></pre></td></tr></table></figure><ul><li><strong>topdown</strong> –可选，为 True，则优先遍历 top 目录，否则优先遍历 top 的子目录(默认为开启)。如果 topdown 参数为 True，walk 会遍历top文件夹，与top 文件夹中每一个子目录。</li><li><strong>onerror</strong> – 可选，需要一个 callable 对象，当 walk 需要异常时，会调用。</li><li><strong>followlinks</strong> – 可选，如果为 True，则会遍历目录下的快捷方式(linux 下是软连接 symbolic link )实际所指的目录(默认关闭)，如果为 False，则优先遍历 top 的子目录。</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫(selenium)</title>
      <link href="/2022/12/10/python/%E7%88%AC%E8%99%AB(selenium)/"/>
      <url>/2022/12/10/python/%E7%88%AC%E8%99%AB(selenium)/</url>
      
        <content type="html"><![CDATA[<p><a href="%E7%88%AC%E8%99%AB.md">爬虫</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装载驱动</span></span><br><span class="line">driverfile_path = <span class="string">r&#x27;C:\Users\zx\AppData\Local\Programs\Python\Python36-32\msedgedriver.exe&#x27;</span>  </span><br><span class="line">one_driver = webdriver.Edge(executable_path=driverfile_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳转到指定网址</span></span><br><span class="line">one_driver.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">.find_elements_by_tag_name(<span class="string">&#x27;td&#x27;</span>)</span><br><span class="line">.find_elements_by_class_name(<span class="string">&#x27;result-row&#x27;</span>)</span><br><span class="line">.get_attribute(<span class="string">&quot;src&quot;</span>)</span><br><span class="line">.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line">one_driver.quit()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫</title>
      <link href="/2022/12/10/python/%E7%88%AC%E8%99%AB/"/>
      <url>/2022/12/10/python/%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<p><a href="%E7%88%AC%E8%99%AB(selenium).md">爬虫(selenium)</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标网址</span></span><br><span class="line">url = <span class="string">&quot;https://www.peakbagger.com/list.aspx?lid=5651&quot;</span>  </span><br><span class="line">headers = &#123;  </span><br><span class="line">    <span class="comment"># 改成自己的请求头  </span></span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36 Edg/105.0.1343.42&quot;</span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果有奇怪报错则加上这句话</span></span><br><span class="line"><span class="comment"># requests.packages.urllib3.disable_warnings()</span></span><br><span class="line"><span class="comment"># 此时下面改成:</span></span><br><span class="line"><span class="comment"># resp = requests.get(url, headers=headers, verify=False)</span></span><br><span class="line"></span><br><span class="line">resp = requests.get(url, headers=headers)  </span><br><span class="line">soup = BeautifulSoup(resp.content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">.find(class_=<span class="string">&#x27;gray&#x27;</span>)  </span><br><span class="line">.findAll(<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文本:</span></span><br><span class="line">.find(class_=<span class="string">&#x27;gray&#x27;</span>).text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line">resp.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加载条</title>
      <link href="/2022/12/10/python/%E5%8A%A0%E8%BD%BD%E6%9D%A1/"/>
      <url>/2022/12/10/python/%E5%8A%A0%E8%BD%BD%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="库"><a href="#库" class="headerlink" title="库"></a>库</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tqdm</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pdf <span class="keyword">in</span> tqdm(pdf_dir):</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读写文件</title>
      <link href="/2022/12/10/python/%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/"/>
      <url>/2022/12/10/python/%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.read() <span class="comment"># 一次性读取全部内容</span></span><br><span class="line">    f.readline() <span class="comment"># 读取第一行内容</span></span><br><span class="line">    f.readlines() <span class="comment"># 读取所有内容,数组返回每一行内容</span></span><br><span class="line">    f.write(data) <span class="comment"># 写入,需要手动加换行</span></span><br></pre></td></tr></table></figure><p>r :   读取文件，若文件不存在则会报错</p><p>w:   写入文件，若文件不存在则会先创建再写入，会覆盖原文件</p><p>a :   写入文件，若文件不存在则会先创建再写入，但不会覆盖原文件，而是追加在文件末尾</p><p>rb,wb：  分别与r,w类似，但是用于读写二进制文件</p><p>r+ :   可读、可写，文件不存在也会报错，写操作时会覆盖</p><p>w+ :   可读，可写，文件不存在先创建，会覆盖</p><p>a+ :  可读、可写，文件不存在先创建，不会覆盖，追加在末尾</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作pdf</title>
      <link href="/2022/12/10/python/%E6%93%8D%E4%BD%9Cpdf/"/>
      <url>/2022/12/10/python/%E6%93%8D%E4%BD%9Cpdf/</url>
      
        <content type="html"><![CDATA[<h1 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pypdf2</span><br><span class="line">pip install pdfplumber</span><br></pre></td></tr></table></figure><h1 id="提取文字"><a href="#提取文字" class="headerlink" title="提取文字"></a>提取文字</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提取pdf文字</span></span><br><span class="line"><span class="keyword">with</span> pdfplumber.<span class="built_in">open</span>(<span class="string">&quot;D:\\pdffiles\\Python编码规范中文版.pdf&quot;</span>) <span class="keyword">as</span> pdf:</span><br><span class="line">    page01 = pdf.pages[<span class="number">0</span>] <span class="comment">#指定页码</span></span><br><span class="line">    text = page01.extract_text()<span class="comment">#提取文本</span></span><br><span class="line">    <span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure><h1 id="提取表格"><a href="#提取表格" class="headerlink" title="提取表格"></a>提取表格</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> pdfplumber.<span class="built_in">open</span>(<span class="string">&quot;D:\\pdffiles\\人力资源部岗位编制.pdf&quot;</span>) <span class="keyword">as</span> pdf:</span><br><span class="line">    page01 = pdf.pages[<span class="number">0</span>] <span class="comment">#指定页码</span></span><br><span class="line">    table1 = page01.extract_table()<span class="comment">#提取单个表格</span></span><br><span class="line">    <span class="comment"># table2 = page01.extract_tables()#提取多个表格</span></span><br><span class="line">    <span class="built_in">print</span>(table1)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常见错误</title>
      <link href="/2022/12/10/Git/Git%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
      <url>/2022/12/10/Git/Git%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="Your-local-changes-to-the-following-files-would-be-overwritten-by-merge"><a href="#Your-local-changes-to-the-following-files-would-be-overwritten-by-merge" class="headerlink" title="Your local changes to the following files would be overwritten by merge:"></a>Your local changes to the following files would be overwritten by merge:</h1><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>git库与本地库文件代码段不同</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>强制更新本地代码库</p><ol><li>git fetch –all  </li><li>git reset –hard origin&#x2F;master  </li><li>git pull</li></ol><p><strong>注意:该命令直接放弃所有修改代码,并更新到版本库最新版本代码</strong></p><h1 id="Your-local-changes-to-the-following-files-would-be-overwritten-by-merge-1"><a href="#Your-local-changes-to-the-following-files-would-be-overwritten-by-merge-1" class="headerlink" title="Your local changes to the following files would be overwritten by merge:"></a>Your local changes to the following files would be overwritten by merge:</h1><h2 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h2><p>本地修改的文件会被远程仓库文件覆盖</p><h2 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>暂时封存本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash git pull origin master git stash pop</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>如果本地不重要,则全部丢弃</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure><h1 id="windows系统下提示Could-not-resolve-host-github-com"><a href="#windows系统下提示Could-not-resolve-host-github-com" class="headerlink" title="windows系统下提示Could not resolve host: github.com"></a>windows系统下提示Could not resolve host: github.com</h1><h2 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h2><p>在hosts文件中加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">140.82.113.3 github.com </span><br><span class="line">199.232.5.194 github.global.ssl.fastly.net </span><br><span class="line">54.231.114.219 github-cloud.s3.amazonaws.com</span><br></pre></td></tr></table></figure><p>hosts文件在<code>C:\Windows\System32\drivers\etc</code>中以及<code>&#123;git安装目录&#125;/etc</code>中</p><h1 id="windows系统下ping不通github-Connection-was-aborted-errno-10053"><a href="#windows系统下ping不通github-Connection-was-aborted-errno-10053" class="headerlink" title="windows系统下ping不通github(Connection was aborted, errno 10053)"></a>windows系统下ping不通github(Connection was aborted, errno 10053)</h1><h2 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h2><p>(该问题是解决上面问题之后出现的问题)</p><p>可能是开启了vpn导致,取消代理即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除GitHub仓库中文件</title>
      <link href="/2022/12/10/Git/%E5%88%A0%E9%99%A4GitHub%E4%BB%93%E5%BA%93%E4%B8%AD%E6%96%87%E4%BB%B6/"/>
      <url>/2022/12/10/Git/%E5%88%A0%E9%99%A4GitHub%E4%BB%93%E5%BA%93%E4%B8%AD%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<ol><li>git init初始化仓库</li><li>git clone &lt;地址&gt;</li><li>dir用来查看目录</li><li>git rm <filename>对指定文件进行删除</li><li>如果要删除文件夹需：git rm -r <filename></li><li>提交本次修改：git commit -m ‘备注’</li><li>把删除的文件恢复到最新版：git checkout</li><li>推送：git push</li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tarjan</title>
      <link href="/2022/12/10/%E7%AE%97%E6%B3%95/Tarjan/"/>
      <url>/2022/12/10/%E7%AE%97%E6%B3%95/Tarjan/</url>
      
        <content type="html"><![CDATA[<h1 id="Tarjan"><a href="#Tarjan" class="headerlink" title="Tarjan"></a>Tarjan</h1><p>Tarjan基于<strong>深搜</strong>,是一种离线算法</p><h2 id="强连通分量"><a href="#强连通分量" class="headerlink" title="强连通分量"></a>强连通分量</h2><h3 id="连通块（有向图）"><a href="#连通块（有向图）" class="headerlink" title="连通块（有向图）"></a>连通块（有向图）</h3><p>tarjan+栈找点的集合</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; k;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; mp[M], ans[M];</span><br><span class="line"><span class="type">bool</span> instack[M] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dfn[M] = &#123;<span class="number">0</span>&#125;, low[M] = &#123;<span class="number">0</span>&#125;, cnt = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   dfn[x] = low[x] = ++cnt;</span><br><span class="line">   k.<span class="built_in">push</span>(x);</span><br><span class="line">   instack[x] = <span class="literal">true</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; mp[x].<span class="built_in">size</span>(); i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span> (!dfn[mp[x][i]])</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">tarjan</span>(mp[x][i]);</span><br><span class="line">         low[x] = <span class="built_in">min</span>(low[x], low[mp[x][i]]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (instack[mp[x][i]])</span><br><span class="line">      &#123;</span><br><span class="line">         low[x] = <span class="built_in">min</span>(low[x], dfn[mp[x][i]]); <span class="comment">// find root</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (low[x] == dfn[x]) <span class="comment">// get way</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">int</span> node;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">         node = k.<span class="built_in">top</span>();</span><br><span class="line">         k.<span class="built_in">pop</span>();</span><br><span class="line">         instack[node] = <span class="literal">false</span>;</span><br><span class="line">         ans[t].<span class="built_in">push_back</span>(node);</span><br><span class="line">      &#125; <span class="keyword">while</span> (node != x);</span><br><span class="line">      t++;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> n, m;</span><br><span class="line">   cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">int</span> a, b;</span><br><span class="line">      cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">      mp[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">tarjan</span>(<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t; i++)</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;SCG &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; ans[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">      &#123;</span><br><span class="line">         cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ans[i][j];</span><br><span class="line">      &#125;</span><br><span class="line">      cout &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缩点（有向图）"><a href="#缩点（有向图）" class="headerlink" title="缩点（有向图）"></a>缩点（有向图）</h3><p><a href="https://www.luogu.com.cn/problem/P3387">P3387 【模板】缩点 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>采用tarjan+拓扑排序的思路</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">book</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> from = <span class="number">-1</span>, to = <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, sum[M], fa[M], ru[M] = &#123;<span class="number">0</span>&#125;, mmax = <span class="number">-1</span>;</span><br><span class="line"><span class="type">bool</span> v[M] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; mp[M], nw[M];</span><br><span class="line"><span class="type">int</span> low[M] = &#123;<span class="number">0</span>&#125;, dfn[M] = &#123;<span class="number">0</span>&#125;, cnt = <span class="number">0</span>;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"><span class="type">int</span> ans[M] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[x] = low[x] = ++cnt;</span><br><span class="line">    v[x] = <span class="literal">true</span>;</span><br><span class="line">    st.<span class="built_in">push</span>(x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> next : mp[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[next])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(next);</span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[x], low[next]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v[next])</span><br><span class="line">        &#123;</span><br><span class="line">            low[x] = <span class="built_in">min</span>(dfn[next], low[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (low[x] == dfn[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> node;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            v[node] = <span class="literal">false</span>;</span><br><span class="line">            fa[node] = x;</span><br><span class="line">            <span class="keyword">if</span> (node == x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum[x] += sum[node];</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;book&gt; way;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ru[i] &amp;&amp; fa[i] == i)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">            ans[i] = sum[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> next : nw[u])</span><br><span class="line">        &#123;</span><br><span class="line">            ru[next]--;</span><br><span class="line">            ans[next] = <span class="built_in">max</span>(ans[next], ans[u] + sum[next]);</span><br><span class="line">            <span class="keyword">if</span> (!ru[next])</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mmax = <span class="built_in">max</span>(ans[i], mmax);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mmax;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; sum[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        mp[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        way.<span class="built_in">push_back</span>(&#123;a, b&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dfn[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">tarjan</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = fa[way[i].from], y = fa[way[i].to];</span><br><span class="line">        <span class="keyword">if</span> (x != y)</span><br><span class="line">        &#123;</span><br><span class="line">            nw[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">            ru[y]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="割点（无向图）"><a href="#割点（无向图）" class="headerlink" title="割点（无向图）"></a>割点（无向图）</h3><p><a href="https://www.luogu.com.cn/problem/P3388">P3388 【模板】割点（割顶） - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n, m, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> dfn[M] = &#123;<span class="number">0</span>&#125;, low[M] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; mp[M];</span><br><span class="line"><span class="type">bool</span> v[M] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    dfn[x] = low[x] = ++cnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> next : mp[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[next])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(next, fa);</span><br><span class="line">            <span class="keyword">if</span> (low[next] &gt;= dfn[x] &amp;&amp; x != fa)</span><br><span class="line">            &#123;</span><br><span class="line">                v[x] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x == fa)</span><br><span class="line">            &#123;</span><br><span class="line">                t++;</span><br><span class="line">            &#125;</span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[next], low[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        low[x] = <span class="built_in">min</span>(dfn[next], low[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t &gt; <span class="number">1</span> &amp;&amp; fa == x)</span><br><span class="line">    &#123;</span><br><span class="line">        v[x] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        mp[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        mp[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dfn[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">tarjan</span>(i, i);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[i])</span><br><span class="line">        &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="桥（无向图）"><a href="#桥（无向图）" class="headerlink" title="桥（无向图）"></a>桥（无向图）</h3><p><a href="https://www.luogu.com.cn/problem/P1656">P1656 炸铁路 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> dfn[<span class="number">205</span>], low[<span class="number">205</span>], cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; mp[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">book</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;book&gt; ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[x] = low[x] = ++cnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> u : mp[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(u, x);</span><br><span class="line">            <span class="keyword">if</span> (low[u] &gt; dfn[x])</span><br><span class="line">            &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(&#123;x, u&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[u], low[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (u != fa)</span><br><span class="line">        &#123;</span><br><span class="line">            low[x] = <span class="built_in">min</span>(dfn[u], low[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(book a, book b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.a == b.a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.b &lt; b.b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a.a &lt; b.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        mp[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        mp[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(mp[i].<span class="built_in">begin</span>(), mp[i].<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dfn[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">tarjan</span>(i, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; ans[i].a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ans[i].b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; t; i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     for (int u : h[i])</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         cout &lt;&lt; u &lt;&lt; &quot; &quot;;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LCA（最近公共祖先）"><a href="#LCA（最近公共祖先）" class="headerlink" title="LCA（最近公共祖先）"></a>LCA（最近公共祖先）</h2><p><a href="https://www.luogu.com.cn/problem/P3379">P3379 【模板】最近公共祖先（LCA） - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>Tarjan+链式前向星+并查集+map映射</p><p>如果不用链式前向星会超时</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pr pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">500005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MX = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>, lk = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> low[M] = &#123;<span class="number">0</span>&#125;, dfn[M] = &#123;<span class="number">0</span>&#125;, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n, m, s;</span><br><span class="line"><span class="type">int</span> head[M], hd[M];</span><br><span class="line"><span class="type">int</span> A[M] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> B[M] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ans[M];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">book</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to, next = <span class="number">0</span>;</span><br><span class="line">&#125; node[MX], link[MX];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[++tot] = &#123;v, head[u]&#125;;</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addwy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    link[++lk] = &#123;v, hd[u]&#125;;</span><br><span class="line">    hd[u] = lk;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> v[M] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="type">int</span> fa[M] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fd</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x] = fa[x] == x ? x : <span class="built_in">fd</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">un</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[<span class="built_in">fd</span>(y)] = <span class="built_in">fd</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v[x] = <span class="literal">true</span>;</span><br><span class="line">    fa[x] = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head[x]; i; i = node[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y = node[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v[y])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">tarjan</span>(y);</span><br><span class="line">        <span class="built_in">un</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = hd[x]; i; i = link[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y = link[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v[y])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// pr t1, t2;</span></span><br><span class="line">            <span class="comment">// t1 = mk(x, y);</span></span><br><span class="line">            <span class="comment">// t2 = mk(y, x);</span></span><br><span class="line">            <span class="type">int</span> root = <span class="built_in">fd</span>(y);</span><br><span class="line">            <span class="comment">// ans[t1] = ans[t2] = root;</span></span><br><span class="line">            ans[x][y] = ans[y][x] = root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);</span></span><br><span class="line">    <span class="comment">// cout.tie(0);</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">add</span>(a, b);</span><br><span class="line">        <span class="built_in">add</span>(b, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; A[i] &gt;&gt; B[i];</span><br><span class="line">        <span class="built_in">addwy</span>(A[i], B[i]);</span><br><span class="line">        <span class="built_in">addwy</span>(B[i], A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">tarjan</span>(s);</span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= n; i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; i &lt;&lt; &quot; : &quot;;</span></span><br><span class="line">    <span class="comment">//     for (int j = head[i]; j; j = node[j].next)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         cout &lt;&lt; node[j].to &lt;&lt; &quot; &quot;;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; ans[mk(A[i], B[i])] &lt;&lt; endl;</span></span><br><span class="line">        cout &lt;&lt; ans[A[i]][B[i]] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stl库</title>
      <link href="/2022/12/10/%E7%AE%97%E6%B3%95/stl%E5%BA%93/"/>
      <url>/2022/12/10/%E7%AE%97%E6%B3%95/stl%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="stl库"><a href="#stl库" class="headerlink" title="stl库"></a>stl库</h1><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><p>$#include <vector>$</p><h3 id="常用用法"><a href="#常用用法" class="headerlink" title="常用用法"></a>常用用法</h3><table><thead><tr><th align="center">函数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">$name$.push_back($value$);</td><td align="center">在$name$尾部接上一个元素$value$</td></tr><tr><td align="center">$name$.pop_back($value$)</td><td align="center">弹出$name$尾部元素</td></tr><tr><td align="center">$name$.back()</td><td align="center">获取$name$尾部元素</td></tr><tr><td align="center">$name$.begin()</td><td align="center">获取$name$的首元素地址</td></tr><tr><td align="center">$name$.end()</td><td align="center">$name$最后一个元素的后一位地址(为空)</td></tr><tr><td align="center">$name$.rbegin()</td><td align="center">获取$name$最后一位地址</td></tr><tr><td align="center">$name$.rend()</td><td align="center">$name$首元素地址的前一位(为空)</td></tr><tr><td align="center">$name$.resize($len$)</td><td align="center">给$name$开拓$len$个空间($name[0]$  ~  $name[len-1]$可用)</td></tr><tr><td align="center">$name$.size()</td><td align="center">返回$name$大小(长度)</td></tr><tr><td align="center">$name$.empty()</td><td align="center">检查$name$是否为空,为空返回$true$</td></tr></tbody></table><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><h3 id="头文件-1"><a href="#头文件-1" class="headerlink" title="头文件"></a>头文件</h3><p>$#include <queue>$</p><h3 id="常用用法-1"><a href="#常用用法-1" class="headerlink" title="常用用法"></a>常用用法</h3><table><thead><tr><th align="center">函数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">$name$.push($value$);</td><td align="center">在$name$尾部插入一个元素$value$</td></tr><tr><td align="center">$name$.pop()</td><td align="center">弹出$name$首元素</td></tr><tr><td align="center">$name$.front()</td><td align="center">获取$name$首元素</td></tr><tr><td align="center">$name$.size()</td><td align="center">返回$name$大小(长度)</td></tr><tr><td align="center">$name$.empty()</td><td align="center">检查$name$是否为空,为空返回$true$</td></tr></tbody></table><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><h3 id="头文件-2"><a href="#头文件-2" class="headerlink" title="头文件"></a>头文件</h3><p>$#include <stack>$</p><h3 id="常用用法-2"><a href="#常用用法-2" class="headerlink" title="常用用法"></a>常用用法</h3><table><thead><tr><th align="center">函数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">$name$.push($value$);</td><td align="center">在$name$顶部插入一个元素$value$</td></tr><tr><td align="center">$name$.pop()</td><td align="center">弹出$name$最顶端元素</td></tr><tr><td align="center">$name$.top()</td><td align="center">获取$name$最顶端元素</td></tr><tr><td align="center">$name$.size()</td><td align="center">返回$name$大小(长度)</td></tr><tr><td align="center">$name$.empty()</td><td align="center">检查$name$是否为空,为空返回$true$</td></tr></tbody></table><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>$#include <set>$</p><h3 id="常用用法-3"><a href="#常用用法-3" class="headerlink" title="常用用法"></a>常用用法</h3><table><thead><tr><th align="center">函数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">$name$.insert($value$);</td><td align="center">在$name$插入一个元素$value$</td></tr><tr><td align="center">$name$.size()</td><td align="center">返回$name$大小(长度)</td></tr><tr><td align="center">$name$.empty()</td><td align="center">检查$name$是否为空,为空返回$true$</td></tr><tr><td align="center">$name$.begin()</td><td align="center">获取$name$的首元素地址</td></tr><tr><td align="center">$name$.end()</td><td align="center">$name$最后一个元素的后一位地址(为空)</td></tr><tr><td align="center">$name$.rbegin()</td><td align="center">获取$name$最后一位地址</td></tr><tr><td align="center">$name$.rend()</td><td align="center">$name$首元素地址的前一位(为空)</td></tr></tbody></table><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="头文件-3"><a href="#头文件-3" class="headerlink" title="头文件"></a>头文件</h3><p>$#include <map>$</p><h3 id="常用用法-4"><a href="#常用用法-4" class="headerlink" title="常用用法"></a>常用用法</h3><table><thead><tr><th align="center">函数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">$name$.begin()</td><td align="center">获取$name$的首元素地址</td></tr><tr><td align="center">$name$.end()</td><td align="center">$name$最后一个元素的后一位地址(为空)</td></tr><tr><td align="center">$name$.rbegin()</td><td align="center">获取$name$最后一位地址</td></tr><tr><td align="center">$name$.rend()</td><td align="center">$name$首元素地址的前一位(为空)</td></tr><tr><td align="center">$name$.resize($len$)</td><td align="center">给$name$开拓$len$个空间($name[0]$  ~  $name[len-1]$可用)</td></tr><tr><td align="center">$name$.empty()</td><td align="center">检查$name$是否为空,为空返回$true$</td></tr><tr><td align="center">地址-&gt;first</td><td align="center">该位置的$key$</td></tr><tr><td align="center">地址-&gt;second</td><td align="center">该位置的$value$</td></tr></tbody></table><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><h3 id="头文件-4"><a href="#头文件-4" class="headerlink" title="头文件"></a>头文件</h3><p>$#include <algorithm>$</p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><h3 id="头文件-5"><a href="#头文件-5" class="headerlink" title="头文件"></a>头文件</h3><p>$#include <algorithm>$</p><h3 id="常用用法-5"><a href="#常用用法-5" class="headerlink" title="常用用法"></a>常用用法</h3><ol><li><p>字符串:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string s1, s2;</span><br><span class="line">s1.<span class="built_in">find</span>(s2);<span class="comment">//在s1中查找s2</span></span><br></pre></td></tr></table></figure><p>如果找到返回下标</p><p>如果没找到返回<code>npos</code>;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(s1.<span class="built_in">find</span>(s2) == string::npos)&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组&#x2F;容器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">105</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="built_in">find</span>(a, a + len, value);<span class="comment">//在a数组中从[0, len)中查找value</span></span><br><span class="line"><span class="built_in">find</span>(mp.<span class="built_in">begin</span>(), mp.<span class="built_in">beign</span>() + len, value);<span class="comment">//在mp容器中从[begin, begin + len)中查找value</span></span><br><span class="line"><span class="built_in">find</span>(mp.<span class="built_in">begin</span>(), mp.<span class="built_in">end</span>(), value);<span class="comment">//在mp容器中查找value</span></span><br></pre></td></tr></table></figure><p>如果找到返回地址</p><p>如果没找到返回查找末端的<strong>下一位</strong></p></li></ol><h2 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h2><ol><li><p>元素确保不重复(<code>set,map</code>)直接删除值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt;st;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line">st.<span class="built_in">erase</span>(value);</span><br><span class="line">mp.<span class="built_in">erase</span>(value);</span><br></pre></td></tr></table></figure></li><li><p>元素可能重复(<code>vector</code>),删除地址</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;vc;</span><br><span class="line">vc.<span class="built_in">erase</span>(ve.<span class="built_in">begin</span>());<span class="comment">//删除首元素</span></span><br><span class="line">vc.<span class="built_in">erase</span>(ve.<span class="built_in">begin</span>() + len);<span class="comment">//删除begin() + len位置元素</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树</title>
      <link href="/2022/12/10/%E7%AE%97%E6%B3%95/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/2022/12/10/%E7%AE%97%E6%B3%95/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h1><p><strong>本文采用kruskal算法实现</strong></p><h2 id="什么是最小生成树"><a href="#什么是最小生成树" class="headerlink" title="什么是最小生成树"></a>什么是最小生成树</h2><p>原图中边的权值最小的生成树</p><p>最小是指指的是所有边权值之和小于或者等于其它生成树的边的权值之和</p><p>这也就意味着图中不存在环</p><h2 id="实现算法"><a href="#实现算法" class="headerlink" title="实现算法"></a>实现算法</h2><p>kruskal和prim算法</p><p>其中kruskal是针对边(优先队列+并查集),常用于稀疏图</p><p>prim算法则是针对点(dfs),常用于稠密图</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>用优先队列将所有的边都存入,按照从小到大的顺序排列,依次取出最小的边进行链接,同时用并查集检查是否形成了回路,如果形成了回路则不要这条边,否则加入这条边</p><p><img src="https://img1.imgtp.com/2022/06/30/IossEgWv.gif" alt="kruskal"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 并查集</span></span><br><span class="line"><span class="type">int</span> fa[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fd</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x] = fa[x] == x ? x : <span class="built_in">fd</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">un</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    fa[<span class="built_in">fd</span>(x)] = <span class="built_in">fd</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最小生成树</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">book</span> &#123;</span><br><span class="line">    <span class="type">int</span> u, v, w;<span class="comment">// 点u与点v这条边的边权为w</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> book&amp; q) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> q.w &lt; w;</span><br><span class="line">    &#125;<span class="comment">// 边权小的往前放</span></span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;book&gt; q;</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="type">int</span> u = q.<span class="built_in">top</span>().u, v = q.<span class="built_in">top</span>().v, w = q.<span class="built_in">top</span>().w;</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fd</span>(u) == <span class="built_in">fd</span>(v)) &#123;  <span class="comment">// 此时说明如果连接该两点会形成环</span></span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">un</span>(u, v);  <span class="comment">// 连接两点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优先队列</title>
      <link href="/2022/12/10/%E7%AE%97%E6%B3%95/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
      <url>/2022/12/10/%E7%AE%97%E6%B3%95/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h1><h2 id="什么是优先队列"><a href="#什么是优先队列" class="headerlink" title="什么是优先队列"></a>什么是优先队列</h2><p>优先队列,有着队列的性质,即从尾部插入,在头部取出,由于它的底层是二叉堆,所以它可以在插入元素的时候将其根据优先级进行排列</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>由于底层是二叉堆,将元素从堆底推到堆顶时间复杂度为O(logn),故优先队列插入时间复杂度为O(logn)</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>跟队列唯一不同的地方在于,队列的头部用<code>front</code>来访问,但是优先队列底层是堆,所以用<code>top</code>来访问头部(顶部)</p><p>其他用法基本与队列一样</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q1;  <span class="comment">//队列</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q2;  <span class="comment">//优先队列</span></span><br></pre></td></tr></table></figure><h2 id="自定义优先级"><a href="#自定义优先级" class="headerlink" title="自定义优先级"></a>自定义优先级</h2><h3 id="单元素"><a href="#单元素" class="headerlink" title="单元素"></a>单元素</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q;  <span class="comment">//递增</span></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, less&lt;<span class="type">int</span>&gt;&gt; q;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q;  <span class="comment">//递减</span></span><br></pre></td></tr></table></figure><h3 id="多元素"><a href="#多元素" class="headerlink" title="多元素"></a>多元素</h3><p>用结构体存储元素,排序方法跟sort有异曲同工之处</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">book</span> &#123;</span><br><span class="line">    <span class="type">int</span> v1;</span><br><span class="line">    <span class="type">int</span> v2;</span><br><span class="line">    <span class="type">int</span> v3;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> book&amp; q) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="comment">// 想要的优先级规则</span></span><br><span class="line">        <span class="comment">// if (q.v1 == v1) &#123;</span></span><br><span class="line">        <span class="comment">//     if (q.v2 == v2) &#123;</span></span><br><span class="line">        <span class="comment">//         return q.v3 &lt; v3;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     return q.v2 &lt; v2;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return q.v1 &lt; v1;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;book&gt; q;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2022/12/10/%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2022/12/10/%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><h2 id="建立节点信息"><a href="#建立节点信息" class="headerlink" title="建立节点信息"></a>建立节点信息</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">book</span>&#123;</span><br><span class="line"><span class="type">int</span> l, r, sum = <span class="number">0</span>, lazy = <span class="number">0</span>;<span class="comment">//区间[l, r], 区间和, 懒标记</span></span><br><span class="line">&#125;tree[M];</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归建树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    tree[k].l = l;</span><br><span class="line">    tree[k].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        tree[k].sum = Number[i];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(k &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">update</span>(k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    tree[k].sum = tree[k &lt;&lt; <span class="number">1</span>].sum + tree[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l == l &amp;&amp; tree[k].r == r)&#123;</span><br><span class="line">        tree[k].sum += (l - r + <span class="number">1</span>) * x;<span class="comment">//更新当前区间和, 但是不下传</span></span><br><span class="line">        tree[k].lazy += x;<span class="comment">//懒标记</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);<span class="comment">//下传</span></span><br><span class="line">    <span class="comment">//分治</span></span><br><span class="line">    <span class="type">int</span> mid = (tree[k].r - tree[k].l) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(r &lt;= mid)&#123;</span><br><span class="line">        <span class="built_in">change</span>(k &lt;&lt; <span class="number">1</span>, l, r, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(r &gt; mid)&#123;</span><br><span class="line">        <span class="built_in">change</span>(k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,l ,r ,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">change</span>(k &lt;&lt; <span class="number">1</span>, l, mid, x);</span><br><span class="line">        <span class="built_in">change</span>(k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">update</span>(k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下传"><a href="#下传" class="headerlink" title="下传"></a>下传</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tree[k].lazy)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tree[k &lt;&lt; <span class="number">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class="number">1</span>].r - tree[k &lt;&lt; <span class="number">1</span>].l + <span class="number">1</span>);</span><br><span class="line">    tree[k &lt;&lt; <span class="number">1</span>].lazy += tree[k].lazy;</span><br><span class="line">    tree[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].r - tree[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].l + <span class="number">1</span>);</span><br><span class="line">    tree[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lazy += tree[k].lazy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[k].l == l &amp;&amp; tree[k].r == r)&#123;</span><br><span class="line">        <span class="keyword">return</span> tree[k].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="comment">//分治</span></span><br><span class="line">    <span class="type">int</span> mid = (tree[k].r - tree[k].l) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(r &lt;= mid)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Find</span>(k &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(r &gt; mid)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Find</span>(k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,l ,r ,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Find</span>(k &lt;&lt; <span class="number">1</span>, l, mid, x) + <span class="built_in">Find</span>(k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数论</title>
      <link href="/2022/12/10/%E7%AE%97%E6%B3%95/%E6%95%B0%E8%AE%BA/"/>
      <url>/2022/12/10/%E7%AE%97%E6%B3%95/%E6%95%B0%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><h2 id="多边形面积公式"><a href="#多边形面积公式" class="headerlink" title="多边形面积公式"></a>多边形面积公式</h2><p>$sum &#x3D; \frac{1}{2}\abs{\sum^n_{i&#x3D;1}x_iy_{i+1}-x_{i+1}y_i}\$</p><p>其中$x_{n+1}&#x3D;x_1,y_{n+1}&#x3D;y_1$</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀和与差分</title>
      <link href="/2022/12/10/%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/"/>
      <url>/2022/12/10/%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前缀和与差分"><a href="#前缀和与差分" class="headerlink" title="前缀和与差分"></a>前缀和与差分</h1><h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><h3 id="什么是前缀和"><a href="#什么是前缀和" class="headerlink" title="什么是前缀和"></a>什么是前缀和</h3><p>前缀和是一个数组的某项下标之前(包括此项元素)的所有数组元素之和</p><h3 id="前缀和有什么用"><a href="#前缀和有什么用" class="headerlink" title="前缀和有什么用"></a>前缀和有什么用</h3><p>前缀和是一种预处理,用于降低查询的时间复杂度</p><p>例如:给定n个整数,进行m次询问,每次询问给出左端点和右端点,问这两个端点之间所有元素之和是多少.</p><p>如果对于每次询问都用for循环一个个相加,那么时间复杂度将高达O(m*n),但是如果用前缀和来处理那么时间复杂度将是O(m)</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>给定一个数组,命名为a数组</p><table><thead><tr><th>value</th><th>10</th><th>20</th><th>30</th><th>40</th><th>50</th><th>60</th></tr></thead><tbody><tr><td>index</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr></tbody></table><p>求出他的前缀和数组,命名为sum数组,为了方便起见我们对sum数组进行一个错位处理</p><table><thead><tr><th>value</th><th>0</th><th>10</th><th>30</th><th>60</th><th>100</th><th>150</th><th>210</th></tr></thead><tbody><tr><td>index</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td></tr></tbody></table><p>如果我想求区间[2,5)之和,即</p><p>ans&#x3D;a2+a3+a4</p><p>对于sum数组则有</p><p>sum2&#x3D;a0+a1</p><p>sum5&#x3D;a0+a1+a2+a3+a4</p><p>此时我们可以发现:</p><p>sum5-sum2&#x3D;a2+a3+a4&#x3D;ans</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> sum[N+<span class="number">1</span>];</span><br><span class="line"><span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span> sum);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">    sum[i + <span class="number">1</span>] = sum[i] + a[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><h3 id="什么是差分"><a href="#什么是差分" class="headerlink" title="什么是差分"></a>什么是差分</h3><p>差分是逆向的前缀和</p><h3 id="差分有什么用"><a href="#差分有什么用" class="headerlink" title="差分有什么用"></a>差分有什么用</h3><p>差分是一种预处理,用于降低时间复杂度,对某个区间所有值快速进行加法运算</p><p>例如:给定n个整数,进行m次操作,每次操作给出操作的左端点,,右端点和该区间所要加上的值,进行完m次操作之后询问新数组各项的值</p><p>如果对于每次询问都用for循环一个个相加,那么时间复杂度将高达O(m*n),但是如果用差分来处理那么时间复杂度将是O(m)</p><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>给定一个数组,命名为a数组</p><table><thead><tr><th>value</th><th>10</th><th>20</th><th>30</th><th>40</th><th>50</th><th>60</th></tr></thead><tbody><tr><td>index</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr></tbody></table><p>求出他的差分数组,命名为b数组,为了方便起见我们对sum数组进行一个错位处理</p><table><thead><tr><th>value</th><th>10</th><th>10</th><th>10</th><th>10</th><th>10</th><th>10</th></tr></thead><tbody><tr><td>index</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr></tbody></table><p>如果我想让区间[2,5)之间所有数加上p,即:</p><p>a2+&#x3D;p,a3+&#x3D;p,a4+&#x3D;p</p><p>因为有:</p><p>a2&#x3D;b0+b1+b2</p><p>a3&#x3D;b0+b1+b2+b3</p><p>a4&#x3D;b0+b1+b2+b3+b4</p><p>此时我们发现他们累加的最后一次相同项都是b2,所以我们只需:</p><p>b2+&#x3D;p</p><p>此时演变成了</p><p>a2+p &#x3D;&#x3D; b0+b1+b2+p</p><p>a3+p &#x3D;&#x3D; b0+b1+b2+p+b3</p><p>a4+p &#x3D;&#x3D; b0+b1+b2+p+b3+b4</p><p>但是我们会发现计算到a5以及后面所有数时都加上了p:</p><p>b0+b1+b2+p+b3+b4+b5 &#x3D;&#x3D; a5+p</p><p>因为我们改变的区间只有[2,5),所以我们要对b5进行操作</p><p>b5-&#x3D;p</p><p>此时有:</p><p>a5 &#x3D;&#x3D; b0+b1+b2+p+b3+b4+b5-p</p><p>同理后面均不受影响</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[M];</span><br><span class="line"><span class="type">int</span> b[M + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!i)&#123;</span><br><span class="line">        b[i] = a[i];</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    b[i] = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">&#125;<span class="comment">//获得差分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对区间[l, r)每一项加上p</span></span><br><span class="line">b[l] += p;</span><br><span class="line">b[r] -= p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算每一项之和</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!i)&#123;</span><br><span class="line">        a[i] = b[i];</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[i] = a[i - <span class="number">1</span>] + b[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>能否根据一维前缀和和一维差分推算出来二维前缀和和二维差分?</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂</title>
      <link href="/2022/12/10/%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
      <url>/2022/12/10/%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<h1 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h1><h2 id="快速幂-1"><a href="#快速幂-1" class="headerlink" title="快速幂"></a>快速幂</h2><p>例题:<a href="https://www.luogu.com.cn/problem/P1226">P1226 【模板】快速幂||取余运算 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>问题:对于一个数a,我们如何求出他的b次方?由于数可能比较大我们需要对结果对p取模</p><p>一般做法是a*a*a*…*a,一共有b个a相乘,如果b足够大,那么时间复杂度将为O(b),那么有没有什么方法可以快速运算呢?</p><p>例如:求2^10</p><p>我们需要先进行一个降幂操作,先使最终结果为sum,sum初始化为1</p><table><thead><tr><th>base</th><th>2</th><th>4</th><th>4</th><th>16</th><th>32</th><th>32</th></tr></thead><tbody><tr><td>power</td><td>10</td><td>5</td><td>4</td><td>2</td><td>1</td><td>0</td></tr><tr><td>now</td><td>2^10</td><td>4^5</td><td>4^4</td><td>16^2</td><td>32^1</td><td>32^0</td></tr><tr><td>sum</td><td>1</td><td>1</td><td>1*4&#x3D;4</td><td>4</td><td>4</td><td>4*32&#x3D;128&#x3D;2^10</td></tr><tr><td>times</td><td>0</td><td>1</td><td>1</td><td>2</td><td>3</td><td>3</td></tr></tbody></table><p>由上表可以看出,当power为奇数的时候,我们需要让sum*&#x3D;base,同时power-&#x3D;1</p><p>当power&#x3D;&#x3D;0时,此时sum就是最终结果</p><p>由例子可以看出,如果用暴力算法,需要运算10次,但是如果用快速幂只需要运算3次,故时间复杂度为O(logN)</p><p>如果我们要让结果对于p取模,根据取模的性质,我们只需每次操作的时候对sum和base取模即可</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fast</span><span class="params">(ll base, ll power, ll mod)</span> </span>&#123;</span><br><span class="line">    ll sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (power &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (power % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            sum = (sum * base) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        base = (base * base) % mod;</span><br><span class="line">        power /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>对于2^10,我们可以发现:</p><p>10转化为二进制之后为:1010</p><p>第一次操作变为5 : 101 -&gt; sum*&#x3D;base</p><p>第二次操作变为2 : 10</p><p>第三次操作变为1 : 1 -&gt; sum*&#x3D;base</p><p>所以我们可以通过位运算对其进行简化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">fast</span><span class="params">(ll base, ll power, ll mod)</span> </span>&#123;</span><br><span class="line">    ll sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (power &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (power &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            sum = (sum * base) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        base = (base * base) % mod;</span><br><span class="line">        power &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h2><p>首先你要会矩阵乘法,如果不会的话去<a href="https://www.csdn.net/">CSDN - 专业开发者社区</a>查,这里不多说,直接附上代码以及题目</p><p><a href="https://blog.csdn.net/STRVE/article/details/106739349">(90条消息) 【详解】矩阵乘法__BOSS_的博客-CSDN博客_矩阵乘法</a></p><p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805082313310208">题目详情 - L1-048 矩阵A乘以B (pintia.cn)</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll a[<span class="number">105</span>][<span class="number">105</span>], b[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">ll c[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> r1, <span class="type">int</span> r, <span class="type">int</span> c2)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span> c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; c2; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; r; k++) &#123;</span><br><span class="line">                c[i][j] += a[i][k] * b[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> r1, c1, r2, c2;</span><br><span class="line">    cin &gt;&gt; r1 &gt;&gt; c1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; c1; j++) &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; r2 &gt;&gt; c2;</span><br><span class="line">    <span class="keyword">if</span> (c1 != r2) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: %d != %d&quot;</span>, c1, r2);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r2; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; c2; j++) &#123;</span><br><span class="line">            cin &gt;&gt; b[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">mul</span>(r1, c1, c2);</span><br><span class="line">    cout &lt;&lt; r1 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; c2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; c2; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; c[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会了矩阵乘法之后,我们依旧用快速幂的思路来处理矩阵快速幂</p><p>这里附上题目链接<a href="https://www.luogu.com.cn/problem/P3390">P3390 【模板】矩阵快速幂 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fast</span><span class="params">(ll base, ll power, ll mod)</span> </span>&#123;</span><br><span class="line">    单位矩阵 sum;</span><br><span class="line">    <span class="keyword">while</span> (power &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (power &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            矩阵乘法<span class="number">1</span>:sum = sum * base;</span><br><span class="line">        &#125;</span><br><span class="line">        矩阵乘法<span class="number">2</span>:base = base * base;</span><br><span class="line">        power &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需往里面套入一个矩阵乘法即可</p><p>完整代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">ll n, k;</span><br><span class="line">ll a[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">ll ans[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll c[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span> c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                c[i][j] += (ans[i][k] * a[k][j]) % mod;</span><br><span class="line">                c[i][j] %= mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            ans[i][j] = c[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll c[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span> c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                c[i][j] += (a[i][k] * a[k][j]) % mod;</span><br><span class="line">                c[i][j] %= mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            a[i][j] = c[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fast</span><span class="params">(ll power)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (power &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (power &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">get1</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">get2</span>();</span><br><span class="line">        power &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        ans[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fast</span>(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; ans[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵快速幂与斐波那契数列"><a href="#矩阵快速幂与斐波那契数列" class="headerlink" title="矩阵快速幂与斐波那契数列"></a>矩阵快速幂与斐波那契数列</h2><p>题目:<a href="https://www.luogu.com.cn/problem/P1962">P1962 斐波那契数列 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>斐波那契数列应该都不陌生,它的每一项都是前两项之和,即:<br>$$<br>F_n &#x3D; F_{n-1} + F_{n-2}\<br>其中F_0 &#x3D; F_1 &#x3D; 1<br>$$<br>我们将它写成<br>$$<br>\left[\begin{matrix}<br>F_n\<br>F_{n-1}<br>\end{matrix}\right]<br>$$<br>我们可以将其推到成:<br>$$<br>\left[\begin{matrix}<br>F_n\<br>F_{n-1}<br>\end{matrix}\right]&#x3D;<br>\left[\begin{matrix}<br>1 &amp; 1\<br>1 &amp; 0<br>\end{matrix}\right]<br>*<br>\left[\begin{matrix}<br>F_{n-1}\<br>F_{n-2}<br>\end{matrix}\right]<br>$$<br>同理,我们不断对其进行拆分可得:<br>$$<br>\left[\begin{matrix}<br>F_n\<br>F_{n-1}<br>\end{matrix}\right]&#x3D;<br>{\left[\begin{matrix}<br>1 &amp; 1\<br>1 &amp; 0<br>\end{matrix}\right]}^{n-1}<br>*<br>\left[\begin{matrix}<br>F_1\<br>F_0<br>\end{matrix}\right]<br>$$<br>结合以上可以得到完整代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">ll n, k;</span><br><span class="line">ll a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">ll ans[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">ll b[<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll c[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span> c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++) &#123;</span><br><span class="line">                c[i][j] += (ans[i][k] * a[k][j]) % mod;</span><br><span class="line">                c[i][j] %= mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">            ans[i][j] = c[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll c[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span> c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++) &#123;</span><br><span class="line">                c[i][j] += (a[i][k] * a[k][j]) % mod;</span><br><span class="line">                c[i][j] %= mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">            a[i][j] = c[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fast</span><span class="params">(ll power)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (power &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (power &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">get1</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">get2</span>();</span><br><span class="line">        power &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ll c[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span> c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++) &#123;</span><br><span class="line">                c[i][j] += (ans[i][k] * b[k][j]) % mod;</span><br><span class="line">                c[i][j] %= mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    a[<span class="number">0</span>][<span class="number">0</span>] = a[<span class="number">0</span>][<span class="number">1</span>] = a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    ans[<span class="number">0</span>][<span class="number">0</span>] = ans[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    b[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fast</span>(n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">mul</span>();</span><br><span class="line">    cout &lt;&lt; c[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速乘</title>
      <link href="/2022/12/10/%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E4%B9%98/"/>
      <url>/2022/12/10/%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E4%B9%98/</url>
      
        <content type="html"><![CDATA[<p>[[快速幂]]</p><h1 id="快速乘"><a href="#快速乘" class="headerlink" title="快速乘"></a>快速乘</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h2><ol><li>对于两个大数相乘取模有可能在乘完之后发生溢出</li><li>两数相乘由于底层原因导致时间不是最优</li></ol><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>快速幂</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="function">ll <span class="title">getMul</span><span class="params">(ll x, ll y, ll mod)</span></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            res = (res + x) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树</title>
      <link href="/2022/12/10/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
      <url>/2022/12/10/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1><h2 id="什么是二叉搜索树"><a href="#什么是二叉搜索树" class="headerlink" title="什么是二叉搜索树"></a>什么是二叉搜索树</h2><p>二叉搜索树简称为<strong>BST</strong>,又称<strong>二叉排序树</strong>,<strong>二叉查找树</strong></p><p>二叉搜索树规定:左孩子的值<strong>小于</strong>根节点的值,右孩子的值<strong>大于等于</strong>根节点的值</p><h2 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h2><p>本文采取结构体建树,使用先序遍历建树</p><p><strong>思路:</strong></p><p>令先序序列为front</p><p>list序列的第一项为当前树的根节点,记第一项为root,用双指针的方法对后面的序列进行查找,指针定义为left和right,让left从第二项开始自左向右进行查找,right从最后一项开始自右向左开始查找,我们需要找到:</p><ol><li>list[left] &gt;&#x3D; list[root]</li><li>list[right] &lt; list[root]</li></ol><p>如果此时right + 1 !&#x3D; left则说明无法构成二叉搜索树</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> front[M];</span><br><span class="line"><span class="type">int</span> n;  <span class="comment">//有n个节点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">-1</span>, r = <span class="number">-1</span>, val;</span><br><span class="line">&#125; tree[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= n || r &lt; <span class="number">0</span> || l &gt; r) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> root = front[l++];  <span class="comment">//从第二项开始</span></span><br><span class="line">    <span class="type">int</span> left = l, right = r;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= r &amp;&amp; front[left] &lt; root) &#123;</span><br><span class="line">        left++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (right &gt;= l &amp;&amp; front[right] &gt;= root) &#123;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">    tree[l - <span class="number">1</span>] = &#123;<span class="built_in">build</span>(l, right), <span class="built_in">build</span>(left, r), front[l - <span class="number">1</span>]&#125;;</span><br><span class="line">    <span class="keyword">return</span> l - <span class="number">1</span>;  <span class="comment">//返回第一项位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/2022/12/10/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2022/12/10/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="什么是二叉树"><a href="#什么是二叉树" class="headerlink" title="什么是二叉树"></a>什么是二叉树</h2><p>每个节点最多有两个子树的树形结构</p><h2 id="二叉树的四种遍历"><a href="#二叉树的四种遍历" class="headerlink" title="二叉树的四种遍历"></a>二叉树的四种遍历</h2><ol><li><strong>层序遍历</strong>:从上到下,从左往右</li><li><strong>先序遍历</strong>:根左右</li><li><strong>中序遍历</strong>:左根右</li><li><strong>后序遍历</strong>:左右根</li></ol><p>层序遍历采取bfs(广度优先搜索)进行遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    tree *r, *l;</span><br><span class="line">    <span class="built_in">tree</span>() &#123;</span><br><span class="line">        r = <span class="literal">NULL</span>;</span><br><span class="line">        l = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(tree* root)</span> </span>&#123;</span><br><span class="line">    queue&lt;tree*&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        root = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; root-&gt;val;  <span class="comment">//输出当前节点</span></span><br><span class="line">        q.<span class="built_in">push</span>(root-&gt;l);</span><br><span class="line">        q.<span class="built_in">push</span>(root-&gt;r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先,中,后序遍历采取dfs(深度优先搜索)进行遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先中后序遍历</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    tree *r, *l;</span><br><span class="line">    <span class="built_in">tree</span>()&#123;</span><br><span class="line">        l = <span class="literal">NULL</span>;</span><br><span class="line">        r = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(tree* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; root-&gt;val;</span></span><br><span class="line">    <span class="comment">// 先序遍历(先输出&#x27;根&#x27;,然后再进行&#x27;左&#x27;和&#x27;右&#x27;)</span></span><br><span class="line">    <span class="comment">// 根左右</span></span><br><span class="line">    <span class="built_in">dfs</span>(root-&gt;l);</span><br><span class="line">    <span class="comment">// cout &lt;&lt; root-&gt;val;</span></span><br><span class="line">    <span class="comment">// 中序遍历(在&#x27;左&#x27;进行完之后输出&#x27;根&#x27;)</span></span><br><span class="line">    <span class="comment">// 左根右</span></span><br><span class="line">    <span class="built_in">dfs</span>(root-&gt;r);</span><br><span class="line">    <span class="comment">// cout &lt;&lt; root-&gt;val;</span></span><br><span class="line">    <span class="comment">// 后序遍历(在&#x27;左&#x27;和&#x27;右&#x27;都进行完之后输出&#x27;根&#x27;)</span></span><br><span class="line">    <span class="comment">// 左右根</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们不难发现只要在递归中改变输出位置即可实现</p><h2 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h2><p>如果要进行建树,必须要有中序遍历,再加上先序或者后序遍历其一即可,如果没有中序遍历则建成的树可能不止一颗</p><p><strong>这里只以用先序和中序来建树为例,节点数量为n</strong></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>按照先序的顺序不断从找当前点在中序当中的位置</p><p>令先序当前点在中序中找到的位置为now,当前区间为[l, r]</p><p>那么左节点就是2 * idx,区间为[l, now - 1]</p><p>右节点就是2 * idx + 1,区间为[now + 1, r]</p><h3 id="数组建树-有局限"><a href="#数组建树-有局限" class="headerlink" title="数组建树(有局限)"></a>数组建树(有局限)</h3><p>**局限:**在极其特殊的情况下会出现越界,比如所有节点均只有左子树&#x2F;右子树,下标访问超过了1e7</p><p><strong>思路</strong>:根节点为1,令当前节点为idx,往左孩子走就是idx * 2,往右孩子走就是idx * 2 + 1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> front[M], mid[M], point = <span class="number">0</span>;  <span class="comment">//先序遍历,中序遍历,point指向当前要找的位置</span></span><br><span class="line"><span class="type">int</span> n;                            <span class="comment">//有n个节点</span></span><br><span class="line"><span class="type">int</span> tree[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (point == n || l &gt; r || l &lt; <span class="number">0</span> || r &gt;= n) &#123;  <span class="comment">//越界停止</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tree[idx] = front[point++];</span><br><span class="line">    <span class="type">int</span> now = l;</span><br><span class="line">    <span class="keyword">while</span> (tree[idx] != mid[now] &amp;&amp; now &lt;= r) &#123;</span><br><span class="line">        now++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(idx * <span class="number">2</span>, l, now - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">build</span>(idx * <span class="number">2</span> + <span class="number">1</span>, now + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体建树-有局限"><a href="#结构体建树-有局限" class="headerlink" title="结构体建树(有局限)"></a>结构体建树(有局限)</h3><p><strong>局限</strong>:所有元素均不能超过1e7</p><p><strong>思路</strong>:考虑到节点元素不会重复,所以我们可以直接存值(题目一般不会出重复点刁难你,出重复点一般在二叉搜索树中,会在后面讲)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> front[M], mid[M], point = <span class="number">-1</span>;  <span class="comment">//先序遍历,中序遍历,point指向当前要找的位置</span></span><br><span class="line"><span class="type">int</span> n;                             <span class="comment">//有n个节点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">-1</span>, r = <span class="number">-1</span>;</span><br><span class="line">&#125; tree[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (point == n - <span class="number">1</span> || l &gt; r || l &lt; <span class="number">0</span> || r &gt;= n) &#123;  <span class="comment">//越界停止</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    point++;</span><br><span class="line">    <span class="type">int</span> now = l;</span><br><span class="line">    <span class="keyword">while</span> (front[point] != mid[now] &amp;&amp; now &lt;= r) &#123;</span><br><span class="line">        now++;</span><br><span class="line">    &#125;</span><br><span class="line">    tree[mid[now]] = &#123;<span class="built_in">build</span>(l, now - <span class="number">1</span>), <span class="built_in">build</span>(now + <span class="number">1</span>, r)&#125;;</span><br><span class="line">    <span class="keyword">return</span> mid[now];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针建树-专业呀"><a href="#指针建树-专业呀" class="headerlink" title="指针建树(专业呀~)"></a>指针建树(专业呀~)</h3><p>**局限:**如此专业怎么会有局限?</p><p>**思路:**如果节点root有子节点则new一个节点,将root的子节点与这个新节点相连,与结构体建树有异曲同工之处</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> front[M], mid[M], point = <span class="number">-1</span>;  <span class="comment">//先序遍历,中序遍历,point指向当前要找的位置</span></span><br><span class="line"><span class="type">int</span> n;                             <span class="comment">//有n个节点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    Tree *l, *r;</span><br><span class="line">    <span class="built_in">Tree</span>(<span class="type">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;val = val;</span><br><span class="line">        l = <span class="literal">NULL</span>;</span><br><span class="line">        r = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;  <span class="comment">//构造函数,每次new一个新节点的时候对新节点进行初始化.</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Tree* <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (point == n - <span class="number">1</span> || l &gt; r || l &lt; <span class="number">0</span> || r &gt;= n) &#123;  <span class="comment">//越界停止</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    point++;</span><br><span class="line">    <span class="type">int</span> now = l;</span><br><span class="line">    <span class="keyword">while</span> (front[point] != mid[now] &amp;&amp; now &lt;= r) &#123;</span><br><span class="line">        now++;</span><br><span class="line">    &#125;</span><br><span class="line">    Tree* root = <span class="keyword">new</span> <span class="built_in">Tree</span>(front[point]);</span><br><span class="line">    root-&gt;l = <span class="built_in">build</span>(l, now + <span class="number">1</span>);</span><br><span class="line">    root-&gt;r = <span class="built_in">build</span>(now + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尺取法</title>
      <link href="/2022/12/10/%E7%AE%97%E6%B3%95/%E5%B0%BA%E5%8F%96%E6%B3%95/"/>
      <url>/2022/12/10/%E7%AE%97%E6%B3%95/%E5%B0%BA%E5%8F%96%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="尺取法"><a href="#尺取法" class="headerlink" title="尺取法"></a>尺取法</h1><p>尺取法又叫双指针法,主要用于在区间内查找满足题意的答案</p><p>相比朴素算法时间复杂度O(n^2),尺取法可以将时间复杂度优化到O(n)</p><h2 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h2><p>用两个指针,一个指向左端点(left),另一个指向右端点(right),初始都指向数组左端</p><ol><li>首先移动右端点,直到区间[left,right]为满足答案的一种情况</li><li>然后再移动左端点,直到区间[left,right]不满足答案</li><li>对比当前已有答案与现在获得答案,选取最优</li><li>重复上述操作</li></ol><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://www.luogu.com.cn/problem/P1638">P1638 逛画展 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[M], t = <span class="number">0</span>; <span class="comment">// v[M]用于记录当前区间各个画师遇见了几次,t用来记录当前区间有几名画师</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; mp;</span><br><span class="line">    mp.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; mp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mlen = n + <span class="number">1</span>, bg = <span class="number">-1</span>; <span class="comment">// mlen用于记录最优解的长度,bg用于记录最优解区间的左端点</span></span><br><span class="line">    <span class="keyword">while</span> (r &lt; n) &#123;</span><br><span class="line">        <span class="keyword">while</span> (t != m &amp;&amp; r &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!v[mp[r]]) &#123;</span><br><span class="line">                t++;</span><br><span class="line">            &#125;</span><br><span class="line">            v[mp[r]]++;</span><br><span class="line">            r++;</span><br><span class="line">        &#125; <span class="comment">// 如果当前区间没有遇到所有画师则右指针右移,直到找到或者右指针越界</span></span><br><span class="line">        <span class="keyword">while</span> (t == m &amp;&amp; l &lt; r) &#123;</span><br><span class="line">            v[mp[l]]--;</span><br><span class="line">            <span class="keyword">if</span> (!v[mp[l]]) &#123;</span><br><span class="line">                t--;</span><br><span class="line">            &#125;</span><br><span class="line">            l++;</span><br><span class="line">        &#125; <span class="comment">// 如果当前区间遇到了所有画师则右移左指针,直到区间内不包括所有画师或者左指针大于等于右指针时停止</span></span><br><span class="line">        <span class="keyword">if</span> (r - l + <span class="number">1</span> &lt; mlen) &#123;</span><br><span class="line">            mlen = r - l + <span class="number">1</span>;</span><br><span class="line">            bg = l;</span><br><span class="line">        &#125; <span class="comment">// 更新答案区间</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; bg &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; bg + mlen - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2022/12/10/%E5%85%B6%E4%BB%96/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/12/10/%E5%85%B6%E4%BB%96/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统的地位"><a href="#操作系统的地位" class="headerlink" title="操作系统的地位"></a>操作系统的地位</h1><p>核心系统<strong>软件</strong></p><h1 id="操作系统的定义"><a href="#操作系统的定义" class="headerlink" title="操作系统的定义"></a>操作系统的定义</h1><p><strong>操作系统</strong>是控制和管理计算机系统的<strong>硬件和软件资源</strong>,河里的组织计算机工作流程以及方便用于使用的<strong>程序和数据</strong>(系统软件)的集合</p><h1 id="操作系统的功能"><a href="#操作系统的功能" class="headerlink" title="操作系统的功能"></a>操作系统的功能</h1><ul><li>处理机管理</li><li>存储管理</li><li>设备管理</li><li>文件系统管理</li><li>用户接口:<ul><li>图形界面</li><li>命令窗口</li><li>系统调用:程序员</li></ul></li></ul><h1 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h1><ol><li>手工操作阶段</li><li>早期<strong>批处理</strong>阶段</li><li><strong>多道</strong>程序系统</li><li><strong>分时</strong>系统</li><li><strong>实时</strong>系统</li><li>通用操作系统</li><li>操作系统的进一步发展</li></ol><h1 id="多道程序设计技术"><a href="#多道程序设计技术" class="headerlink" title="多道程序设计技术"></a>多道程序设计技术</h1><p>在计算机内存中<strong>同时</strong>存放<strong>几道</strong>相互独立的程序,他们在管理程序的控制下相互穿插地运行,他们共享CPU和其他资源</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>充分利用CPU,减少CPU等待时间.</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>宏观上并行:<br>同时进入系统的几道程序都处于运行过程中,即他们都开始运行,但都未运行完毕.</p><p>微观上串行:<br>从微观上开,主存中的多道程序轮流或分时地占有处理机,交替运行.</p><h1 id="操作系统的基本特征"><a href="#操作系统的基本特征" class="headerlink" title="操作系统的基本特征"></a>操作系统的基本特征</h1><h2 id="并发性"><a href="#并发性" class="headerlink" title="并发性"></a>并发性</h2><p>并发:多个时间在同一<strong>时间段</strong>内发生(交替)<br>多道程序用的是并行</p><p>并行:指多个事件在同一<strong>时刻</strong>发生</p><h2 id="共享性"><a href="#共享性" class="headerlink" title="共享性"></a>共享性</h2><h2 id="虚拟性"><a href="#虚拟性" class="headerlink" title="虚拟性"></a>虚拟性</h2><h2 id="异步性"><a href="#异步性" class="headerlink" title="异步性"></a>异步性</h2><h1 id="进程和程序的区别"><a href="#进程和程序的区别" class="headerlink" title="进程和程序的区别"></a>进程和程序的区别</h1><p>进程是<strong>动态</strong>的,程序是<strong>静态</strong>的(根本区别)</p><p>进程具有<strong>并发</strong>特征,而程序没有</p><p>进程是<strong>竞争系统资源</strong>的基本单位</p><p>进程与程序存在位置不同</p><h1 id="进程的描述"><a href="#进程的描述" class="headerlink" title="进程的描述"></a>进程的描述</h1><p>进程的静态描述:</p><ol><li>进程控制块PCB:系统感知进程存在的唯一实体(每个进程只有唯一一个PCB)</li><li>有关程序段(代码段)</li><li>数据结构集</li></ol><h1 id="进程状态及其转换"><a href="#进程状态及其转换" class="headerlink" title="进程状态及其转换"></a>进程状态及其转换</h1><p><img src="https://raw.githubusercontent.com/2768085634/pic/main/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E5%8F%8A%E5%85%B6%E8%BD%AC%E6%8D%A2.png"></p><h1 id="临界资源"><a href="#临界资源" class="headerlink" title="临界资源"></a>临界资源</h1><p>一次仅允许一个进程访问的资源称为临界资源</p><h1 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h1><h1 id="原语"><a href="#原语" class="headerlink" title="原语"></a>原语</h1><p>原语是由若干条指令组成的,用于完成一定功能的一个过程</p><p>原语的执行不能中断</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>podman</title>
      <link href="/2022/12/10/%E6%9C%8D%E5%8A%A1%E5%99%A8/podman/"/>
      <url>/2022/12/10/%E6%9C%8D%E5%8A%A1%E5%99%A8/podman/</url>
      
        <content type="html"><![CDATA[<h1 id="Debian11-1"><a href="#Debian11-1" class="headerlink" title="Debian11.1"></a>Debian11.1</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt upgrade</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install podman</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minio</title>
      <link href="/2022/12/10/%E6%9C%8D%E5%8A%A1%E5%99%A8/Minio/"/>
      <url>/2022/12/10/%E6%9C%8D%E5%8A%A1%E5%99%A8/Minio/</url>
      
        <content type="html"><![CDATA[<h1 id="podman部署minio"><a href="#podman部署minio" class="headerlink" title="podman部署minio"></a>podman部署minio</h1><h2 id="podman安装"><a href="#podman安装" class="headerlink" title="podman安装"></a>podman安装</h2><p><a href="podman.md">podman</a></p><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOL_HOME=/home/podman</span><br></pre></td></tr></table></figure><h2 id="设置文件夹"><a href="#设置文件夹" class="headerlink" title="设置文件夹"></a>设置文件夹</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/podman/minio/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /home/podman/minio/config</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">podman run -d \</span><br><span class="line">--name minio \</span><br><span class="line">-p 9000:9000 \</span><br><span class="line">-p 9001:9001 \</span><br><span class="line">-e MINIO_ROOT_USER=用户名 \</span><br><span class="line">-e MINIO_ROOT_PASSWORD=密码 \</span><br><span class="line">-v <span class="variable">$VOL_HOME</span>/minio/data:/data \</span><br><span class="line">-v <span class="variable">$VOL_HOME</span>/minio/config:/root/.minio \</span><br><span class="line">quay.io/minio/minio \</span><br><span class="line">server /data \</span><br><span class="line">--console-address <span class="string">&quot;:9001&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Springboot整合minio"><a href="#Springboot整合minio" class="headerlink" title="Springboot整合minio"></a>Springboot整合minio</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">minio:</span>  </span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">http://1.116.135.197:9000</span>  </span><br><span class="line">  <span class="attr">bucketName:</span> <span class="string">image</span>  </span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">root</span>  </span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">csh20011103</span></span><br></pre></td></tr></table></figure><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manpower.config;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;  </span><br><span class="line"><span class="keyword">import</span> lombok.Data;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;minio&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioConfig</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String endpoint;  </span><br><span class="line">    <span class="keyword">private</span> String bucketName;  </span><br><span class="line">    <span class="keyword">private</span> String accessKey;  </span><br><span class="line">    <span class="keyword">private</span> String secretKey;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">minioClient</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder()  </span><br><span class="line">                .endpoint(endpoint)  </span><br><span class="line">                .credentials(accessKey, secretKey)  </span><br><span class="line">                .build();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manpower.controller;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.manpower.util.MFtoFileUtil;  </span><br><span class="line"><span class="keyword">import</span> com.manpower.util.MinioUtil;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@CrossOrigin</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/image&quot;)</span>  </span><br><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageController</span> &#123;  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> MinioUtil minioUtil;  </span><br><span class="line">    <span class="comment">// 根据文件名获取文件  </span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/perview/&#123;filename&#125;&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">preview</span><span class="params">(<span class="meta">@PathVariable(&quot;filename&quot;)</span> String filename)</span> &#123;  </span><br><span class="line"><span class="comment">//        System.out.println(filename);  </span></span><br><span class="line">        <span class="keyword">return</span> minioUtil.preview(filename);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 上传图片  </span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload/&#123;filename&#125;&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, <span class="meta">@PathVariable</span> String filename)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            file = MFtoFileUtil.MFtoFile(file, filename);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> minioUtil.upload(file);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="util"><a href="#util" class="headerlink" title="util"></a>util</h2><h3 id="MinioUtil"><a href="#MinioUtil" class="headerlink" title="MinioUtil"></a>MinioUtil</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manpower.util;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.manpower.config.MinioConfig;  </span><br><span class="line"><span class="keyword">import</span> io.minio.*;  </span><br><span class="line"><span class="keyword">import</span> io.minio.http.Method;  </span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Bucket;  </span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioUtil</span> &#123;  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> MinioConfig prop;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//    创建存储bucket  </span></span><br><span class="line"><span class="comment">//    @return Boolean  </span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">makeBucket</span><span class="params">(String bucketName)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            minioClient.makeBucket(MakeBucketArgs.builder()  </span><br><span class="line">                    .bucket(bucketName)  </span><br><span class="line">                    .build());  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//    删除存储bucket  </span></span><br><span class="line"><span class="comment">//    @return Boolean  </span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">removeBucket</span><span class="params">(String bucketName)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            minioClient.removeBucket(RemoveBucketArgs.builder()  </span><br><span class="line">                    .bucket(bucketName)  </span><br><span class="line">                    .build());  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//    获取全部bucket  </span></span><br><span class="line"><span class="comment">//    @return List&lt;Bucket&gt;  </span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Bucket&gt; <span class="title function_">getAllBuckets</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> minioClient.listBuckets();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//    文件上传  </span></span><br><span class="line"><span class="comment">//    @return Boolean  </span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();  </span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(originalFilename)) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">objectArgs</span> <span class="operator">=</span> PutObjectArgs  </span><br><span class="line">                    .builder()  </span><br><span class="line">                    .bucket(prop.getBucketName())  </span><br><span class="line">                    .object(file.getName())  </span><br><span class="line">                    .stream(file.getInputStream(), file.getSize(), -<span class="number">1</span>)  </span><br><span class="line">                    .contentType(file.getContentType())  </span><br><span class="line">                    .build();  </span><br><span class="line">            minioClient.putObject(objectArgs);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//    预览图片  </span></span><br><span class="line"><span class="comment">//    @return String  </span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">preview</span><span class="params">(String fileName)</span> &#123;  </span><br><span class="line">        <span class="type">GetPresignedObjectUrlArgs</span> <span class="variable">build</span> <span class="operator">=</span> GetPresignedObjectUrlArgs  </span><br><span class="line">                .builder()  </span><br><span class="line">                .bucket(prop.getBucketName())  </span><br><span class="line">                .object(fileName)  </span><br><span class="line">                .method(Method.GET)  </span><br><span class="line">                .build();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> minioClient.getPresignedObjectUrl(build);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MockMultipartFile重命名"><a href="#MockMultipartFile重命名" class="headerlink" title="MockMultipartFile重命名"></a>MockMultipartFile重命名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manpower.util;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.FileUtil;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.mock.web.MockMultipartFile;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;  </span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MFtoFileUtil</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MultipartFile <span class="title function_">MFtoFile</span><span class="params">(MultipartFile file, String filename)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="keyword">assert</span> file.getOriginalFilename() != <span class="literal">null</span>;  </span><br><span class="line">        <span class="type">File</span> <span class="variable">tempFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file.getOriginalFilename());  </span><br><span class="line">        FileUtils.copyInputStreamToFile(file.getInputStream(), tempFile);  </span><br><span class="line">        <span class="comment">//重命名  </span></span><br><span class="line">        tempFile = FileUtil.rename(tempFile, filename, <span class="literal">true</span>, <span class="literal">true</span>);  </span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(tempFile);  </span><br><span class="line">        <span class="comment">//File转换成MultipartFile  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newFilename</span> <span class="operator">=</span> tempFile.getName().substring(<span class="number">0</span>, tempFile.getName().lastIndexOf(<span class="string">&#x27;.&#x27;</span>));  </span><br><span class="line">        file = <span class="keyword">new</span> <span class="title class_">MockMultipartFile</span>(newFilename, tempFile.getName(), <span class="string">&quot;multipart/form-data&quot;</span>, inputStream);  </span><br><span class="line">        <span class="comment">//删除临时文件  </span></span><br><span class="line">        tempFile.delete();  </span><br><span class="line">        <span class="keyword">return</span> file;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mc服务器</title>
      <link href="/2022/12/10/%E6%9C%8D%E5%8A%A1%E5%99%A8/mc%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/12/10/%E6%9C%8D%E5%8A%A1%E5%99%A8/mc%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="java报错"><a href="#java报错" class="headerlink" title="java报错"></a>java报错</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">尝试更改启动命令</span><br><span class="line">java -Xms2G -Xmx3G -jar -Djava.awt.headless=true mohist-1.12.2-321-server.jar -nogui</span><br></pre></td></tr></table></figure><h1 id="保持运行"><a href="#保持运行" class="headerlink" title="保持运行"></a>保持运行</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S mcs </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xms2G -Xmx3G -jar -Djava.awt.headless=true mohist-1.12.2-321-server.jar -nogui</span><br></pre></td></tr></table></figure><h1 id="服务器权限相关"><a href="#服务器权限相关" class="headerlink" title="服务器权限相关"></a>服务器权限相关</h1><h2 id="死亡不掉落"><a href="#死亡不掉落" class="headerlink" title="死亡不掉落"></a>死亡不掉落</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gamerule keepinventory true</span><br></pre></td></tr></table></figure><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><pre><code>/op name```xs</code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2022/12/10/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux/"/>
      <url>/2022/12/10/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux/</url>
      
        <content type="html"><![CDATA[<h1 id="查看当前文件夹中文件"><a href="#查看当前文件夹中文件" class="headerlink" title="查看当前文件夹中文件"></a>查看当前文件夹中文件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><h1 id="文件夹"><a href="#文件夹" class="headerlink" title="文件夹"></a>文件夹</h1><h2 id="新建文件夹"><a href="#新建文件夹" class="headerlink" title="新建文件夹"></a>新建文件夹</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">新建一个文件夹</span><br><span class="line">mkdir name</span><br><span class="line"></span><br><span class="line">批量创建文件夹</span><br><span class="line">mkdir name1 name2 name3</span><br><span class="line"></span><br><span class="line">连续创建文件夹</span><br><span class="line">mkdir -p name1/name2/name3</span><br></pre></td></tr></table></figure><h2 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rmdir -p 目录名</span><br><span class="line">-p 删除指定目录之后，若该目录的上层目录已变成空目录，则将其一并删除。</span><br><span class="line"></span><br><span class="line">rm -rf 目录名</span><br><span class="line">-r 就是向下递归，不管有多少级目录，一并删除</span><br><span class="line">-f 就是直接强行删除，不作任何提示的意思</span><br></pre></td></tr></table></figure><h1 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h1><h2 id="切换窗口"><a href="#切换窗口" class="headerlink" title="切换窗口"></a>切换窗口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r pid</span><br></pre></td></tr></table></figure><h2 id="新建窗口"><a href="#新建窗口" class="headerlink" title="新建窗口"></a>新建窗口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S name</span><br></pre></td></tr></table></figure><h2 id="查看所有窗口"><a href="#查看所有窗口" class="headerlink" title="查看所有窗口"></a>查看所有窗口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -ls</span><br></pre></td></tr></table></figure><h2 id="删除窗口"><a href="#删除窗口" class="headerlink" title="删除窗口"></a>删除窗口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S name -X quit</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue开发过程常见问题</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/Vue%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/Vue%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>GET用来发少量数据,如果发送对象使用POST</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;  </span><br><span class="line">  url: &quot;http://localhost:8080/album/getAlbum&quot;,  </span><br><span class="line">  method: &quot;GET&quot;  </span><br><span class="line">&#125;).then((res) =&gt; &#123;  </span><br><span class="line">  this.urls = res.data;  </span><br><span class="line">  this.mx = res.data.length;  </span><br><span class="line">  // console.log(res.data);  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>数据多使用POST发送,这里发送一个对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">方案一:</span><br><span class="line">axios.post(&quot;http://localhost:8080/login&quot;, this.staff)</span><br><span class="line"></span><br><span class="line">方案二:</span><br><span class="line">axios(&#123;  </span><br><span class="line">  url: &quot;http://localhost:8080/essays/insertArticle&quot;,  </span><br><span class="line">  method: &quot;Post&quot;,  </span><br><span class="line">  data: JSON.stringify(this.essay),  </span><br><span class="line">  headers: &#123;  </span><br><span class="line">    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;).then((res) =&gt; &#123;  </span><br><span class="line">  // console.log(&quot;success!&quot;)  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="初始化滚动事件"><a href="#初始化滚动事件" class="headerlink" title="初始化滚动事件"></a>初始化滚动事件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;  </span><br><span class="line">  // 为页面设置滚动事件  </span><br><span class="line">  window.addEventListener(&quot;scroll&quot;, this.articleScroll(methods中函数), true);  </span><br><span class="line">&#125;,  </span><br><span class="line">beforeDestroy() &#123;  </span><br><span class="line">  // 离开页面销毁滚动事件</span><br><span class="line">  window.removeEventListener(&quot;scroll&quot;, this.articleScroll(methods中函数), true);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面的初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 页面初始化  </span><br><span class="line">watch: &#123;  </span><br><span class="line">  &#x27;$route&#x27;:  </span><br><span class="line">    &quot;getList&quot;,  </span><br><span class="line">&#125;,  </span><br><span class="line">// 页面初始化  </span><br><span class="line">created() &#123;  </span><br><span class="line">  this.getList();  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleScroll</span>(<span class="params">e</span>) &#123;  </span><br><span class="line">  <span class="keyword">let</span> ev = e || <span class="variable language_">window</span>.<span class="property">event</span>;  </span><br><span class="line">  <span class="keyword">let</span> down = ev.<span class="property">wheelDelta</span> ? ev.<span class="property">wheelDelta</span> &lt; <span class="number">0</span> : ev.<span class="property">detail</span> &gt; <span class="number">0</span>;  </span><br><span class="line">  <span class="keyword">if</span> (down) &#123;  </span><br><span class="line">    下滚</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    上滚  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">跳转并传参</span><br><span class="line">this.$router.push(&#123;path: url, query: &#123;note: value&#125;&#125;)</span><br><span class="line">接收参数</span><br><span class="line">this.$route.query.note</span><br></pre></td></tr></table></figure><p>调用父页面中方法&#x2F;数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$parent.方法/数据</span><br></pre></td></tr></table></figure><h1 id="同步异步-图片上传压缩为例"><a href="#同步异步-图片上传压缩为例" class="headerlink" title="同步异步(图片上传压缩为例)"></a>同步异步(图片上传压缩为例)</h1><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;select&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/jpg,image/png&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;uploadPhoto($event)&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">uploadPhoto: async function (e) &#123;  </span><br><span class="line">  // 先重置  </span><br><span class="line">  this.reset();  </span><br><span class="line">  // 利用fileReader对象获取file  </span><br><span class="line">  this.file = e.target.files[0];  </span><br><span class="line">  this.filesize = this.file.size;  </span><br><span class="line">  // 同步执行转异步执行  </span><br><span class="line">  let promiseTemp = null;  </span><br><span class="line">  let promiseResolve = null;  </span><br><span class="line">  // console.log(this.file);  </span><br><span class="line">  // 如果大小过1MB则进行压缩  </span><br><span class="line">  if (this.filesize &gt; 1024 * 1024) &#123;  </span><br><span class="line">    this.is_file = true;  </span><br><span class="line">    promiseTemp = new Promise(resolve =&gt; promiseResolve = resolve)  </span><br><span class="line">    let blob = new Promise((resolve) =&gt; &#123;  </span><br><span class="line">      // 压缩到100KB,这里的100就是要压缩的大小,可自定义  </span><br><span class="line">      imageConversion.compressAccurately(this.file, 1024).then(res =&gt; &#123;  </span><br><span class="line">        // console.log(res)  </span><br><span class="line">        this.file = new File([res], this.file.name, &#123;type: this.file.type&#125;)  </span><br><span class="line">        resolve(res);  </span><br><span class="line">        promiseResolve(&#x27;执行完毕&#x27;);  </span><br><span class="line">      &#125;);  </span><br><span class="line">    &#125;);  </span><br><span class="line">    let a = await promiseTemp;  </span><br><span class="line">    // console.log(blob);  </span><br><span class="line">    // this.file = new File([blob], this.file.name, &#123;type: this.file.type&#125;)    this.is_file = false;  </span><br><span class="line">  &#125;  </span><br><span class="line">  let reader = new FileReader();  </span><br><span class="line">  reader.readAsDataURL(this.file);  </span><br><span class="line">  reader.onload = (e) =&gt; &#123;  </span><br><span class="line">    // 读取到的图片base64 数据编码  </span><br><span class="line">    this.album.base = e.target.result;  </span><br><span class="line">  &#125;  </span><br><span class="line">  this.sub_success = true;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改页面title</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在main.js中配置</span><br><span class="line"></span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;  </span><br><span class="line">  /* 路由发生变化修改页面title */  </span><br><span class="line">  if (to.meta.title) &#123;  </span><br><span class="line">    document.title = to.meta.title  </span><br><span class="line">  &#125;  </span><br><span class="line">  next()  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h1><h2 id="拼接字符串转为图片路径"><a href="#拼接字符串转为图片路径" class="headerlink" title="拼接字符串转为图片路径"></a>拼接字符串转为图片路径</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:src=&quot;require(&#x27;../assets/&#x27;+Src)&quot;</span><br></pre></td></tr></table></figure><h1 id="自动跳转首页"><a href="#自动跳转首页" class="headerlink" title="自动跳转首页"></a>自动跳转首页</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>: [  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,  </span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/login&#x27;</span>  </span><br><span class="line">  &#125;,  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,  </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,  </span><br><span class="line">    <span class="attr">component</span>: login  </span><br><span class="line">  &#125;,  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,  </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,  </span><br><span class="line">    <span class="attr">component</span>: home  </span><br><span class="line">  &#125;  </span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>autocomplete&#x3D;”off”</p><p>让input表单输入框不记录输入过的信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;staff.password&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">clearable</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><code>v-show</code>和<code>v-if</code>改变样式不会触发动画</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>不使用<code>:style</code>,使用<code>:class</code>进行切换</p><h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><h2 id="异步方法返回值"><a href="#异步方法返回值" class="headerlink" title="异步方法返回值"></a>异步方法返回值</h2><p>异步方法返回值为<code>promise</code>对象,需要通过<code>.then(res=&gt;&#123;&#125;)</code>接收</p><h1 id="axios-1"><a href="#axios-1" class="headerlink" title="axios"></a>axios</h1><h2 id="409状态码"><a href="#409状态码" class="headerlink" title="409状态码"></a>409状态码</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>发现axios拿不到后端返回的内容,但是可以正常访问</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>直接通过response拿</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;http://localhost:8080/staff/name/&quot;</span> + <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>))  </span><br><span class="line">  .<span class="title function_">then</span>()  </span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">info</span> = e.<span class="property">response</span>.<span class="property">data</span>;  </span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h1 id="监听页面变化-宽度-x2F-高度"><a href="#监听页面变化-宽度-x2F-高度" class="headerlink" title="监听页面变化(宽度&#x2F;高度)"></a>监听页面变化(宽度&#x2F;高度)</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="variable language_">this</span>.<span class="property">getScreenWidth</span>);</span><br></pre></td></tr></table></figure><h2 id="获取页面宽度"><a href="#获取页面宽度" class="headerlink" title="获取页面宽度"></a>获取页面宽度</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span>|| <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span></span><br></pre></td></tr></table></figure><h1 id="监听页面刷新"><a href="#监听页面刷新" class="headerlink" title="监听页面刷新"></a>监听页面刷新</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">user</span> = <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">user</span>;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="图片加载失败调用函数"><a href="#图片加载失败调用函数" class="headerlink" title="图片加载失败调用函数"></a>图片加载失败调用函数</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img alt=&quot;&quot; :src=&quot;personBgUrl&quot; class=&quot;psImg&quot; @error=&quot;setPersonDefaultBgUrl&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="net-ERR-FAILED错误"><a href="#net-ERR-FAILED错误" class="headerlink" title="net::ERR_FAILED错误"></a>net::ERR_FAILED错误</h1><h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p>可能是后台拦截器未开放权限</p><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><p>后台拦截器开放权限</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/Vue/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/Vue/</url>
      
        <content type="html"><![CDATA[<p><a href="Vue%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.md">Vue开发过程常见问题</a></p><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="创建文件引入Vue"><a href="#创建文件引入Vue" class="headerlink" title="创建文件引入Vue"></a>创建文件引入Vue</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一种方法,建议新手,包含了有帮助的命令和警告</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">第二种方法,优化了尺寸和速度</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>测试用例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&quot;Hello Vue!&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="el-挂载点"><a href="#el-挂载点" class="headerlink" title="el:挂载点"></a>el:挂载点</h2><ol><li>Vue实例的作用范围:<br><strong>el标签命中的内部都能使用</strong></li><li>使用其他选择器:<br><strong>标签,id,class</strong>都用,<strong>最好使用id选择器</strong>,因为id大部分时间唯一</li><li>设置其他dom元素:<br>可以使用其他的双标签,不能使用html和body</li></ol><h2 id="data数据"><a href="#data数据" class="headerlink" title="data数据"></a>data数据</h2><p>data内可以为复杂数据类型,调用方法和其他语言几乎一致</p><h2 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h2><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><p>v-text设置在标签中设置文本,也可以对其进行拼接,此处和微信小程序开发用法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">message</span>:<span class="string">&quot;Hello Vue!&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p>用于设置标签的innerHTML,用法和v-text差不多</p><p>但是v-html里面内容会被渲染,v-text则会被当做文本输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span> --&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span> --&gt; test</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">message</span>:<span class="string">&quot;&lt;div&gt;test&lt;/div&gt;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>为元素绑定事件</p><p><strong>v-on:”方法”</strong></p><p>例如</p><ul><li>点击事件:<strong>v-on:click</strong></li><li>鼠标移入事件:<strong>v-on:monseenter</strong></li><li>双击事件:<strong>v-on:dblclick</strong></li><li>等…</li></ul><p>方法都要写入<strong>methods</strong>属性中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-on:click</span>=<span class="string">&quot;dolt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">vue支持将v-on替换为@</span><br><span class="line">&lt;h2 @click=<span class="string">&quot;dolt&quot;</span>&gt;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">message</span>:<span class="string">&quot;&lt;div&gt;test&lt;/div&gt;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="attr">dolt</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>可以通过事件里面的this来使用data中的数据,可以用<code>=</code>等操作改变data中数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">message</span>:<span class="string">&quot;test&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="attr">dolt</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>可以用来传参,直接加括号即可,用法与h5和js用法几乎相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-on:click</span>=<span class="string">&quot;dolt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">vue支持将v-on替换为@</span><br><span class="line">&lt;h2 @click=<span class="string">&quot;dolt()&quot;</span>&gt;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">message</span>:<span class="string">&quot;test&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="attr">dolt</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>根据表达式的真假,切换元素的显示和隐藏</p><p>v-show&#x3D;”true”则显示</p><p>v-show&#x3D;”false”则隐藏</p><p>即可以用v-show&#x3D;”判断式”来进行操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;age&gt;=18&quot;</span>&gt;</span>显示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">age</span>:<span class="number">15</span></span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="attr">dolt</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>根据表达式值的真假,切换元素的显示和隐藏(操纵dom元素)</p><p>跟v-show用法差不多</p><p>v-show适用于频繁切换,反之用v-if</p><p>v-show容易泄露用户信息,只是将元素隐藏</p><p>v-if则是移除dom树中元素</p><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>设置元素的属性(比如:src,tittle,class)</p><p>使用方法:<strong>v-bind:属性名&#x3D;表达式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgSrc&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">imgSrc</span>:<span class="string">&quot;图片地址&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>其中也可以通过表达式来选择获得</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    方式一:</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;isActive?&#x27;imgSrc&#x27;:&#x27;&#x27;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">    方式二:</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;&#123;imgSrc:isActive&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">var app = new Vue(&#123;</span></span><br><span class="line"><span class="language-xml">        el:&quot;#app&quot;,</span></span><br><span class="line"><span class="language-xml">        data:&#123;</span></span><br><span class="line"><span class="language-xml">            imgSrc:&quot;图片地址&quot;,</span></span><br><span class="line"><span class="language-xml">            isActive:false</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;)</span></span><br></pre></td></tr></table></figure><p>这里面v-bind可以直接省略掉,只留下<code>:</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;&#123;imgSrc:isActive&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">imgSrc</span>:<span class="string">&quot;图片地址&quot;</span>,</span><br><span class="line">            <span class="attr">isActive</span>:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p><strong>v-for&#x3D;”变量名 in 目标数据名”</strong></p><p>其中该变量名可以直接在本体以及内部使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in arr&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">arr</span>:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>可以添加<strong>index</strong>来获取下标</p><p><strong>v-for&#x3D;”(变量名, index) in 目标数据名”</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in arr&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">arr</span>:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>可以使用<code>.</code>来获取对象值</p><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>获取和设置表单元素的值(<strong>双向数据绑定</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>/&gt;</span></span></span><br><span class="line">&#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">          <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">          <span class="attr">data</span>:&#123;</span><br><span class="line">              <span class="attr">message</span>:<span class="string">&quot;test&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><h1 id="网络应用-axios"><a href="#网络应用-axios" class="headerlink" title="网络应用-axios"></a>网络应用-axios</h1><p><strong>简介</strong>:功能强大的网络请求库</p><p>使用链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><p>方法一:get请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(地址).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>)&#123;请求相应完成后触发&#125;,<span class="keyword">function</span>(<span class="params">err</span>)&#123;错误时触发&#125;)</span><br><span class="line"></span><br><span class="line">如果需要查询参数,则在地址后加<span class="string">&#x27;?&#x27;</span>接上查询字符串</span><br><span class="line">axios.<span class="title function_">get</span>(地址?查询字符串).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>)&#123;请求相应完成后触发&#125;,<span class="keyword">function</span>(<span class="params">err</span>)&#123;错误时触发&#125;)</span><br></pre></td></tr></table></figure><p>方法二:post请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方法和get方法类似,但是查询参数方式不一样</span><br><span class="line">axios.<span class="title function_">post</span>(地址).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>)&#123;请求相应完成后触发&#125;,<span class="keyword">function</span>(<span class="params">err</span>)&#123;错误时触发&#125;)</span><br><span class="line"></span><br><span class="line">数据是以参数对象的形式写在第二个参数内部</span><br><span class="line">axios.<span class="title function_">get</span>(地址,参数对象).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>)&#123;请求相应完成后触发&#125;,<span class="keyword">function</span>(<span class="params">err</span>)&#123;错误时触发&#125;)</span><br></pre></td></tr></table></figure><p>请求返回值类型均为对象形式</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;;</span><br></pre></td></tr></table></figure><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;  </span><br><span class="line">  url: &quot;http://localhost:8080/essays/insertArticle&quot;,  </span><br><span class="line">  method: &quot;Post&quot;,  </span><br><span class="line">  data: JSON.stringify(this.essay),  </span><br><span class="line">  headers: &#123;  </span><br><span class="line">    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;).then((res) =&gt; &#123;  </span><br><span class="line">  // console.log(&quot;success!&quot;)  </span><br><span class="line">  this.reset();  </span><br><span class="line">  this.sub_success = true </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h1><p>跳转<a href="element-ui.md">element-ui</a>笔记</p><h1 id="Vue项目初始化"><a href="#Vue项目初始化" class="headerlink" title="Vue项目初始化"></a>Vue项目初始化</h1><ol><li>cnpm install vue-cli -g</li><li>检查是否安装成功vue list</li><li>创建项目vue init webpack 名字<br><img src="https://raw.githubusercontent.com/2768085634/pic/main/image-20220929103537472.png" alt="image-20220929103537472"></li></ol><h2 id="配置运行环境"><a href="#配置运行环境" class="headerlink" title="配置运行环境"></a>配置运行环境</h2><p><img src="https://raw.githubusercontent.com/2768085634/pic/main/20220929103717.png"><br><img src="https://raw.githubusercontent.com/2768085634/pic/main/20220929103818.png"><br><img src="https://raw.githubusercontent.com/2768085634/pic/main/20220929104114.png"></p><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure><h2 id="element-ui-1"><a href="#element-ui-1" class="headerlink" title="element-ui"></a>element-ui</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure><p>vue3中使用还需要引入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></table></figure><p>在main.js中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;  </span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;  </span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,  </span><br><span class="line">  router,  </span><br><span class="line">  <span class="attr">components</span>: &#123; <span class="title class_">App</span> &#125;,  </span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 加上这句话 */</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h1><h2 id="什么是路由守卫"><a href="#什么是路由守卫" class="headerlink" title="什么是路由守卫"></a>什么是路由守卫</h2><p>路由守卫就是路由跳转的一些验证(登录授权等)</p><h2 id="路由守卫种类"><a href="#路由守卫种类" class="headerlink" title="路由守卫种类"></a>路由守卫种类</h2><ol><li>全局守卫:<ul><li>前置守卫:<code>beforeEach</code></li><li>后置钩子:<code>afterEach</code></li></ul></li><li>单个路由守卫:<ul><li>独享守卫:<code>beforeEnter</code></li></ul></li><li>组件内部守卫:<ul><li><code>beforeRouteEnter</code></li><li><code>beforeRouteUpdate</code></li><li><code>beforeRouteLeave</code></li></ul></li></ol><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p>所有的路由守卫都是三个参数:</p><ol><li><code>to</code>要进入的目标路由</li><li><code>from</code>要离开的路由</li><li><code>next</code>是否进行下一步</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>写<code>next()</code>相当于<code>next(true)</code>继续执行</p><p>不写<code>next()</code>相当于<code>next(false)</code>终止执行</p><p><code>next(path)</code>跳转,例如:<code>next(&quot;/login&quot;)</code></p><p><strong>后置钩子<code>afterEach</code>没有<code>next</code>参数!</strong></p><p><strong><code>next()</code>一定要写<code>if-else</code>否则会被调用多次!</strong></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h3><p>给需要守卫的路由加上该字段:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">meta</span>: &#123;</span><br><span class="line"><span class="attr">permission</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全局前置守卫beforeEach"><a href="#全局前置守卫beforeEach" class="headerlink" title="全局前置守卫beforeEach"></a>全局前置守卫<code>beforeEach</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">permission</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>)) &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 此处else不能省略!否则next()会被调用多次!</span></span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="全局后置钩子-很少用"><a href="#全局后置钩子-很少用" class="headerlink" title="全局后置钩子(很少用)"></a>全局后置钩子(很少用)</h4><p>这些钩子不会接受 <code>next</code> 函数也不会改变导航本身</p><p>它们对于分析、更改页面标题、声明页面等辅助功能以及许多其他事情都很有用。</p><p>它们也反映了 <a href="https://router.vuejs.org/zh/guide/advanced/navigation-failures.html">navigation failures</a> 作为第三个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, failure</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!failure) <span class="title function_">sendToAnalytics</span>(to.<span class="property">fullPath</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由独享守卫"><a href="#路由独享守卫" class="headerlink" title="路由独享守卫"></a>路由独享守卫</h3><p>你可以直接在路由配置上定义 <code>beforeEnter</code> 守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserDetails</span>,</span><br><span class="line">    <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// reject the navigation</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>beforeEnter</code>守卫<strong>只在进入路由时触发</strong>，不会在 <code>params</code>、<code>query</code> 或 <code>hash</code> 改变时触发。例如，从 <code>/users/2</code> 进入到 <code>/users/3</code> 或者从 <code>/users/2#info</code> 进入到 <code>/users/2#projects</code>。它们只有在 <strong>从一个不同的</strong> 路由导航时，才会被触发。</p><p>你也可以将一个函数数组传递给 <code>beforeEnter</code>，这在为不同的路由重用守卫时很有用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeQueryParams</span>(<span class="params">to</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">keys</span>(to.<span class="property">query</span>).<span class="property">length</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">path</span>: to.<span class="property">path</span>, <span class="attr">query</span>: &#123;&#125;, <span class="attr">hash</span>: to.<span class="property">hash</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeHash</span>(<span class="params">to</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">hash</span>) <span class="keyword">return</span> &#123; <span class="attr">path</span>: to.<span class="property">path</span>, <span class="attr">query</span>: to.<span class="property">query</span>, <span class="attr">hash</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserDetails</span>,</span><br><span class="line">    <span class="attr">beforeEnter</span>: [removeQueryParams, removeHash],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserDetails</span>,</span><br><span class="line">    <span class="attr">beforeEnter</span>: [removeQueryParams],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>请注意，你也可以通过使用<strong>路径 meta 字段</strong>和<strong>全局导航守卫</strong>来实现类似的行为。</p><h3 id="组件内部守卫"><a href="#组件内部守卫" class="headerlink" title="组件内部守卫"></a>组件内部守卫</h3><ul><li><code>beforeRouteEnter</code>进入前</li><li><code>beforeRouteUpdate</code>路由变化时</li><li><code>beforeRouteLeave</code>离开后(通常用来禁止用户在还未保存修改前突然离开,该导航可以通过<code>next(false)</code>来取消)</li></ul><p><em>beforeRouteEnter</em></p><p><strong><code>beforeRouteEnter</code> 守卫 不能 访问 <code>this</code>，因为守卫在导航确认前被调用，因此即将登场的新组件还没被创建。</strong></p><p>不过，你可以通过传一个回调给 <code>next</code> 来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>beforeRouteUpdate</em> 和 <em>beforeRouteLeave&#96;</em></p><p>注意 <code>beforeRouteEnter</code> 是支持给 <code>next</code> 传递回调的唯一守卫。对于 <code>beforeRouteUpdate</code> 和 <code>beforeRouteLeave</code> 来说，<code>this</code> 已经可用了，所以_不支持_ 传递回调，因为没有必要了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteUpdate (to, from) &#123;</span><br><span class="line">  // just use `this`</span><br><span class="line">  this.name = to.params.name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 <strong>离开守卫</strong> 通常用来预防用户在还未保存修改前突然离开。该导航可以通过返回 <code>false</code> 来取消。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave (to, from) &#123;</span><br><span class="line">  const answer = window.confirm(&#x27;Do you really want to leave? you have unsaved changes!&#x27;)</span><br><span class="line">  if (!answer) return false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">  <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">  <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">  <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">  <span class="keyword">if</span> (sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>)) &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">  <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">  <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">  <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">  <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="完整导航解析流程"><a href="#完整导航解析流程" class="headerlink" title="完整导航解析流程"></a>完整导航解析流程</h4><p>导航被触发。<br>在失活的组件里调用 beforeRouteLeave 守卫。<br>调用全局的 beforeEach 守卫。<br>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。<br>在路由配置里调用 beforeEnter。<br>解析异步路由组件。<br>在被激活的组件里调用 beforeRouteEnter。<br>调用全局的 beforeResolve 守卫 (2.5+)。<br>导航被确认。<br>调用全局的 afterEach 钩子。<br>触发 DOM 更新。<br>调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>token登录验证（前端）</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/token%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%EF%BC%88%E5%89%8D%E7%AB%AF%EF%BC%89/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/token%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%EF%BC%88%E5%89%8D%E7%AB%AF%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h1><h2 id="登录请求"><a href="#登录请求" class="headerlink" title="登录请求"></a>登录请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;http://localhost:8080/login&quot;</span>, <span class="variable language_">this</span>.<span class="property">staff</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;  </span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">data</span> != <span class="literal">null</span>) &#123;  </span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;access-admin&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res.<span class="property">data</span>))  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/home&#x27;</span>)  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">path</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;/login&#x27;</span>)) &#123;  </span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;access-admin&#x27;</span>)  </span><br><span class="line">    <span class="title function_">next</span>()  </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    <span class="keyword">let</span> admin = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;access-admin&#x27;</span>))  </span><br><span class="line">    <span class="keyword">if</span> (!admin) &#123;  </span><br><span class="line">      <span class="title function_">next</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>&#125;)  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">      <span class="comment">// 校验 token 合法性  </span></span><br><span class="line">      <span class="title function_">axios</span>(&#123;  </span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080/checkToken&#x27;</span>,  </span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,  </span><br><span class="line">        <span class="attr">headers</span>: &#123;  </span><br><span class="line">          <span class="attr">token</span>: admin.<span class="property">token</span>  </span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (!res.<span class="property">data</span>) &#123;  </span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;校验失败&#x27;</span>)  </span><br><span class="line">          <span class="title function_">next</span>(&#123;<span class="attr">path</span>: <span class="string">&#x27;/error&#x27;</span>&#125;)  </span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;)  </span><br><span class="line">      <span class="title function_">next</span>()  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>token登录验证（后端）</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/token%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%EF%BC%88%E5%90%8E%E7%AB%AF%EF%BC%89/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/token%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%EF%BC%88%E5%90%8E%E7%AB%AF%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><p>用来生成JWT</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manpower.util;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Date;  </span><br><span class="line"><span class="keyword">import</span> java.util.UUID;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//private static long time = 1000*10;        // token 有效期为10秒  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>;   <span class="comment">// token 有效期为一天  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">signature</span> <span class="operator">=</span> <span class="string">&quot;admin&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 生成token ，三个参数是我实体类的字段，可根据自身需求来传，一般只需要用户id即可  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJwtToken</span><span class="params">(String operNo, String operName, String organNo)</span> &#123;  </span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder();  </span><br><span class="line">        <span class="keyword">return</span> builder  </span><br><span class="line">                <span class="comment">// header  </span></span><br><span class="line">                .setHeaderParam(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>)  </span><br><span class="line">                .setHeaderParam(<span class="string">&quot;alg&quot;</span>, <span class="string">&quot;HS256&quot;</span>)  </span><br><span class="line">                <span class="comment">// payload 载荷  </span></span><br><span class="line">                .claim(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;admin&quot;</span>)  </span><br><span class="line">                .claim(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;admin&quot;</span>)  </span><br><span class="line">                .claim(<span class="string">&quot;date&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>())  </span><br><span class="line">                .setSubject(<span class="string">&quot;admin-test&quot;</span>)  </span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + time))  </span><br><span class="line">                .setId(UUID.randomUUID().toString())  </span><br><span class="line">                <span class="comment">// signature 签名信息  </span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, signature)  </span><br><span class="line">                <span class="comment">// 用.拼接  </span></span><br><span class="line">                .compact();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 验证 token 是否还有效，返回具体内容  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">checkToken</span><span class="params">(String token)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="type">JwtParser</span> <span class="variable">parser</span> <span class="operator">=</span> Jwts.parser();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Jws&lt;Claims&gt; claimsJws = parser.setSigningKey(signature).parseClaimsJws(token);  </span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> claimsJws.getBody();  </span><br><span class="line">            System.out.println(claims.get(<span class="string">&quot;username&quot;</span>));  </span><br><span class="line">            System.out.println(claims.get(<span class="string">&quot;role&quot;</span>));  </span><br><span class="line">            System.out.println(claims.getId());  </span><br><span class="line">            System.out.println(claims.getSubject()); <span class="comment">// 签名  </span></span><br><span class="line">            System.out.println(claims.getExpiration()); <span class="comment">// 有效期  </span></span><br><span class="line">            <span class="comment">// 如果解析 token 正常，返回 claims            return claims;  </span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            <span class="comment">// 如果解析 token 抛出异常，返回 null            return null;  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Config配置"><a href="#Config配置" class="headerlink" title="Config配置"></a>Config配置</h2><p>只放行登录页面即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manpower.config;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.manpower.interceptor.MyInterceptor;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptorConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;  </span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">MyInterceptor</span>()).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/login&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Interceptor拦截器"><a href="#Interceptor拦截器" class="headerlink" title="Interceptor拦截器"></a>Interceptor拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manpower.interceptor;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.manpower.util.JwtUtil;  </span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    StringRedisTemplate redisTemplate;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">requestToken</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);  </span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(requestToken))&#123;  </span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.checkToken(request.getHeader(<span class="string">&quot;Authorization&quot;</span>));  </span><br><span class="line">            <span class="keyword">if</span> (claims != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;operToken&quot;</span>+claims.get(<span class="string">&quot;operNo&quot;</span>));  </span><br><span class="line">                <span class="keyword">if</span>(Boolean.TRUE.equals(redisTemplate.hasKey(<span class="string">&quot;operToken&quot;</span> + claims.get(<span class="string">&quot;operNo&quot;</span>))))&#123;  </span><br><span class="line">                    <span class="keyword">if</span>(requestToken.equals(token))&#123;  </span><br><span class="line">                        <span class="comment">// token正确  </span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;  </span><br><span class="line">                        <span class="comment">// token错误，判为并发登录，挤下线  </span></span><br><span class="line">                        <span class="comment">// 对应的修改响应头的状态，用于前端判断做出相应的策略  </span></span><br><span class="line">                        response.setStatus(<span class="number">411</span>);  </span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;  </span><br><span class="line">                    <span class="comment">// token不存在于redis中，已过期  </span></span><br><span class="line">                    response.setStatus(<span class="number">410</span>);  </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">// 解析token中的用户信息claims为null  </span></span><br><span class="line">            response.setStatus(<span class="number">409</span>);  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// requestToken为空  </span></span><br><span class="line">        response.setStatus(<span class="number">409</span>);  </span><br><span class="line"><span class="comment">//        System.out.println(method);  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line"><span class="comment">//        System.out.println(&quot;执行完方法之后,但是在视图渲染之前&quot;);  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line"><span class="comment">//        System.out.println(&quot;视图渲染之后,可以做一些清理工作&quot;);  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manpower.controller;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.manpower.entity.Staff;  </span><br><span class="line"><span class="keyword">import</span> com.manpower.service.IStaffService;  </span><br><span class="line"><span class="keyword">import</span> com.manpower.util.JwtUtil;  </span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@CrossOrigin</span>  </span><br><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> IStaffService staffService;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@PostMapping()</span>  </span><br><span class="line">    <span class="keyword">private</span> Staff <span class="title function_">loginIn</span><span class="params">(<span class="meta">@RequestBody</span> Staff staff)</span> &#123;  </span><br><span class="line">        <span class="type">Staff</span> <span class="variable">staff1</span> <span class="operator">=</span> staffService.getById(staff.getId());  </span><br><span class="line"><span class="comment">//        System.out.println(staff1);  </span></span><br><span class="line">        <span class="keyword">if</span> (staff1 == <span class="literal">null</span> || !staff1.getPassword().equals(staff.getPassword())) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> staff1;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/checkToken&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Claims <span class="title function_">checkToken</span><span class="params">(HttpServletRequest request)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> JwtUtil.checkToken(token);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整合minio</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/springboot%E6%95%B4%E5%90%88minio/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/springboot%E6%95%B4%E5%90%88minio/</url>
      
        <content type="html"><![CDATA[<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manpower.config;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;  </span><br><span class="line"><span class="keyword">import</span> lombok.Data;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;minio&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioConfig</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String endpoint;  </span><br><span class="line">    <span class="keyword">private</span> String bucketName;  </span><br><span class="line">    <span class="keyword">private</span> String accessKey;  </span><br><span class="line">    <span class="keyword">private</span> String secretKey;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">minioClient</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder()  </span><br><span class="line">                .endpoint(endpoint)  </span><br><span class="line">                .credentials(accessKey, secretKey)  </span><br><span class="line">                .build();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="util"><a href="#util" class="headerlink" title="util"></a>util</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manpower.util;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.manpower.config.MinioConfig;  </span><br><span class="line"><span class="keyword">import</span> io.minio.*;  </span><br><span class="line"><span class="keyword">import</span> io.minio.http.Method;  </span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Bucket;  </span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioUtil</span> &#123;  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> MinioConfig prop;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//    创建存储bucket  </span></span><br><span class="line"><span class="comment">//    @return Boolean  </span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">makeBucket</span><span class="params">(String bucketName)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            minioClient.makeBucket(MakeBucketArgs.builder()  </span><br><span class="line">                    .bucket(bucketName)  </span><br><span class="line">                    .build());  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//    删除存储bucket  </span></span><br><span class="line"><span class="comment">//    @return Boolean  </span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">removeBucket</span><span class="params">(String bucketName)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            minioClient.removeBucket(RemoveBucketArgs.builder()  </span><br><span class="line">                    .bucket(bucketName)  </span><br><span class="line">                    .build());  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//    获取全部bucket  </span></span><br><span class="line"><span class="comment">//    @return List&lt;Bucket&gt;  </span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Bucket&gt; <span class="title function_">getAllBuckets</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> minioClient.listBuckets();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//    文件上传  </span></span><br><span class="line"><span class="comment">//    @return Boolean  </span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">upload</span><span class="params">(MultipartFile file, String filename)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();  </span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(originalFilename)) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">objectArgs</span> <span class="operator">=</span> PutObjectArgs  </span><br><span class="line">                    .builder()  </span><br><span class="line">                    .bucket(prop.getBucketName())  </span><br><span class="line">                    .object(filename)  </span><br><span class="line">                    .stream(file.getInputStream(), file.getSize(), -<span class="number">1</span>)  </span><br><span class="line">                    .contentType(file.getContentType())  </span><br><span class="line">                    .build();  </span><br><span class="line">            minioClient.putObject(objectArgs);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//    预览图片  </span></span><br><span class="line"><span class="comment">//    @return String  </span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">preview</span><span class="params">(String fileName)</span> &#123;  </span><br><span class="line">        <span class="type">GetPresignedObjectUrlArgs</span> <span class="variable">build</span> <span class="operator">=</span> GetPresignedObjectUrlArgs  </span><br><span class="line">                .builder()  </span><br><span class="line">                .bucket(prop.getBucketName())  </span><br><span class="line">                .object(fileName)  </span><br><span class="line">                .method(Method.GET)  </span><br><span class="line">                .build();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> minioClient.getPresignedObjectUrl(build);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">minio:  </span><br><span class="line">  endpoint: http:<span class="comment">//1.116.135.197:9000  </span></span><br><span class="line">  bucketName: image  </span><br><span class="line">  accessKey: root  </span><br><span class="line">  secretKey: csh20011103</span><br></pre></td></tr></table></figure><h1 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manpower.controller;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.manpower.config.MinioConfig;  </span><br><span class="line"><span class="keyword">import</span> com.manpower.util.MinioUtil;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@CrossOrigin</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/image&quot;)</span>  </span><br><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageController</span> &#123;  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> MinioUtil minioUtil;  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> MinioConfig prop;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/perview/&#123;filename&#125;&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">preview</span><span class="params">(<span class="meta">@PathVariable(&quot;filename&quot;)</span> String filename)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> minioUtil.preview(filename);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> java </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot拦截器</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/Springboot%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/Springboot%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="定义拦截器"><a href="#定义拦截器" class="headerlink" title="定义拦截器"></a>定义拦截器</h1><p>只需要实现<code>HandlerInterceptor</code>接口即可,该接口内有三个方法</p><ol><li>preHandler(…)<ul><li>当某个 URL 已经匹配到对应的 Controller 中的某个方法，且在这个方法执行之前。</li><li>可以决定是否将请求放行，这是通过返回值来决定的，返回 true 则放行，返回 false 则不会向后执行。</li></ul></li><li>postHandler(…)<ul><li>当某个 URL 已经匹配到对应的 Controller 中的某个方法，且在执行完了该方法，但是在 DispatcherServlet 视图渲染之前。</li><li>这个方法中有个 ModelAndView 参数，可以在此做一些修改动作。</li></ul></li><li>afterCompletion(…)<ul><li>在<strong>整个请求处理完成后（包括视图渲染）执行，这时做一些资源的清理工作</strong></li><li>这个方法只有在 <code>preHandle(...)</code> 被成功执行后并且返回 true 才会被执行。</li></ul></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在Interceptor中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 加上这句话,避免axios调用接口时报错(因为此处用到了强制转换)</span></span><br><span class="line"><span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> (HandlerMethod) handler;  </span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> handlerMethod.getMethod();  </span><br><span class="line">        System.out.println(<span class="string">&quot;run &quot;</span> + method.getName());  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;执行完方法之后,但是在视图渲染之前&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;视图渲染之后,可以做一些清理工作&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Config中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptorConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;  </span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">MyInterceptor</span>()).addPathPatterns(<span class="string">&quot;/**&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot开发常见问题</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/SpringBoot%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/SpringBoot%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><h2 id="POST传递对象"><a href="#POST传递对象" class="headerlink" title="POST传递对象"></a>POST传递对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping()</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStaff</span><span class="params">(<span class="meta">@RequestBody</span> Staff staff)</span> &#123;  </span><br><span class="line">    staffService.save(staff);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PUT传递对象"><a href="#PUT传递对象" class="headerlink" title="PUT传递对象"></a>PUT传递对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping()</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStaff</span><span class="params">(<span class="meta">@RequestBody</span> Staff staff)</span> &#123;  </span><br><span class="line">    UpdateWrapper&lt;Staff&gt; uw = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();  </span><br><span class="line">    uw.eq(<span class="string">&quot;id&quot;</span>, staff.getId());  </span><br><span class="line">    staffService.update(staff, uw);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为put传递时意味更新,所以需要用到<code>对象</code>和<code>UpdateWrapper&lt;Staff&gt;</code></p><p>在更新时使用<code>staffService.update(staff, uw)</code>即可匹配更新</p><h1 id="自动注入警告-不建议使用字段注入"><a href="#自动注入警告-不建议使用字段注入" class="headerlink" title="自动注入警告:不建议使用字段注入"></a>自动注入警告:不建议使用字段注入</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>@Autowired会警告但是@Resource不会警告</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p><strong>@Autowired</strong>是<strong>Spring</strong>提供的，它是<strong>特定IoC提供的特定注解</strong>，这就导致了应用与框架的<strong>强绑定</strong>，一旦换用了其他的IoC框架，是<strong>不能够支持注入</strong>的。而 <strong>@Resource</strong>是<strong>JSR-250</strong>提供的，它是<strong>Java标准</strong>，我们使用的IoC容器应当去兼容它，这样即使更换容器，也可以正常工作。</p><h1 id="映射重复"><a href="#映射重复" class="headerlink" title="映射重复"></a>映射重复</h1><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>Ambiguous handler methods mapped for HTTP path</p><h2 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h2><p>当请求方式一致，这里是get请求，而参数写在URL中，因为不知道具体访问到哪一个接口，此时访问任何一个接口都会报这个错，其实就是含糊映射。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>修改请求路径</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/SpringBoot/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/SpringBoot/</url>
      
        <content type="html"><![CDATA[<p>[[spring]]<br>[[MyBatis]]</p><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h2><p>配置顺序:properties &gt; yml &gt; yaml</p><p>数组数据子啊数据书写位置的下方使用减号作为数据开始符号,每行输写一个数据,减号与数据间空格分隔</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">likes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">测试</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><h2 id="yml读取"><a href="#yml读取" class="headerlink" title="yml读取"></a>yml读取</h2><p>采用注解形式即可,如果是数组里某个可以读取的时候加上下标即可</p><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;enterprise&quot;)</span><br><span class="line">public class Book &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private String[] subject;</span><br><span class="line"></span><br><span class="line">    set和get方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多环境启动"><a href="#多环境启动" class="headerlink" title="多环境启动"></a>多环境启动</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">  <span class="comment"># 选择启动哪一个环境</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">t3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">haog</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">测试</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">用例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过时写法</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 当前环境名</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">t1</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 新写法</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">t1</span></span><br><span class="line">      </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">t2</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">t3</span></span><br></pre></td></tr></table></figure><p>也可以在properties中选择环境</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">t3</span></span><br></pre></td></tr></table></figure><h2 id="整合mybatis"><a href="#整合mybatis" class="headerlink" title="整合mybatis"></a>整合mybatis</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    @Select(&quot;SELECT * from bookta where title = #&#123;title&#125;&quot;)</span><br><span class="line">    public User getTitle(String title);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">driver-class-name</span>: <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/bookta?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">csh20011103</span></span><br><span class="line"><span class="comment">    # 如果用其他数据源可以用type来定义</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure><p>druid数据源:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/spring/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- AOP必须 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/DataBaseName?characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">csh20011103</span></span><br></pre></td></tr></table></figure><h2 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h2><h3 id="bean基础配置"><a href="#bean基础配置" class="headerlink" title="bean基础配置"></a>bean基础配置</h3><h4 id="bean基础配置-1"><a href="#bean基础配置-1" class="headerlink" title="bean基础配置"></a>bean基础配置</h4><ol><li><p>**名称:**bean</p></li><li><p>**类型:**标签</p></li><li><p>**所属:**beans标签</p></li><li><p>**功能:**定义</p></li><li><p><strong>格式:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>属性列表:</strong></p><ul><li>**id:**bean的id,使用容易可以通过id值获取对应的bean,在一个容器中id值唯一</li><li>**class:**bean的类型,即配置的bean的全部路径类名</li></ul></li><li><p><strong>范例:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置两者关系:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BookDaoImpl&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> BookServiceImpl&#123;</span><br><span class="line">    BookDao book_dao;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">此时BookServiceImpl包含BookDao</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao_id&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookServie&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;book_Dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao_id&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="bean别名配置"><a href="#bean别名配置" class="headerlink" title="bean别名配置"></a>bean别名配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao_id&quot;</span> <span class="attr">name</span>=<span class="string">&quot;other_name other_name2...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>name后面起别名,如需多个可以用<code>空格,逗号,分号</code>分割</p><h4 id="bean作用范围配置"><a href="#bean作用范围配置" class="headerlink" title="bean作用范围配置"></a>bean作用范围配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookServie&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>scope可选范围:</p><ul><li>singleton:<strong>单例(默认)</strong></li><li>prototype:<strong>非单例</strong></li></ul><h5 id="bean作用范围说明"><a href="#bean作用范围说明" class="headerlink" title="bean作用范围说明"></a>bean作用范围说明</h5><p>适合交给容器进行管理的bean</p><ul><li>表现层对象</li><li>业务层对象</li><li>数据层对象</li><li>工具对象</li></ul><p>不适合交给容器进行管理的bean</p><ul><li>封装实体的域对象</li></ul><h3 id="bean实例化"><a href="#bean实例化" class="headerlink" title="bean实例化"></a>bean实例化</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li>bean本质是就是对象,创建bean使用构造方法完成</li></ul><p>如果无参构造方法不存在则抛出异常</p><h4 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoFactory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OrderDao <span class="title function_">getOrderDao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderDaoImpl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">这里的<span class="keyword">static</span>不能去掉!</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;路径&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;所需要调用的该工厂中的方法名&quot;</span>/&gt;</span></span><br><span class="line">该方法名必须要有static!</span><br></pre></td></tr></table></figure><h4 id="实例工厂与FactoryBean"><a href="#实例工厂与FactoryBean" class="headerlink" title="实例工厂与FactoryBean"></a>实例工厂与FactoryBean</h4><h5 id="方法一-了解"><a href="#方法一-了解" class="headerlink" title="方法一(了解)"></a>方法一(了解)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getUrderDao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;路径&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;uerDao&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;所需要调用的该工厂中的方法名&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;userFactory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>先创建一个类去接入<code>FactoryBean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;对象类型&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> UserDao getObject <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType()&#123;</span><br><span class="line">        <span class="keyword">return</span> UserDao.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;路径&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h3><h4 id="生命周期-从从创建到销毁的整体过程"><a href="#生命周期-从从创建到销毁的整体过程" class="headerlink" title="生命周期:从从创建到销毁的整体过程"></a>生命周期:从从创建到销毁的整体过程</h4><ul><li><p>初始化容器</p><ol><li><p>创建对象(内存分配)</p></li><li><p>执行构造方法</p></li><li><p>执行属性注入(set操作)</p></li><li><p>执行bean初始化方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;路径&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;初始化执行方法名称&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;销毁方法名称&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用bean</p><ol><li>执行业务操作</li></ol></li><li><p>关闭&#x2F;销毁容器</p><ol><li>执行bean销毁方法:<strong>设置”钩子”<strong>或者</strong>关闭容器</strong></li></ol></li></ul><h4 id="bean销毁时机"><a href="#bean销毁时机" class="headerlink" title="bean销毁时机"></a>bean销毁时机</h4><ul><li><p>容器关闭前触发bean的销毁</p></li><li><p>容器关闭方式:</p><ul><li><p>手工关闭容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableApplicationContext接口close()操作</span><br></pre></td></tr></table></figure></li><li><p>注册关闭钩子,在虚拟机退出前先关闭容器再退出虚拟机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableApplicationContext接口registerShutDownHook()操作</span><br><span class="line">该操作可以写在任何地方</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><h4 id="setter注入-推荐"><a href="#setter注入-推荐" class="headerlink" title="setter注入(推荐)"></a>setter注入(推荐)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;简单类型&quot;</span> <span class="attr">value</span>=<span class="string">&quot;初始化数值&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao(非简单类型)&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="构造器注入-耦合度较高"><a href="#构造器注入-耦合度较高" class="headerlink" title="构造器注入(耦合度较高)"></a>构造器注入(耦合度较高)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;形参&quot;</span> <span class="attr">value</span>=<span class="string">&quot;初始化数值&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao(目标所包含非简单类型)&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决参数类型重复问题,使用位置解决参数匹配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">name</span>=<span class="string">&quot;形参&quot;</span> <span class="attr">value</span>=<span class="string">&quot;初始化数值&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userDao(目标所包含非简单类型)&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="依赖注入方式选择"><a href="#依赖注入方式选择" class="headerlink" title="依赖注入方式选择"></a>依赖注入方式选择</h4><ol><li>强制依赖使用构造器进行,使用setter注入有概率不进行注入导致null对象出现</li><li>可选依赖使用setter注入进行,灵活性强</li><li>Spring框架倡导使用构造器,第三方框架内部大多数采用构造器注入的形式进行数据初始化(严谨)</li><li>如果有必要可以两者同时使用,使用构造器注入完成强制依赖的注入,使用setter注入完成可选依赖的注入</li><li><strong>自己开发的模块推荐使用setter注入</strong></li></ol><h4 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>autowire可选:<strong>byType</strong>或者<strong>byName</strong></p><p>不推荐使用<strong>byname</strong>,耦合度高</p><h4 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array(变量名)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;t_key&quot;</span> <span class="attr">value</span>=<span class="string">&quot;t_value&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;t_key&quot;</span> <span class="attr">value</span>=<span class="string">&quot;t_value&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;propertier&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;t_key&quot;</span>&gt;</span>value<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;t_key&quot;</span>&gt;</span>value<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加载properties文件"><a href="#加载properties文件" class="headerlink" title="加载properties文件"></a>加载properties文件</h3><ul><li>开启context命名空间</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    只用复制原来的再讲bean改成context即可</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用context命名空间,加载指定properties文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;名字.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">多个配置文件:</span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">框架中properties文件:</span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span>/&gt;</span></span><br><span class="line">多了个*号</span><br><span class="line"></span><br><span class="line">禁止加载系统:</span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span> <span class="attr">system-properties-mod</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用${}读取加载的属性值</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.name</span>=<span class="string">value</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.name&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><h3 id="注解开发定义bean"><a href="#注解开发定义bean" class="headerlink" title="注解开发定义bean"></a>注解开发定义bean</h3><h4 id="扫描组件"><a href="#扫描组件" class="headerlink" title="扫描组件"></a>扫描组件</h4><p><strong>方案一</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">写在xml里</span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.example.dao.impl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方案二</strong></p><p>配置结构转换为**@Configuration**</p><p>配置文件中的扫描换成**@ComponentScan(“路径”)**</p><p>如果要添加多个路径需要数组形式,即:</p><p><strong>@ComponentScan(“{路径1, 路径1…}”)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">写配置类代替配置文件</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;路径&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时加载配置文件(换接口),其他都一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.calss);</span><br><span class="line"></span><br><span class="line">换之前的名字叫:</span><br><span class="line">ClassPathXmlApplicationContext</span><br></pre></td></tr></table></figure><h4 id="定义bean"><a href="#定义bean" class="headerlink" title="定义bean"></a>定义bean</h4><ul><li>spring提供@Component注解的三个衍生注解(用法一样,只是为了便于区分)<ul><li><strong>@Controller</strong>:用于表现层bean定义</li><li><strong>@Service</strong>:用于业务层bean定义</li><li><strong>@Respository</strong>:用于数据层定义</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Respository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Respository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">有名字可以根据名字获得,无名字根据类型获得</span><br></pre></td></tr></table></figure><h4 id="bean的作用范围"><a href="#bean的作用范围" class="headerlink" title="bean的作用范围"></a>bean的作用范围</h4><p><strong>@Scope</strong>用来说明是否为单例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Respository</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span>非单例</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span>单例</span><br><span class="line"><span class="meta">@Respository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p><strong>@PostConstruct</strong>构造方法后</p><p><strong>@Destroy</strong>销毁前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Respository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Destroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> destroy&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动装配-1"><a href="#自动装配-1" class="headerlink" title="自动装配"></a>自动装配</h3><h4 id="非简单类型"><a href="#非简单类型" class="headerlink" title="非简单类型"></a>非简单类型</h4><p><strong>@Autowired</strong>使用反射中的暴力反射,setter可以不用写,可以写在任意位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Respository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有相同bean,支持按名称注入,但是不推荐一般使用:</p><p>**@Qualifier(名称)**指定加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Respository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;bookDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h4><p><strong>@Value</strong>可以进行简单类型的注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Respository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;value&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**@PropertySource(“文件名”)**写入配置类可以实现加载文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.name</span>=<span class="string">value</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;路径&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;文件名&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Respository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要传入多个文件用数组形式:</p><p><strong>@PropertySource(“{文件1, 文件2, …}”)</strong></p><p>此处不允许使用*****号</p><h3 id="第三方bean管理"><a href="#第三方bean管理" class="headerlink" title="第三方bean管理"></a>第三方bean管理</h3><p>没有配置只能编程写</p><p><strong>方法一</strong></p><p><strong>@Bean</strong>把方法返回值作为bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义一个方法获得要管理的对象,方法返回值作为bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><p>**@Import(名称)**导入配置</p><p>如果有多个需要用数组来进行导入</p><p><strong>@Import(“{名称1, 名称2, …}”)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">不需要<span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义一个方法获得要管理的对象,方法返回值作为bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    必须有bean</span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(&quot;JdbcConfig&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者可以使用扫描配置**@ComponentScan<strong>进行,但是</strong>不推荐**</p><h3 id="第三方bean依赖注入"><a href="#第三方bean依赖注入" class="headerlink" title="第三方bean依赖注入"></a>第三方bean依赖注入</h3><p>引用类型注入只需要为bean定义方法设置形参即可,容器会根据类型自动装配对象</p><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>AOP面向切面编程,一种编程范式,知道开发者如何组织程序结构<ul><li>OOP面向对象编程</li></ul></li><li>作用:在<strong>不惊动原始设计</strong>基础上为其进行功能增强</li><li>spring理念:无侵入式</li></ul><h2 id="核心理念"><a href="#核心理念" class="headerlink" title="核心理念"></a>核心理念</h2><ul><li>连接点(<strong>JoinPoint</strong>):程序执行过程中的任意位置,粒度为执行方法,抛出异常,设置变量等<ul><li>在SpringAOP中,理解为方法的执行</li></ul></li><li>切入点(<strong>PointCut</strong>):匹配连接点的式子<ul><li>在Spring中,一个切入点可以只描述一个具体方法,也可以匹配多个方法<ul><li>一个具体方法:com.test.dao包下的BookDao接口中的无形参无返回值的save方法</li><li>匹配多个方法:所有的save方法,所有的get开头的方法,所有以Dao结尾的接口中的任意方法,所有带有一个参数的方法</li></ul></li></ul></li><li>通知(<strong>Advice</strong>):在切入点处执行的操作,也就是共性功能<ul><li>在SpringAOP中,功能最终以方法的形式呈现</li></ul></li><li>通知类:定义通知的类</li><li>切面(<strong>Aspect</strong>):描述通知与切入点的对应关系</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDaoImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;running save1 ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;running save2 ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通知类"><a href="#通知类" class="headerlink" title="通知类"></a>通知类</h3><p>@Pointcut(“execution(<strong>返回值类型</strong> 目标方法路径”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置为bean</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//设置为AOP</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//随便起个名字,设置切点Pointcut</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void org.example.dao.impl.TestDaoImpl.save2())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要添加的方法,名字随便起,这里起名为method</span></span><br><span class="line">    <span class="meta">@Before(&quot;test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;running method ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;org.example&quot;)</span></span><br><span class="line"><span class="comment">//告知里面含有AOP</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP工作流程"><a href="#AOP工作流程" class="headerlink" title="AOP工作流程"></a>AOP工作流程</h2><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ol><li>Spring容器启动</li><li>读取所有切面配置中的切入点(配置的切入点(<strong>配置并使用</strong>))</li><li>初始化bean,判定bean对应的类中的方法是否匹配到任意切入点<ul><li>匹配失败,创建对象</li><li>匹配成功,创建原始对象(<strong>目标对象</strong>)的<strong>代理</strong>对象<br>jdk的代理:增强<br><strong>Spring内部AOP通过代理实现</strong></li></ul></li><li>获取bean执行方法<ul><li>获取bean,调用方法并执行,完成操作</li><li>获取的bean是代理对象时,根据代理对象的运行模式运行源石方法与增强的内容,完成操作</li></ul></li></ol><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul><li>目标对象(Target):原始功能去掉共性功能对应的类产生的对象,这种对象是无法直接完成工作的</li><li>代理(Proxy):目标对象无法直接完成工作,需要对其进行功能回填,通过原始对象的代理对象实现</li></ul><h3 id="SpringAOP本质"><a href="#SpringAOP本质" class="headerlink" title="SpringAOP本质"></a>SpringAOP本质</h3><p>SpringAOP本质是<strong>代理模式</strong></p><h2 id="AOP切入点表达式"><a href="#AOP切入点表达式" class="headerlink" title="AOP切入点表达式"></a>AOP切入点表达式</h2><ul><li>切入点:要进行增强的方法</li><li>切入点表达式:要精心增强的方法的描述方式</li></ul><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><ul><li><p>切入点表达式标准格式:动作关键字(访问修饰符 返回值 报名.类&#x2F;接口名.方法名(参数) 异常名)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(<span class="keyword">public</span> User org.example.dao.service.UserService.findById(<span class="type">int</span>))</span><br></pre></td></tr></table></figure><ul><li>动作关键字：描述切入点的行为动作，例如execution表示执行到指定切入点</li><li>访问修饰符：public，private等，可以省略</li><li>返回值</li><li>包名</li><li>类&#x2F;接口名</li><li>方法名</li><li>参数</li><li>异常名：方法定义中抛出指定异常，可以省略</li></ul></li></ul><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><ul><li><p>可以使用<strong>通配符</strong>描述切入点，快速描述(可以参考正则表达式)</p><ul><li><p><code>*</code>：单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*出现在参数代表必有一个参数</span><br><span class="line">execution(<span class="keyword">public</span> * org.example.*.service.UserService.find*(*))</span><br></pre></td></tr></table></figure><p>匹配org.example包下的任意包中的UserService类接口中所有find开头的带有一个参数的方法</p></li><li><p><code>..</code>：多个连续的任意符号，裸可以独立出现，常用于简化包名与参数的书写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">..出现在参数代表参数可有可无,可以有多个参数</span><br><span class="line">execution(<span class="keyword">public</span> User com..UserService.findById(..))</span><br></pre></td></tr></table></figure><p>匹配com包下的任意包汇总的UserService类或接口中所有名称为findById的方法</p></li><li><p><code>+</code>：专用于匹配子类类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* *..*Service+.*(..))</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="书写技巧"><a href="#书写技巧" class="headerlink" title="书写技巧"></a>书写技巧</h3><ul><li>所有代码按照标准规范开发,否则一下技巧全部失效</li><li>描述切入点<strong>通常描述接口</strong>,而不实现描述类</li><li>访问控制修饰符针对接口开发均采用public描述(<strong>可省略访问控制修饰符描述</strong>)</li><li>返回值类型对于增删改类使用精确类型加速匹配,对于查询类使用<code>*</code>通配快速描述</li><li><strong>包名</strong>书写<strong>尽量不使用<code>.</code>匹配</strong>,效率过低,常用<code>*</code>做单个包描述匹配,或精确匹配</li><li><strong>接口名</strong>&#x2F;类名书写名称与模块相关的<strong>采用<code>*</code>匹配</strong>,例如UserService书写成*Service,绑定业务层接口名</li><li><strong>方法名</strong>书写以<strong>动词</strong>进行<strong>精准匹配</strong>,名次采用<code>*</code>匹配,例如getById书写成getBy*,selectAll写成selectAll</li><li>参数规则较为复杂,根据业务方法灵活调整</li><li>通常<strong>不使用异常</strong>作为<strong>匹配</strong>规则</li></ul><h2 id="AOP通知类型"><a href="#AOP通知类型" class="headerlink" title="AOP通知类型"></a>AOP通知类型</h2><ul><li>AOP通知描述了抽取的共性功能,根据共性功能抽取的位置不同,最终运行代码时要将其加入到合理的位置</li><li>AOP通知共分为了五种类型<ul><li>前置通知</li><li>后置通知</li><li>环绕通知(重点)</li><li>返回后通知(了解)</li><li>抛出异常后通知(了解)</li></ul></li></ul><h3 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h3><p>@Before</p><h3 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h3><p>@After</p><h3 id="环绕通知-重要"><a href="#环绕通知-重要" class="headerlink" title="环绕通知(重要)"></a>环绕通知(重要)</h3><p>@Around</p><p>需要在方法中加入<strong>ProceedingJoinPoint 变量名</strong>,用这个变量使用**.proceed()<strong>方法进行指定位置,同时需要抛出</strong>Throwable异常**,因为原始操作不确定有无异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;test()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;running method Before ...&quot;</span>);</span><br><span class="line">    pjp.proceed();</span><br><span class="line">    System.out.println(<span class="string">&quot;running method After ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原始方法有返回值"><a href="#原始方法有返回值" class="headerlink" title="原始方法有返回值"></a>原始方法有返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">返回值类型必须要改成Object,用临时变量存储原始方法返回值结果并返回,如有需要可以强转</span><br><span class="line"><span class="meta">@Around(&quot;test()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">method</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;running method Before ...&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">temp</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">    System.out.println(<span class="string">&quot;running method After ...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>环绕通知必须依赖形参<strong>ProceedingJoinPoint</strong>才能实现对原始方法的调用,进而实现原始方法调用前后同时添加通知</li><li>通知中如果未使用<strong>ProceedingJoinPoint</strong>对原始方法进行调用将跳过对原始方法的执行</li><li>对原始方法的调用可以不接受返回值,通知方法设置成void即可,如果接收返回值,必须设定为Object类型</li><li>原始方法的返回值如果是void类型,通知方法的返回值类型可以设置成void,也可以设置成Object</li><li>由于无法预知原始方法运行后是否会抛出异常,因此环绕通知方法必须抛出<strong>Throwable</strong>对象</li></ul><h4 id="ProceedingJoinPoint"><a href="#ProceedingJoinPoint" class="headerlink" title="ProceedingJoinPoint"></a>ProceedingJoinPoint</h4><p>ProceedingJoinPoint.getSignature();获取签名信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> ProceedingJoinPoint.getSignature();</span><br><span class="line"></span><br><span class="line">signature.getDeclaringType();<span class="comment">//对应类型</span></span><br><span class="line">signature.getName();<span class="comment">//对应方法名</span></span><br><span class="line">signature.getDeclaringTypeName();<span class="comment">//对应类型名</span></span><br></pre></td></tr></table></figure><h3 id="返回后通知"><a href="#返回后通知" class="headerlink" title="返回后通知"></a>返回后通知</h3><p>@AfterReturning</p><p>只有原始方法<strong>不抛出</strong>异常的时候才运行该通知</p><h3 id="抛出异常后通知"><a href="#抛出异常后通知" class="headerlink" title="抛出异常后通知"></a>抛出异常后通知</h3><p>@AfterThrowing</p><p>只有原始方法<strong>抛出</strong>异常的时候才运行该通知</p><h2 id="AOP获取通知数据"><a href="#AOP获取通知数据" class="headerlink" title="AOP获取通知数据"></a>AOP获取通知数据</h2><p>数据有三种:</p><ul><li>原始操作的参数<br>获取切入点方法的参数:<ul><li><strong>JoinPoint</strong>:适用于前置,后置,返回后,抛出异常后通知</li><li><strong>ProceedingJoinPoint</strong>:适用于环绕通知</li></ul></li><li>原始操作的返回值<br>获取切入点方法返回值<ul><li>返回后通知</li><li>环绕通知</li></ul></li><li>原始操作的异常<br>获取切入点方法运行异常信息<ul><li>抛出异常后通知</li><li>环绕通知</li></ul></li></ul><h3 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h3><p>使用<strong>JoinPoint</strong>里面的**.getArgs()<strong>方法,返回值类型为</strong>Object类型数组**</p><p>可以用Arrays.toString(args)来把里面的类型都转换为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;test()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(JoinPoint jp)</span>&#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">args</span> <span class="operator">=</span> jp.getArgs();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ProceedingJoinPoint</strong>也有一样的方法</p><p><strong>ProceedingJoinPoint</strong>里面的**.proceed()<strong>方法里面可以传一个</strong>Object数组**,即getArgs()方法获得的Object数组,如果将同类型数组放入.proceed()方法,即<code>.proceed(args)</code>,那么就会更改传入原始方法中的参数</p><h3 id="获取返回值"><a href="#获取返回值" class="headerlink" title="获取返回值"></a>获取返回值</h3><p>正常情况下接收参数直接返回</p><p>特殊:<strong>@AfterReturning</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">需要先定义一个Object放入参数中,表示要用这个Object接收返回值</span><br><span class="line">在注解中加上如下,returning = <span class="string">&quot;用来接收返回值的参数名&quot;</span></span><br><span class="line"><span class="meta">@AfterReturning(value = &quot;test()&quot;,returning = &quot;ret&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Object ret)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果参数中同时包含JoinPoint,那么<strong>JoinPoint必须在前</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;test()&quot;,returning = &quot;ret&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(JoinPoint jp, Object ret)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取异常"><a href="#获取异常" class="headerlink" title="获取异常"></a>获取异常</h3><p>正常情况下把抛出异常改为内部的try..catch…环绕即可</p><p>特殊:<strong>@AfterThrowing</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;test()&quot;, throwing = &quot;t&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Throwable t)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h1><h2 id="Spring事务简介"><a href="#Spring事务简介" class="headerlink" title="Spring事务简介"></a>Spring事务简介</h2><ul><li>事务作用：在数据层保障一系列的数据库操作同成功同失败</li><li>Spring事务作用：在数据层或<strong>业务层</strong>保障一系列的数据库操作同成功同失败</li></ul><h2 id="Spring事务角色"><a href="#Spring事务角色" class="headerlink" title="Spring事务角色"></a>Spring事务角色</h2><ul><li>事务管理员：发起事务方，在Spring中通常指代业务层开启事务的方法</li><li>事务协调员：加入事务方，在Spring中通常指代数据层方法，也可以是业务层方法</li></ul><p>在方法上加上**@Transactional**即可保证方法中所有事务同成功同失败,如果其中一步出现了错误则全部会回滚</p><p><strong>@Transactional</strong>被称为<strong>事务管理员</strong>,内部事务被称为<strong>事务协调员</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao account;</span><br><span class="line"></span><br><span class="line">    这里也可以加在他的接口上</span><br><span class="line">    <span class="meta">@Transactional</span> -&gt; 事务管理员</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String username1, String username2, <span class="type">int</span> money)</span>&#123;</span><br><span class="line">        account.outMoney(username1, money); -&gt; 事务协调员</span><br><span class="line">        account.inMoney(username2, money); -&gt; 事务协调员</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务相关配置"><a href="#事务相关配置" class="headerlink" title="事务相关配置"></a>事务相关配置</h2><h3 id="配置属性"><a href="#配置属性" class="headerlink" title="配置属性"></a>配置属性</h3><p>在**@Transactional**里面写属性，例如@Transactional(<strong>XXX</strong>)</p><table><thead><tr><th align="center">属性</th><th align="center">作用</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">readOnly</td><td align="center">设置是否为只读事务</td><td align="center">readOnly&#x3D;true</td></tr><tr><td align="center">timeout</td><td align="center">设置事务超时时间</td><td align="center">timeout&#x3D;-1(<strong>永不超时</strong>)</td></tr><tr><td align="center"><strong>rollbackFor</strong></td><td align="center">设置事务回滚异常(class)</td><td align="center">rollbackFor&#x3D;{NullPointException.class}</td></tr><tr><td align="center">rollbackForClassName</td><td align="center">设置事务回滚异常(String)</td><td align="center">同上格式为字符串</td></tr><tr><td align="center">noRollbackFor</td><td align="center">设置事务不回滚异常(class)</td><td align="center">noRollbackFor&#x3D;{NullPointException.class}</td></tr><tr><td align="center">noRollbackForClassName</td><td align="center">设置事务不回滚异常(String)</td><td align="center">同上格式为字符串</td></tr><tr><td align="center">propagation</td><td align="center">设置事务传播行为</td><td align="center">…</td></tr></tbody></table><h3 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h3><p>事务传播行为：事务协调员对事务管理员所携带事务的处理态度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String username1, String username2, <span class="type">int</span> money)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 以下两个属于一个事务</span></span><br><span class="line">        account.outMoney(username1, money);</span><br><span class="line">        account.inMoney(username2, money);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 单独一个事务</span></span><br><span class="line">        logService.logIn(username1, username2, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 括号里的就是事务的传播行为</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">logIn</span><span class="params">(String username1, String username2, <span class="type">int</span> money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>REQUIREO:<ul><li>开始T:加入T</li><li>无:新建T2</li></ul></li><li>REQUIRES_NEW:<ul><li>开启T:新建T2</li><li>无:新建T2</li></ul></li><li>SUPPORTS:<ul><li>开启T:加入T</li><li>无:无</li></ul></li><li>NOT_SUPPORTS:<ul><li>开启T:无</li><li>无:无</li></ul></li><li>MANDATORY:<ul><li>开启T:加入T</li><li>无:ERROR</li></ul></li><li>NEVER:<ul><li>开启T:ERROR</li><li>无:无</li></ul></li><li>NESTED:<br>设置savePoint,一旦事务回滚,事务将回滚到savePoint处,交由客户响应提交&#x2F;回滚</li></ul><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h2><p>SpringMVC技术与Servlet技术功能等同,均属于web层开发技术,开发比Servlet更简单</p><ol><li>SpringMVC是一种表现层框架技术</li><li>SpringMVC用于进行表现层功能开发</li></ol><ul><li>SpringMVC是一种基于Java实现MVC模型的轻量级Web框架</li><li>优点<ul><li>使用简单,开发便捷(相比于Servlet)</li><li>灵活性强</li></ul></li></ul><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- build --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><ol><li><p>创建SpringMVC控制器类(等同于Servlet)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Controller定义bean</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="comment">// 设置当前操作的访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="comment">// 设置当前操作的返回值类型</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;key&#x27;: &#x27;value&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化SpringMVC环境(同Spring环境),设定SpringMVC加载对应的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里千万不能@Import(Servlet容器)!!!</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.mvc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化Servlet容器,加载SpringMVC环境,并设置SpringMVC技术处理的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意这里继承了AbstractDispatcherServletInitializer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 注意这里因为是Web环境,所以是AnnotationConfigWebApplicationContext</span></span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        <span class="comment">// 注册</span></span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="comment">// 所有请求都交由SpringMVC处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>SpringMVC入门程序开发总结（1+N）</p><ul><li>一次性工作<ul><li>创建工程，设置服务器，加载工程</li><li>导入坐标</li><li>创建web容器启动类，加载SpringMVC配置，并设置SpringMVC请求拦截路径</li><li>SpringMVC核心配置类（设置配置类，扫描controller包，加载Controller控制器bean）</li></ul></li><li>多次工作<ul><li>定义处理请求的控制类</li><li>定义处理请求的控制器方法，并配置映射路径（@RequestMapping）与返回json数据（@ResponseBody）</li></ul></li></ul></li><li><p>AbstractDispatcherServletInitializer类是SpringMVC提供的快速初始化Web3.0容器的抽象类</p></li><li><p>AbstractDispatcherServletInitializer提供三个接口方法供用户实现</p><ul><li><p>createServletApplicationContext()方法，创建Servlet容器时，加载SpringMVC对应的bean并放入WebApplicationContext对象范围中，而WebApplicationContext的作用范围为ServletContext范围，即整个Web容器范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">    ctx.register(SpringMvcConfig.class);</span><br><span class="line">    <span class="keyword">return</span> ctx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>getServletMappings()方法，设定SpringMVC对应的请求映射路径，设置为&#x2F;表示拦截所有请求，任意请求都将转入到SpringMVC进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>createRootApplicationContext()方法，如果创建Servlet容器时需要加载非SpringMVC对应的bean，使用当前方法进行，使用方法同createRootApplicationContext()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h4><ul><li><p>名称：@Controller</p></li><li><p>类型：<strong>类注解</strong></p></li><li><p>位置：SpringMVC控制器类定义上方</p></li><li><p>作用：设定SpringMVC的核心控制器bean</p></li><li><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h4><ul><li><p>名称：@RequestMapping</p></li><li><p>类型：方法注解</p></li><li><p>位置：SpringMVC控制器方法定义上方</p></li><li><p>作用：设置当前控制器方法请求访问路径</p></li><li><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>相关属性</p><ul><li>value（默认）：请求访问路径</li></ul></li></ul><h4 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h4><ul><li><p>名称：@ResponseBody</p></li><li><p>类型：<strong>方法注解</strong></p></li><li><p>位置：SpringMVC控制器类定义上方</p></li><li><p>作用：设置当前控制器方法相应内容为当前返回值，无需解析</p></li><li><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;key&#x27;: &#x27;value&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="bean加载控制"><a href="#bean加载控制" class="headerlink" title="bean加载控制"></a>bean加载控制</h2><p>不能让Spring控制的bean加载到SpringMVC的bean</p><p>解决方法:</p><ol><li>Spring加载的bean设定扫描范围为com.mvc，排除掉controller内的bean</li><li>Spring加载的bean设定扫描范围为精准范围，例如service包，dao包等</li><li>不区分Spring与SpringMVC的环境，加载到同一个环境中</li></ol><h3 id="方法二-ComponentScan"><a href="#方法二-ComponentScan" class="headerlink" title="方法二@ComponentScan"></a>方法二@ComponentScan</h3><p><strong>includeFilters</strong>设定包含的过滤器</p><p><strong>excludeFilters</strong>设定不包含的过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(value = &quot;com.mvc&quot;,</span></span><br><span class="line"><span class="meta">    excludeFilters = @ComponentScan.Filter(</span></span><br><span class="line"><span class="meta">        type = FilterType.ANNOTATION, // 设置需要排除的类型(此处为排除注解)</span></span><br><span class="line"><span class="meta">        classes = Controller.class // 排除@Controller</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// SpringMVC加载配置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spring加载配置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        ctx.register(SpringConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h3><p>更改原来Web加载容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><h3 id="请求映射路径"><a href="#请求映射路径" class="headerlink" title="请求映射路径"></a>请求映射路径</h3><p>不能放相同路径</p><p>分块解决,增加请求模块前缀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;key&#x27;: &#x27;value&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><p>后台不区分GET请求和POST请求</p><p>后台直接传入参数即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;key&#x27;: &#x27;value&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="乱码处理"><a href="#乱码处理" class="headerlink" title="乱码处理"></a>乱码处理</h4><p>设定过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过滤器设置针对post</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><h4 id="简单类型-1"><a href="#简单类型-1" class="headerlink" title="简单类型"></a>简单类型</h4><p>如果发送名与接收名不匹配则接收不到,例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">localhost/user/save?otherName=test</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;key&#x27;: &#x27;value&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用**@RequestParam(发送名)**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">User类</span><br><span class="line"><span class="keyword">package</span> com.mvc.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    getter()方法省略</span><br><span class="line">    setter()方法省略</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收,只要User里面跟传入的key匹配即可自动装配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost/user/save?name=haog&amp;id=123&amp;address.son=**&amp;...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;key&#x27;: &#x27;value&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要接收数组,只要传入的时候名字一样即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost/user/save?likes=**&amp;likes=***&amp;***</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(String[] likes)</span>&#123;</span><br><span class="line">    System.out.println(likes);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;key&#x27;: &#x27;value&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果传入集合则需要加上**@RequestParam**,url传入和数组一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">    System.out.println(likes);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;key&#x27;: &#x27;value&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Json数据参数传递"><a href="#Json数据参数传递" class="headerlink" title="Json数据参数传递"></a>Json数据参数传递</h4><h5 id="导包-1"><a href="#导包-1" class="headerlink" title="导包"></a>导包</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="json传递"><a href="#json传递" class="headerlink" title="json传递"></a>json传递</h5><p>SpringMvcConfig中添加**@EnableWebMvc**开启转为json为对象的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.mvc&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller的请求体里加入**@RequestBody**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">    System.out.println(likes);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;key&#x27;: &#x27;value&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入pojo,方法一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;key&#x27;: &#x27;value&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h4><p>默认标准格式为yyyy&#x2F;MM&#x2F;dd</p><p>如果不是标准格式需要用**@DateTimeFormat(pattern &#x3D; “yyyy-MM-dd”)**来指定格式</p><p>如果传过来的不跟指定格式相匹配则会报错,例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2022/9/8 -&gt; yyyy-MM-dd</span><br><span class="line">则会报错</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> Date date)</span>&#123;</span><br><span class="line">    System.out.println(date);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;key&#x27;: &#x27;value&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型与转换器"><a href="#类型与转换器" class="headerlink" title="类型与转换器"></a>类型与转换器</h4><ul><li><p>Converter接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Converter</span>&lt;S, T&gt; &#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    T <span class="title function_">Convert</span><span class="params">(S var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>请求参数年龄数据（String -&gt; Interger）</li><li>日期格式转换（String -&gt; Date）</li></ul></li><li><p>@EnableWebMvc功能之一：根据类型匹配对应的类型转换器<br>如果发现没有转换则将此开启即可</p></li></ul><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><ul><li>响应页面</li><li>响应数据<ul><li>文本数据</li><li>json数据</li></ul></li></ul><h4 id="响应页面"><a href="#响应页面" class="headerlink" title="响应页面"></a>响应页面</h4><p>直接返回页面名称即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问二级页面需要加上<code>../页面</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/user/save</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;../index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h4><p><strong>@ResponseBody</strong>响应方式自定义</p><p>返回的时候自动转Json</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">12</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;haog&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类型：方法注解</li><li>位置：SpringMVC控制器方法定义上方</li><li>作用：设置当前控制器返回值作为响应体</li><li>范例：如上所示</li></ul><h2 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a>REST风格</h2><h3 id="REST简介"><a href="#REST简介" class="headerlink" title="REST简介"></a>REST简介</h3><ul><li><p>REST,表现形式状态转换</p><ul><li><p>传统风格资源描述形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/user/getById?id=1</span><br><span class="line">http://localhost/user/saveUser</span><br></pre></td></tr></table></figure></li><li><p>REST风格描述形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/user/1</span><br><span class="line">http://localhost/user</span><br></pre></td></tr></table></figure></li></ul></li><li><p>优点:</p><ul><li>隐藏资源的访问行为,无法通过地址得知对资源是何种操作</li><li>书写简化</li></ul></li><li><p>按照REST风格访问资源时使用<strong>行为动作</strong>区分对资源进行了何种操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/users     // 查询全部用户信息  GET(查询)</span><br><span class="line">http://localhost/users/1   // 查询指定用户信息  GET(查询)</span><br><span class="line">http://localhost/users     // 添加用户信息     POST(新增/保存)</span><br><span class="line">http://localhost/users     // 修改用户信息     PUT(修改/更新)</span><br><span class="line">http://localhost/users/1   // 删除用户信息     DELETE(删除)</span><br><span class="line"></span><br><span class="line">注意事项:</span><br><span class="line">上述行为是约定方式,约定不是规范,可以打破,所以称REST风格,而不是REST规范</span><br><span class="line">描述模块的名称通常使用复数,也就是加s的格式描述,表示此类资源,而非单个资源,例如:</span><br><span class="line">users,books,accounts...</span><br></pre></td></tr></table></figure></li><li><p>根据REST风格对资源进行访问称为<strong>RESTful</strong></p></li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>用@<strong>RequestMapping</strong>中的<strong>methoh</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/users&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传参需要设置路径变量**@PathVariable**同时需要在路径后面加上要传的参数,用<code>&#123;参数&#125;</code>,名字要跟方法参数名一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速开发"><a href="#快速开发" class="headerlink" title="快速开发"></a>快速开发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以将@ResponseBody和路径提取出来变成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以把@Controller和@ResponseBody结合变成**@RestController**</p><p>method可以变成**@(请求名)Mapping(路径)**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/mysql/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="快速创建随机用户信息数据"><a href="#快速创建随机用户信息数据" class="headerlink" title="快速创建随机用户信息数据"></a>快速创建随机用户信息数据</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE `test_bai` -- 创建数据库</span><br><span class="line">USE `test_bai` -- 切换对应的数据库</span><br></pre></td></tr></table></figure><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `app_user`(</span><br><span class="line">`id` INT  NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">`name` VARCHAR(50) DEFAULT &#x27;&#x27; COMMENT &#x27;用户名称&#x27;,</span><br><span class="line">`email` VARCHAR(50) NOT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">`phone` VARCHAR(20) DEFAULT &#x27;&#x27; COMMENT &#x27;手机号&#x27;,</span><br><span class="line">`gender` TINYINT DEFAULT &#x27;0&#x27; COMMENT &#x27;性别（0-男  ： 1-女）&#x27;,</span><br><span class="line">`password` VARCHAR(100) NOT NULL COMMENT &#x27;密码&#x27;,</span><br><span class="line">`age` TINYINT DEFAULT &#x27;0&#x27; COMMENT &#x27;年龄&#x27;,</span><br><span class="line">`create_time` DATETIME DEFAULT NOW(),</span><br><span class="line">`update_time` DATETIME DEFAULT NOW(),</span><br><span class="line">PRIMARY KEY (`id`) </span><br><span class="line">)ENGINE = INNODB DEFAULT CHARSET = utf8 COMMENT=&#x27;app用户表&#x27;</span><br></pre></td></tr></table></figure><h2 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL log_bin_trust_function_creators=TRUE; -- 创建函数一定要写这个</span><br><span class="line">DELIMITER $$   -- 写函数之前必须要写，该标志</span><br><span class="line"></span><br><span class="line">CREATE FUNCTION mock()-- 创建函数（方法）</span><br><span class="line">RETURNS INT -- 返回类型</span><br><span class="line">BEGIN-- 函数方法体开始</span><br><span class="line">DECLARE num INT DEFAULT 1000000; -- 定义一个变量num为int类型。默认值为100 0000</span><br><span class="line">DECLARE i INT DEFAULT 0; </span><br><span class="line"></span><br><span class="line">WHILE i &lt; num DO -- 循环条件</span><br><span class="line">INSERT INTO app_user(`name`,`email`,`phone`,`gender`,`password`,`age`) </span><br><span class="line">VALUES(CONCAT(&#x27;用户&#x27;,i),&#x27;2548928007qq.com&#x27;,CONCAT(&#x27;18&#x27;,FLOOR(RAND() * ((999999999 - 100000000) + 1000000000))),FLOOR(RAND()  *  2),UUID(),FLOOR(RAND()  *  100));</span><br><span class="line">SET i =  i + 1;-- i自增</span><br><span class="line">END WHILE;-- 循环结束</span><br><span class="line">RETURN i;</span><br><span class="line">END; -- 函数方法体结束</span><br></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT mock();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/MyBatis/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/MyBatis/</url>
      
        <content type="html"><![CDATA[<p>[[JDBC链接&amp;关闭]]<br>[[spring]]</p><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h2><p>MyBatis是一款优秀的<strong>持久层框架</strong>,用于简化JDBC开发</p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><ul><li>负责将数据保存到数据库的那一层代码</li><li>javaEE三层架构:<strong>表现层,业务层,持久层</strong></li></ul><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul><li><strong>半成品</strong>软件,是一套可重用的,通用的,软件基础代码模型</li><li>在框架的基础之上构建软件编写更加高校,规范,通用,可扩展</li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li>创建user表,添加数据 –&gt; 对应pojo类</li><li>创建模块,导入坐标</li><li>编写mybatis核心配置文件 –&gt; 替换链接信息,解决硬编码问题</li><li>编写SQL映射文件 –&gt; 统一管理sql语句,解决硬编码问题</li><li>编码<ol><li>定义pojo类</li><li>加载核心配置文件,获取SqlSessionFactory对象</li><li>获取SqlSession对象,执行SQL语句</li><li>释放资源</li></ol></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mybatis-config</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/bookta&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;csh20011103&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        添加映射</span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">UserMapper</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">namespace为空间,名字随便写,之后访问的时候用name.语句id即可</span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    id为唯一值,resultType对应返回的类型</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.example.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from bookta;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">该文件对应用户数据,位于pojo文件夹下</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.example.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String isbn;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIsbn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isbn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsbn</span><span class="params">(String isbn)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.isbn = isbn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTitle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTitle</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;isbn=&#x27;&quot;</span> + isbn + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, title=&#x27;&quot;</span> + title + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, type=&#x27;&quot;</span> + type + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">测试用例</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.example.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.example.service.BookService;</span><br><span class="line"><span class="keyword">import</span> org.example.service.impl.BookServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//1. 加载mybatis的核心配置文件,获取SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取SqlSession对象,用它来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;test.selectAll&quot;</span>);</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决sql报错"><a href="#解决sql报错" class="headerlink" title="解决sql报错"></a>解决sql报错</h2><ul><li>产生原因:idea和数据库没有建立链接,不识别表信息</li><li>解决方法:在idea中配置mysql数据库链接</li></ul><h2 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a>Mapper代理开发</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. 获取SqlSession对象,用它来执行sql</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 执行sql</span></span><br><span class="line">List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;test.selectAll&quot;</span>);</span><br><span class="line"></span><br><span class="line">更换写法</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectAll();</span><br></pre></td></tr></table></figure><h3 id="Mapper代理步骤"><a href="#Mapper代理步骤" class="headerlink" title="Mapper代理步骤"></a>Mapper代理步骤</h3><ol><li>定义与SQL映射文件同名的Mapper接口,并将Mapper接口和SQL映射文件放置在<strong>同一目录</strong>下</li><li>设置SQL映射文件的namespace属性为Mapper接口全限定名</li><li>在Mapper接口中定义方法,方法名就是SQL映射文件中sql语句的id,并保持参数类型和返回值类型一致</li></ol> <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">第一步</span><br><span class="line">在resource文件夹下建立新的文件夹,与mapper文件夹格式一样,再把UserMapper拖入该包中</span><br><span class="line">注意如果不是软件包需要&#x27;/&#x27;来分格,而不是&#x27;.&#x27;</span><br><span class="line">例如:新建文件夹名:&quot;org.exmple.mapper&quot;</span><br><span class="line"></span><br><span class="line">第二步</span><br><span class="line">namespace值改为接口全限定名</span><br><span class="line">例如:</span><br><span class="line">&lt;mapper namespace=&quot;org.example.mapper.UserMapper&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;selectAll&quot; resultType=&quot;org.example.pojo.User&quot;&gt;</span><br><span class="line">        select * from bookta;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br><span class="line">第三步</span><br><span class="line">在接口中定义方法</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">    User selectAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果返回是个集合则要改为List:</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">    List&lt;User&gt; selectAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第四步</span><br><span class="line">更改配置文件中映射路径</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=&quot;org/example/mapper/UserMapper.xml&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure><p>tip:如果Mapper接口名称和SQL映射文件名称相同,并在同一目录下,则可以使用包扫描的方式简化SQL映射文件的加载:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.example.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="其他配置名"><a href="#其他配置名" class="headerlink" title="其他配置名"></a>其他配置名</h2><p><strong>typeAliases</strong> -&gt; 别名</p><p>在配置文件中直接添加typeAlisaes可以直接扫包,这样在UserMapper返回类型中可以直接使用类型名字</p><p>扫包是最简单的方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mybatis-config:</span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">UserMapper:</span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.example.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from bookta;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意:书写时需要遵循先后顺序!</strong></p><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><h3 id="配置文件完成增删改查"><a href="#配置文件完成增删改查" class="headerlink" title="配置文件完成增删改查"></a>配置文件完成增删改查</h3><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>数据库表的字段名称和实体类的属性名称不一样,则不能自动封装数据</p><p><strong>方法一:</strong></p><p>起别名：对不一样的列名起别名，让别名和实体类的属性名一样（不建议）</p><p>可以引入sql片段解决</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方法二:</strong></p><p><strong>resultMap</strong>解决</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;名字(标识)&quot;</span> <span class="attr">type</span>=<span class="string">&quot;类型名&quot;</span>&gt;</span></span><br><span class="line">里面有id和result两个属性,其中id用来对主键进行映射,result进行对一般字段的映射</span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;列名称(数据库中)&quot;</span> <span class="attr">property</span>=<span class="string">&quot;属性名(自己pojo类中)&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">把resultType替换成resultMap</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;上面的id名称&quot;</span>&gt;</span></span><br><span class="line">    select * from bookta;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h5><p><strong>#{key}<strong>或者</strong>${key}</strong></p><p>#{}会替换为<code>?,防止sql注入</code></p><p>${}会拼sql,会存在sql注入问题</p><p>表名或者列名不固定的时候可以使用${}</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;返回类型&quot;</span>&gt;</span></span><br><span class="line">    select * from bookta where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">parameterType不是很重要,会自动按类型装配</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">接口</span><br><span class="line">(类型) selectById(<span class="type">int</span> id);</span><br></pre></td></tr></table></figure><h5 id="特殊字符处理"><a href="#特殊字符处理" class="headerlink" title="特殊字符处理"></a>特殊字符处理</h5><ol><li>转义字符:小于号(&lt;) -&gt; <code>&amp;lt;</code><br>多用于特殊字符少的时候</li><li>CDATA区 -&gt; 输入CD回车 -&gt; 出现CDATA区,在内部写入即可<br>多用于特殊字符多的时候</li></ol><h5 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h5><p>模糊匹配 SQL参数 <strong>like</strong> <strong>%<strong>需要查询数据</strong>%</strong></p><ol><li><p>散装参数:<strong>@Param(“SQL占位符名称”)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Param(&quot;SQL占位符名称&quot;)</span>类型 变量名</span><br></pre></td></tr></table></figure></li><li><p>如果有对象可以直接传对象</p></li><li><p>传递map,需要key对应</p></li></ol><h5 id="动态条件查询"><a href="#动态条件查询" class="headerlink" title="动态条件查询"></a>动态条件查询</h5><p>SQL语句会随着用户的输入或外部条件的变化而变化,我们称为<strong>动态SQL</strong></p><p>mybatis提供许多标签:<strong>if</strong>等</p><h6 id="if-amp-where"><a href="#if-amp-where" class="headerlink" title="if &amp; where"></a>if &amp; where</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;逻辑表达式&quot;</span>&gt;</span></span><br><span class="line">SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">这里面字符串的不等于不能用equals方法,应该用!=,&amp;&amp;应换成and</span><br></pre></td></tr></table></figure><p>该语句可能会出现问题,比如sql语句最终多个and</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">第一条不成立时会出错</span><br><span class="line">where</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;逻辑表达式&quot;</span>&gt;</span></span><br><span class="line">SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;逻辑表达式&quot;</span>&gt;</span></span><br><span class="line">and SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;逻辑表达式&quot;</span>&gt;</span></span><br><span class="line">and SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">解决方法一:</span><br><span class="line">where 1 = 1</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;逻辑表达式&quot;</span>&gt;</span></span><br><span class="line">and SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;逻辑表达式&quot;</span>&gt;</span></span><br><span class="line">and SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;逻辑表达式&quot;</span>&gt;</span></span><br><span class="line">and SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">解决方法二:使用where标签来替换where关键字</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;逻辑表达式&quot;</span>&gt;</span></span><br><span class="line">and SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;逻辑表达式&quot;</span>&gt;</span></span><br><span class="line">and SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;逻辑表达式&quot;</span>&gt;</span></span><br><span class="line">and SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose(when, otherwise)"></a>choose(when, otherwise)</h6><p>类似于<strong>switch</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;逻辑表达式&quot;</span>&gt;</span></span><br><span class="line">SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;逻辑表达式&quot;</span>&gt;</span></span><br><span class="line">SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"></span><br><span class="line">可以使用where标签进行优化,如果没有条件的话where标签不会生成where</span><br></pre></td></tr></table></figure><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><p>事务默认为关闭,所以会导致添加不上去,需要手动提交事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行完命令之后使用</span><br><span class="line">sqlSession.commit();</span><br><span class="line">进行手动提交事务</span><br></pre></td></tr></table></figure><p>可以在获取SqlSeiion对象的时候设置自动提交事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">如果为<span class="literal">false</span>则需要手动提交事务</span><br></pre></td></tr></table></figure><h5 id="添加-主键返回"><a href="#添加-主键返回" class="headerlink" title="添加,主键返回"></a>添加,主键返回</h5><p>设置属性keyProperty&#x3D;”主键名”即可拿出id的值,同时需要设置userGeneratedKeys&#x3D;’true’</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertTest&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into table_name (name)</span><br><span class="line">        VALUES (#&#123;name&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><h5 id="修改全部字段"><a href="#修改全部字段" class="headerlink" title="修改全部字段"></a>修改全部字段</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateTest&quot;</span>&gt;</span></span><br><span class="line">    update table_name</span><br><span class="line">    set name = #&#123;name&#125;</span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="修改动态字段"><a href="#修改动态字段" class="headerlink" title="修改动态字段"></a>修改动态字段</h5><p>使用<code>&lt;set&gt;</code>用法和<code>&lt;where&gt;</code>一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestMapper</span> &#123;</span><br><span class="line">    返回值类型可以为<span class="type">int</span>,如果为<span class="type">int</span>则返回的是修改的行数</span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateTest</span><span class="params">(Test test)</span>;</span><br><span class="line">    </span><br><span class="line">    不返回行数</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateTest</span><span class="params">(Test test)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteTest&quot;</span>&gt;</span></span><br><span class="line">    delete</span><br><span class="line">    from table_name</span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h4><p>编写接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="meta">@Param(&#x27;ids&#x27;)</span> <span class="type">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure><p>编写sql语句</p><ul><li><strong>collection</strong>:遍历的数组名</li><li><strong>item</strong>:属性</li><li><strong>separator</strong>:分隔符号</li><li><strong>open和close</strong>:开头和结尾</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteTests&quot;</span>&gt;</span></span><br><span class="line">    delete</span><br><span class="line">    from table_name</span><br><span class="line">    where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果不用@Param,那么底下的collection的值改为”array”</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>MyBatis中多个参数时会封装为Map集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void deleteByIds(@Param(&#x27;user&#x27;) String user1);</span><br><span class="line">-&gt; Map[&#x27;user&#x27;] = user1</span><br></pre></td></tr></table></figure><h3 id="注解完成增删改查"><a href="#注解完成增删改查" class="headerlink" title="注解完成增删改查"></a>注解完成增删改查</h3><p><strong>一般用户简单功能</strong></p><ul><li>查询：**@Select(sql语句)**</li><li>添加：**@Insert(sql语句)**</li><li>修改：**@Update(sql语句)**</li><li>删除：**@Delete(sql语句)**</li></ul><h1 id="MyBatis-plus"><a href="#MyBatis-plus" class="headerlink" title="MyBatis-plus"></a>MyBatis-plus</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>需要继承<code>BaseMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打印sql"><a href="#打印sql" class="headerlink" title="打印sql"></a>打印sql</h3><p>需要在配置文件中加上</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h2 id="复杂Sql"><a href="#复杂Sql" class="headerlink" title="复杂Sql"></a>复杂Sql</h2><p>对查询用<code>QueryWrapper</code>,对修改用<code>UpdateWrapper</code><br>需要先构造一个<code>QueryWrapper&lt;pojo&gt;</code>,再对其规则进行规定,例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">selectStaff</span><span class="params">()</span> &#123;  </span><br><span class="line">    QueryWrapper&lt;Staff&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();  </span><br><span class="line">    qw.likeRight(<span class="string">&quot;tel&quot;</span>,<span class="string">&quot;6&quot;</span>);  </span><br><span class="line">    System.out.println(staffService.list(qw));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>:不支持以及不赞成在 RPC 调用(远程过程调用)中把 Wrapper 进行传输(以下为官方解释)</p><ol><li>wrapper 很重</li><li>传输 wrapper 可以类比为你的 controller 用 map 接收值(开发一时爽,维护火葬场)</li><li>正确的 RPC 调用姿势是写一个 DTO 进行传输,被调用方再根据 DTO 执行相应的操作</li><li>我们拒绝接受任何关于 RPC 传输 Wrapper 报错相关的 issue 甚至 pr</li></ol><h2 id="主键自动填充"><a href="#主键自动填充" class="headerlink" title="主键自动填充"></a>主键自动填充</h2><p>id要想自动填充,需要在pojo类中添加注解@<strong>TableId</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Staff</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> String tel;  </span><br><span class="line">    <span class="keyword">private</span> String account;  </span><br><span class="line">    <span class="keyword">private</span> String password;  </span><br><span class="line">    <span class="keyword">private</span> Boolean manager;  </span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.ID_WORKER)</span>  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中type有多种选择</p><p><img src="https://raw.githubusercontent.com/2768085634/pic/main/20221003185250.png"></p><p>这里注意如果id是整型,那么数据库中id应为<strong>bigint</strong><br>java中id为<strong>Long</strong>类型<br>因为自动生成是自动生成19位,会超出int范围</p><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manpower.generator;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;  </span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.OutputFile;  </span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;  </span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;  </span><br><span class="line"><span class="keyword">import</span> java.util.Collections;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//        &lt;1&gt; 数据库连接信息 ==============================================        String url = &quot;jdbc:mysql://127.0.0.1:3306/manpower&quot;;  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;csh20011103&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">        FastAutoGenerator.create(url, username, password)  </span><br><span class="line"><span class="comment">//                1.全局配置  </span></span><br><span class="line">                .globalConfig(builder -&gt; &#123;  </span><br><span class="line">                    builder  </span><br><span class="line">                            .author(<span class="string">&quot;haog&quot;</span>) <span class="comment">// 设置作者  </span></span><br><span class="line"><span class="comment">//                            .enableSwagger() // 开启 swagger 模式  </span></span><br><span class="line">                            .fileOverride() <span class="comment">// 覆盖已生成文件  </span></span><br><span class="line"><span class="comment">//                            &lt;2&gt; 代码生成位置 ==============================================                            .outputDir(&quot;F:\\editor\\project\\manpower\\src\\main\\java&quot;); // 指定输出目录  </span></span><br><span class="line">                &#125;)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//                2.包配置(PackageConfig)  </span></span><br><span class="line">                .packageConfig(builder -&gt; &#123;  </span><br><span class="line"><span class="comment">//                    &lt;3&gt; 包名、项目名、mapper路径 ==============================================                    builder.parent(&quot;com.manpower&quot;) // 设置父包名  </span></span><br><span class="line">                            .moduleName(<span class="string">&quot;&quot;</span>) <span class="comment">// 设置父包模块名  </span></span><br><span class="line">                            .pathInfo(Collections.singletonMap(OutputFile.mapperXml, <span class="string">&quot;F:\\editor\\project\\manpower\\src\\main\\resources\\mapper&quot;</span>)); <span class="comment">// 设置mapperXml生成路径  </span></span><br><span class="line">                &#125;)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//                3.模板配置(TemplateConfig)  </span></span><br><span class="line">                .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>()) <span class="comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//                4.注入配置(InjectionConfig)  </span></span><br><span class="line"><span class="comment">//                .injectionConfig(  </span></span><br><span class="line"><span class="comment">//                        builder -&gt; &#123;  </span></span><br><span class="line"><span class="comment">//                            builder.customMap(Collections.singletonMap(&quot;test&quot;, &quot;baomidou&quot;));  </span></span><br><span class="line"><span class="comment">//                        &#125;  </span></span><br><span class="line"><span class="comment">//                )  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//                5.策略配置(StrategyConfig)  </span></span><br><span class="line">                .strategyConfig(builder -&gt; &#123;  </span><br><span class="line"><span class="comment">//                    &lt;4&gt; 生成的表名  ======================================================                    builder.addInclude(&quot;staff&quot;) // 设置需要生成的表名  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//                    5.1 Entity 策略配置  </span></span><br><span class="line">                            .entityBuilder()  </span><br><span class="line">                            .enableLombok() <span class="comment">//开启 lombok 模型  </span></span><br><span class="line">                            .enableTableFieldAnnotation()   <span class="comment">//开启生成实体时生成字段注解  </span></span><br><span class="line">                            .naming(NamingStrategy.underline_to_camel)  <span class="comment">//数据库表映射到实体的命名策略  </span></span><br><span class="line">                            .columnNaming(NamingStrategy.underline_to_camel)    <span class="comment">//数据库表字段映射到实体的命名策略  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//                    5.2 Controller 策略配置  </span></span><br><span class="line">  </span><br><span class="line">                            .controllerBuilder()  </span><br><span class="line">                            .enableRestStyle()  <span class="comment">//开启生成@RestController 控制器  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//                    5.3 Service 策略配置  </span></span><br><span class="line">                            .serviceBuilder()  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//                    5.4 Mapper 策略配置  </span></span><br><span class="line">                            .mapperBuilder()  </span><br><span class="line">                            .enableBaseResultMap();  <span class="comment">//启用 BaseResultMap 生成  </span></span><br><span class="line"><span class="comment">//                            .enableBaseColumnList();    //启用 BaseColumnList  </span></span><br><span class="line">                &#125;)  </span><br><span class="line">                .execute();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所需要的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- mybatis-plus分页插件 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--这两个主要的依赖要加上--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意!需要在<strong>mapper</strong>中手动加上**@Mapper**,实体类中要加上<strong>toString</strong>方法,否则会返回值会为地址<br>官方service使用文档:<br><a href="https://baomidou.com/pages/49cc81/">CRUD 接口 | MyBatis-Plus (baomidou.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js常见问题</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><a href="Vue%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.md">Vue开发过程常见问题</a></p><h1 id="监听键盘事件"><a href="#监听键盘事件" class="headerlink" title="监听键盘事件"></a>监听键盘事件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">onkeyup</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;  </span><br><span class="line">  <span class="keyword">let</span> key = <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">keyCode</span>;  </span><br><span class="line">  <span class="keyword">if</span> (key === <span class="number">38</span>) &#123;  </span><br><span class="line">    ...</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;bg&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>); <span class="comment">// 需要添加的元素</span></span><br><span class="line">div.<span class="property">className</span> = <span class="string">&#x27;boss&#x27;</span>; <span class="comment">// 添加属性</span></span><br><span class="line">bg.<span class="title function_">appendChild</span>(div);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC链接&amp;关闭</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/JDBC%E9%93%BE%E6%8E%A5&amp;%E5%85%B3%E9%97%AD/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/JDBC%E9%93%BE%E6%8E%A5&amp;%E5%85%B3%E9%97%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC链接-amp-关闭"><a href="#JDBC链接-amp-关闭" class="headerlink" title="JDBC链接&amp;关闭"></a>JDBC链接&amp;关闭</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.shop.JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBC</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName ( <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ( );</span><br><span class="line">        &#125;</span><br><span class="line">        url = <span class="string">&quot;jdbc:mysql://localhost:3306/shopping?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        name = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        password = <span class="string">&quot;csh20011103&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConn</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection ( url, name, password );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(Connection conn, PreparedStatement pst, ResultSet res)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res != <span class="literal">null</span>) &#123;</span><br><span class="line">                res.close ( );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pst != <span class="literal">null</span>) &#123;</span><br><span class="line">                pst.close ( );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                conn.close ( );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ( );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> isQ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">Select</span><span class="params">(String username, String paw)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBC.getConn();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM user where `Username`=? and `Password`=?;&quot;</span>;</span><br><span class="line">            pst = conn.prepareStatement(sql);</span><br><span class="line">            pst.setObject(<span class="number">1</span>, username);</span><br><span class="line">            pst.setObject(<span class="number">2</span>, paw);</span><br><span class="line">            System.out.println(sql);</span><br><span class="line">            res = pst.executeQuery();</span><br><span class="line">            <span class="keyword">if</span> (res.next()) &#123;</span><br><span class="line">                isQ = <span class="literal">true</span>;</span><br><span class="line">                System.out.println(res.getObject(<span class="string">&quot;name&quot;</span>) + <span class="string">&quot; &quot;</span> + res.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                isQ = <span class="literal">false</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;NO!&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBC.release(conn, pst, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isQ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java知识点</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/java/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/java/</url>
      
        <content type="html"><![CDATA[<h1 id="java特点"><a href="#java特点" class="headerlink" title="java特点"></a>java特点</h1><p>面向对象,跨平台</p><h2 id="面向对象特点"><a href="#面向对象特点" class="headerlink" title="面向对象特点"></a>面向对象特点</h2><p>封装,继承,多态,(抽象)</p><p>继承为单继承</p><p>多态:重载和重写</p><p>重载:某个类中同名不同参的方法</p><p>重写:在子类中与父类同名的方法</p><p>类是java的组成结构,是把某些事物特有的行为和特征抽象出来</p><p>面向对象思想认为<strong>万物皆对象</strong>,java中<strong>对象是类的实例化</strong></p><p>实例变量和实例方法在类初始化时被加载(获得内存)</p><p>静态方法在程序被加载到内存时被加载</p><p>类实例化为对象时调用的是构造方法,默认无参构造方法</p><h1 id="接口跟抽象类的区别"><a href="#接口跟抽象类的区别" class="headerlink" title="接口跟抽象类的区别"></a>接口跟抽象类的区别</h1><p>接口类中只允许有抽象方法和静态变量</p><p><strong>静态变量又叫类变量</strong></p><p><strong>接口不允许被实例化</strong></p><p>抽象类中可以有抽象方法和普通方法</p><p>jdk1.8之后允许使用default方法作为默认具体实现方法</p><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="如何新建一个线程"><a href="#如何新建一个线程" class="headerlink" title="如何新建一个线程"></a>如何新建一个线程</h2><ul><li>通过Runnable接口</li><li>通过继承Thread类本身</li><li>通过CallbaleFunture创建线程</li></ul><p>哪一个更好(言之有理即可):</p><p>实现Runnbale方法,因为它是单继承</p><h1 id="jdk-jvm-jre的区别"><a href="#jdk-jvm-jre的区别" class="headerlink" title="jdk,jvm,jre的区别"></a>jdk,jvm,jre的区别</h1>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-ui开发常见问题</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/element-ui%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/element-ui%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="el-select"><a href="#el-select" class="headerlink" title="el-select"></a>el-select</h1><p><code>el-option</code>里面不要使用<code>v-model</code>进行数据绑定</p><h1 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>想要强制修改<code>el-input</code>样式</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>使用穿透<code>&gt;&gt;&gt;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.psUsTag</span> &gt;&gt;&gt; <span class="selector-class">.el-input__inner</span> &#123;  </span><br><span class="line">  <span class="attribute">background</span>: white <span class="meta">!important</span>;  </span><br><span class="line">  <span class="attribute">text-align</span>: center;  </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;  </span><br><span class="line">  <span class="attribute">width</span>: auto;  </span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span>;  </span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>el-input</code>中<code>placeholder</code>属性(此处演示修改第一个<code>el-input</code>的<code>placeholder</code>)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.psUsTag</span><span class="selector-pseudo">:first</span>-child &gt;&gt;&gt; <span class="selector-class">.el-input__inner</span><span class="selector-pseudo">::placeholder</span> &#123;  </span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f57e7e</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="el-button点击后不失焦"><a href="#el-button点击后不失焦" class="headerlink" title="el-button点击后不失焦"></a>el-button点击后不失焦</h1><h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><p><code>el-button</code>点击后不失去焦点</p><h2 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h2><p>强制失焦</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-upload2&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitUsInfo($event)&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">buttonBlur</span>(<span class="params">evt</span>) &#123;  </span><br><span class="line">  <span class="keyword">let</span> target = evt.<span class="property">target</span>;  </span><br><span class="line">  <span class="keyword">if</span>(target.<span class="property">nodeName</span> === <span class="string">&quot;SPAN&quot;</span> || target.<span class="property">nodeName</span> === <span class="string">&quot;I&quot;</span>)&#123;  </span><br><span class="line">    target = evt.<span class="property">target</span>.<span class="property">parentNode</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">  target.<span class="title function_">blur</span>(evt);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:<strong>传进来的参数必须是evt</strong>,否则会报错</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-ui</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/element-ui/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/element-ui/</url>
      
        <content type="html"><![CDATA[<h1 id="Layout布局"><a href="#Layout布局" class="headerlink" title="Layout布局"></a>Layout布局</h1><p>通过基础的24分栏迅速便捷创建布局</p><h2 id="基础布局"><a href="#基础布局" class="headerlink" title="基础布局"></a>基础布局</h2><p>通过 row 和 col 组件，并通过 col 组件的 <code>span</code> 属性我们就可以自由地组合布局。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-row&gt;  </span><br><span class="line">  &lt;el-col :span=&quot;4&quot;&gt;  宽度为 4/24</span><br><span class="line">    &lt;div class=&quot;grid-content bg-purple&quot;&gt;&lt;/div&gt;  </span><br><span class="line">  &lt;/el-col&gt;  </span><br><span class="line">  &lt;el-col :span=&quot;8&quot;&gt;  宽度为 8/24</span><br><span class="line">    &lt;div class=&quot;grid-content bg-purple-light&quot;&gt;&lt;/div&gt;  </span><br><span class="line">  &lt;/el-col&gt;  </span><br><span class="line">  &lt;el-col :span=&quot;12&quot;&gt;  宽度为 12/24</span><br><span class="line">    &lt;div class=&quot;grid-content bg-purple&quot;&gt;&lt;/div&gt;  </span><br><span class="line">  &lt;/el-col&gt;  </span><br><span class="line">&lt;/el-row&gt;</span><br></pre></td></tr></table></figure><h2 id="分栏间隔"><a href="#分栏间隔" class="headerlink" title="分栏间隔"></a>分栏间隔</h2><p>Row 组件 提供 <code>gutter</code> 属性来指定每一栏之间的间隔，默认间隔为 0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-row :gutter=&quot;20&quot;&gt;  </span><br><span class="line">  &lt;el-col :span=&quot;4&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;grid-content bg-purple&quot;&gt;&lt;/div&gt;  </span><br><span class="line">  &lt;/el-col&gt;  </span><br><span class="line">  &lt;el-col :span=&quot;8&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;grid-content bg-purple-light&quot;&gt;&lt;/div&gt;  </span><br><span class="line">  &lt;/el-col&gt;  </span><br><span class="line">  &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;grid-content bg-purple&quot;&gt;&lt;/div&gt;  </span><br><span class="line">  &lt;/el-col&gt;  </span><br><span class="line">&lt;/el-row&gt;</span><br></pre></td></tr></table></figure><p>意味着该行每个模块间隔为均为20px</p><h2 id="分栏偏移"><a href="#分栏偏移" class="headerlink" title="分栏偏移"></a>分栏偏移</h2><p>支持偏移指定的栏数。</p><p>通过制定 col 组件的 <code>offset</code> 属性可以指定分栏偏移的栏数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-col :span=&quot;8&quot;&gt;  </span><br><span class="line">  &lt;div class=&quot;grid-content bg-purple&quot;&gt;&lt;/div&gt;  </span><br><span class="line">&lt;/el-col&gt;  </span><br><span class="line">&lt;el-col :span=&quot;8&quot; :offset=&quot;8&quot;&gt;  </span><br><span class="line">  &lt;div class=&quot;grid-content bg-purple&quot;&gt;&lt;/div&gt;  </span><br><span class="line">&lt;/el-col&gt;</span><br></pre></td></tr></table></figure><p>意味着第二个<code>el-col</code>向右 8&#x2F;24</p><h2 id="对其方式"><a href="#对其方式" class="headerlink" title="对其方式"></a>对其方式</h2><p>通过 <code>flex</code> 布局来对分栏进行灵活的对齐。</p><p>将 <code>type</code> 属性赋值为 ‘flex’，可以启用 flex 布局，并可通过 <code>justify</code> 属性来指定 start, center, end, space-between, space-around 其中的值来定义子元素的排版方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;  </span><br><span class="line">  &lt;el-col :span=&quot;6&quot;&gt;  </span><br><span class="line">    &lt;div class=&quot;grid-content bg-purple&quot;&gt;&lt;/div&gt;  </span><br><span class="line">  &lt;/el-col&gt;  </span><br><span class="line">  &lt;el-col :span=&quot;6&quot;&gt;  </span><br><span class="line">    &lt;div class=&quot;grid-content bg-purple-light&quot;&gt;&lt;/div&gt;  </span><br><span class="line">  &lt;/el-col&gt;  </span><br><span class="line">  &lt;el-col :span=&quot;6&quot;&gt;  </span><br><span class="line">    &lt;div class=&quot;grid-content bg-purple&quot;&gt;&lt;/div&gt;  </span><br><span class="line">  &lt;/el-col&gt;  </span><br><span class="line">&lt;/el-row&gt;</span><br></pre></td></tr></table></figure><ol><li><code>start</code>左对齐(默认)</li><li><code>center</code>竖直居中</li><li><code>end</code>右对齐</li><li><code>space-between</code>左右两边不留空隙,空间平分</li><li><code>space-around</code>全平分,左右两边也留空隙</li></ol><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><p>预设了五个响应尺寸：<code>xs</code>、<code>sm</code>、<code>md</code>、<code>lg</code> 和 <code>xl</code>。用法与 <code>:span</code> 一样，表示在不同尺寸页面上如何显示</p><table><thead><tr><th>名称</th><th>尺寸</th></tr></thead><tbody><tr><td>xs</td><td>&lt;768px（也就是手机）</td></tr><tr><td>sm</td><td>&gt;&#x3D;768px</td></tr><tr><td>md</td><td>&gt;&#x3D;992px</td></tr><tr><td>lg</td><td>&gt;&#x3D;1200px</td></tr><tr><td>xl</td><td>&gt;&#x3D;1920px</td></tr></tbody></table><p>示例：宽屏页面时内容仅仅占页面宽50%居中显示。窄屏幕时占70%，手机时占100%。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-row :gutter=&quot;10&quot;&gt;</span><br><span class="line">  &lt;el-col :xs=&quot;&#123;span:24,offset:0&#125;&quot; :sm=&quot;&#123;span:16,offset:4&#125;&quot; :md=&quot;&#123;span:12,offset:6&#125;&quot;&gt;</span><br><span class="line">  &lt;/el-col&gt;</span><br><span class="line">&lt;/el-row&gt;</span><br></pre></td></tr></table></figure><h3 id="基于断点的隐藏类"><a href="#基于断点的隐藏类" class="headerlink" title="基于断点的隐藏类"></a>基于断点的隐藏类</h3><p>Element 额外提供了一系列类名，用于在某些条件下隐藏元素。这些类名可以添加在任何 DOM 元素或自定义组件上。如果需要，请自行引入以下文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/display.css&#x27;</span>;</span><br></pre></td></tr></table></figure><p>包含的<strong>类</strong>名及其含义为：(使用class&#x3D;”name”进行使用)</p><ul><li><code>hidden-xs-only</code> - 当视口在 <code>xs</code> 尺寸时隐藏</li><li><code>hidden-sm-only</code> - 当视口在 <code>sm</code> 尺寸时隐藏</li><li><code>hidden-sm-and-down</code> - 当视口在 <code>sm</code> 及以下尺寸时隐藏</li><li><code>hidden-sm-and-up</code> - 当视口在 <code>sm</code> 及以上尺寸时隐藏</li><li><code>hidden-md-only</code> - 当视口在 <code>md</code> 尺寸时隐藏</li><li><code>hidden-md-and-down</code> - 当视口在 <code>md</code> 及以下尺寸时隐藏</li><li><code>hidden-md-and-up</code> - 当视口在 <code>md</code> 及以上尺寸时隐藏</li><li><code>hidden-lg-only</code> - 当视口在 <code>lg</code> 尺寸时隐藏</li><li><code>hidden-lg-and-down</code> - 当视口在 <code>lg</code> 及以下尺寸时隐藏</li><li><code>hidden-lg-and-up</code> - 当视口在 <code>lg</code> 及以上尺寸时隐藏</li><li><code>hidden-xl-only</code> - 当视口在 <code>xl</code> 尺寸时隐藏</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="Row-Attributes"><a href="#Row-Attributes" class="headerlink" title="Row Attributes"></a>Row Attributes</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>gutter</td><td>栅格间隔</td><td>number</td><td>—</td><td>0</td></tr><tr><td>type</td><td>布局模式，可选 flex，现代浏览器下有效</td><td>string</td><td>—</td><td>—</td></tr><tr><td>justify</td><td>flex 布局下的水平排列方式</td><td>string</td><td>start&#x2F;end&#x2F;center&#x2F;space-around&#x2F;space-between</td><td>start</td></tr><tr><td>align</td><td>flex 布局下的垂直排列方式</td><td>string</td><td>top&#x2F;middle&#x2F;bottom</td><td>top</td></tr><tr><td>tag</td><td>自定义元素标签</td><td>string</td><td>*</td><td>div</td></tr></tbody></table><h3 id="Col-Attributes"><a href="#Col-Attributes" class="headerlink" title="Col Attributes"></a>Col Attributes</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>span</td><td>栅格占据的列数</td><td>number</td><td>—</td><td>24</td></tr><tr><td>offset</td><td>栅格左侧的间隔格数</td><td>number</td><td>—</td><td>0</td></tr><tr><td>push</td><td>栅格向右移动格数</td><td>number</td><td>—</td><td>0</td></tr><tr><td>pull</td><td>栅格向左移动格数</td><td>number</td><td>—</td><td>0</td></tr><tr><td>xs</td><td>&lt;768px&amp;nbsp;响应式栅格数或者栅格属性对象</td><td>number&#x2F;object (例如： {span: 4, offset: 4})</td><td>—</td><td>—</td></tr><tr><td>sm</td><td>≥768px&amp;nbsp;响应式栅格数或者栅格属性对象</td><td>number&#x2F;object (例如： {span: 4, offset: 4})</td><td>—</td><td>—</td></tr><tr><td>md</td><td>≥992px&amp;nbsp;响应式栅格数或者栅格属性对象</td><td>number&#x2F;object (例如： {span: 4, offset: 4})</td><td>—</td><td>—</td></tr><tr><td>lg</td><td>≥1200px&amp;nbsp;响应式栅格数或者栅格属性对象</td><td>number&#x2F;object (例如： {span: 4, offset: 4})</td><td>—</td><td>—</td></tr><tr><td>xl</td><td>≥1920px&amp;nbsp;响应式栅格数或者栅格属性对象</td><td>number&#x2F;object (例如： {span: 4, offset: 4})</td><td>—</td><td>—</td></tr><tr><td>tag</td><td>自定义元素标签</td><td>string</td><td>*</td><td>div</td></tr></tbody></table><h1 id="Container布局容器"><a href="#Container布局容器" class="headerlink" title="Container布局容器"></a>Container布局容器</h1><p><code>&lt;el-container&gt;</code>外层容器,当子元素中包含<code>&lt;el-header&gt;</code>或者<code>&lt;el-footer&gt;</code>时,<strong>全部</strong>子元素会垂直上下排列,否则会水平左右排列</p><p><code>&lt;el-header&gt;</code>顶栏容器</p><p><code>&lt;el-footer&gt;</code>底栏容器</p><p><code>&lt;el-aside&gt;</code>侧栏容器</p><p><code>&lt;el-main&gt;</code>主要区域容器</p><p>以上组件采用了 <strong>flex 布局</strong>，此外，<code>&lt;el-container&gt;</code> 的子元素只能是后四者，后四者的父元素也只能是 <code>&lt;el-container&gt;</code></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><h3 id="Container-Attributes"><a href="#Container-Attributes" class="headerlink" title="Container Attributes"></a>Container Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">direction</td><td align="left">子元素的排列方向</td><td align="left">string</td><td align="left">horizontal &#x2F; vertical</td><td align="left">子元素中有 el-header 或 el-footer 时为 vertical，否则为 horizontal</td></tr></tbody></table><h3 id="Header-Attributes"><a href="#Header-Attributes" class="headerlink" title="Header Attributes"></a>Header Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">height</td><td align="left">顶栏高度</td><td align="left">string</td><td align="left">—</td><td align="left">60px</td></tr></tbody></table><h3 id="Aside-Attributes"><a href="#Aside-Attributes" class="headerlink" title="Aside Attributes"></a>Aside Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">width</td><td align="left">侧边栏宽度</td><td align="left">string</td><td align="left">—</td><td align="left">300px</td></tr></tbody></table><h3 id="Footer-Attributes"><a href="#Footer-Attributes" class="headerlink" title="Footer Attributes"></a>Footer Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">height</td><td align="left">底栏高度</td><td align="left">string</td><td align="left">—</td><td align="left">60px</td></tr></tbody></table><h1 id="Color色彩"><a href="#Color色彩" class="headerlink" title="Color色彩"></a>Color色彩</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">蓝 type=&quot;primary&quot;</span><br><span class="line">绿 type=&quot;success&quot;</span><br><span class="line">灰 type=&quot;info&quot;</span><br><span class="line">橙 type=&quot;warning&quot;</span><br><span class="line">红 type=&quot;danger&quot;</span><br></pre></td></tr></table></figure><h1 id="Typography字体"><a href="#Typography字体" class="headerlink" title="Typography字体"></a>Typography字体</h1><h2 id="引入字体"><a href="#引入字体" class="headerlink" title="引入字体"></a>引入字体</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;Helvetica Neue&quot;</span>,Helvetica,<span class="string">&quot;PingFang SC&quot;</span>,<span class="string">&quot;Hiragino Sans GB&quot;</span>,<span class="string">&quot;Microsoft YaHei&quot;</span>,<span class="string">&quot;微软雅黑&quot;</span>,Arial,sans-serif;</span><br></pre></td></tr></table></figure><h2 id="字体使用规范"><a href="#字体使用规范" class="headerlink" title="字体使用规范"></a>字体使用规范</h2><table><thead><tr><th align="left">主标题</th><th align="left">用 Element 快速搭建页面</th><th align="left">20px Extra large</th></tr></thead><tbody><tr><td align="left">标题</td><td align="left">用 Element 快速搭建页面</td><td align="left">18px large</td></tr><tr><td align="left">小标题</td><td align="left">用 Element 快速搭建页面</td><td align="left">16px Medium</td></tr><tr><td align="left">正文</td><td align="left">用 Element 快速搭建页面</td><td align="left">14px Small</td></tr><tr><td align="left">正文（小）</td><td align="left">用 Element 快速搭建页面</td><td align="left">13px Extra Small</td></tr><tr><td align="left">辅助文字</td><td align="left">用 Element 快速搭建页面</td><td align="left">12px Extra Extra Small</td></tr></tbody></table><h1 id="Icon图标"><a href="#Icon图标" class="headerlink" title="Icon图标"></a>Icon图标</h1><p>直接引用类名即可使用<code>class=&quot;name&quot;</code></p><p><img src="https://raw.githubusercontent.com/2768085634/pic/main/202210151516823.png"></p><p><img src="https://raw.githubusercontent.com/2768085634/pic/main/202210151516223.png"></p><h1 id="Button按钮"><a href="#Button按钮" class="headerlink" title="Button按钮"></a>Button按钮</h1><h2 id="默认样式按钮"><a href="#默认样式按钮" class="headerlink" title="默认样式按钮"></a>默认样式按钮</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-row&gt;</span><br><span class="line">  白底 &lt;el-button&gt;默认按钮&lt;/el-button&gt;</span><br><span class="line">  蓝底 &lt;el-button type=&quot;primary&quot;&gt;主要按钮&lt;/el-button&gt;</span><br><span class="line">  绿底 &lt;el-button type=&quot;success&quot;&gt;成功按钮&lt;/el-button&gt;</span><br><span class="line">  灰底 &lt;el-button type=&quot;info&quot;&gt;信息按钮&lt;/el-button&gt;</span><br><span class="line">  橙底 &lt;el-button type=&quot;warning&quot;&gt;警告按钮&lt;/el-button&gt;</span><br><span class="line">  红底 &lt;el-button type=&quot;danger&quot;&gt;危险按钮&lt;/el-button&gt;</span><br><span class="line">&lt;/el-row&gt;</span><br></pre></td></tr></table></figure><h2 id="简介按钮"><a href="#简介按钮" class="headerlink" title="简介按钮"></a>简介按钮</h2><p><code>plain</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-row&gt;</span><br><span class="line">  &lt;el-button plain&gt;朴素按钮&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;primary&quot; plain&gt;主要按钮&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;success&quot; plain&gt;成功按钮&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;info&quot; plain&gt;信息按钮&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;warning&quot; plain&gt;警告按钮&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;danger&quot; plain&gt;危险按钮&lt;/el-button&gt;</span><br><span class="line">&lt;/el-row&gt;</span><br></pre></td></tr></table></figure><h2 id="圆角按钮"><a href="#圆角按钮" class="headerlink" title="圆角按钮"></a>圆角按钮</h2><p>把默认样式按钮加上了圆角<code>round</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-row&gt;</span><br><span class="line">  &lt;el-button round&gt;圆角按钮&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;primary&quot; round&gt;主要按钮&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;success&quot; round&gt;成功按钮&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;info&quot; round&gt;信息按钮&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;warning&quot; round&gt;警告按钮&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;danger&quot; round&gt;危险按钮&lt;/el-button&gt;</span><br><span class="line">&lt;/el-row&gt;</span><br></pre></td></tr></table></figure><h2 id="图标按钮"><a href="#图标按钮" class="headerlink" title="图标按钮"></a>图标按钮</h2><p>朴素按钮样式,图标代替文字,变成圆形</p><p><code>circle</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-row&gt;</span><br><span class="line">  &lt;el-button icon=&quot;el-icon-search&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-check&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;info&quot; icon=&quot;el-icon-message&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;warning&quot; icon=&quot;el-icon-star-off&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;danger&quot; icon=&quot;el-icon-delete&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;/el-row&gt;</span><br></pre></td></tr></table></figure><h2 id="禁用按钮"><a href="#禁用按钮" class="headerlink" title="禁用按钮"></a>禁用按钮</h2><p><code>disabled</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button disabled&gt;朴素按钮&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;primary&quot; disabled&gt;主要按钮&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;success&quot; disabled&gt;成功按钮&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;info&quot; disabled&gt;信息按钮&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;warning&quot; disabled&gt;警告按钮&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;danger&quot; disabled&gt;危险按钮&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><h2 id="文字按钮"><a href="#文字按钮" class="headerlink" title="文字按钮"></a>文字按钮</h2><p>没有边框和背景色的按钮。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=&quot;text&quot;&gt;文字按钮&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;text&quot; disabled&gt;文字按钮&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><h2 id="按钮组"><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h2><p>以按钮组的方式出现，常用于多项类似操作。<code>&lt;el-button-group&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button-group&gt;</span><br><span class="line">&lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot;&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-share&quot;&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-delete&quot;&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;/el-button-group&gt;</span><br></pre></td></tr></table></figure><h2 id="加载中"><a href="#加载中" class="headerlink" title="加载中"></a>加载中</h2><p>点击按钮后进行数据加载操作，在按钮上显示加载状态。<code>:loading=&quot;true&quot;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=&quot;primary&quot; :loading=&quot;true&quot;&gt;加载中&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><h2 id="不同尺寸"><a href="#不同尺寸" class="headerlink" title="不同尺寸"></a>不同尺寸</h2><p>额外的尺寸：<code>medium</code>、<code>small</code>、<code>mini</code>，通过设置<code>size</code>属性来配置它们。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-row&gt;</span><br><span class="line">&lt;el-button&gt;默认按钮&lt;/el-button&gt;</span><br><span class="line">&lt;el-button size=&quot;medium&quot;&gt;中等按钮&lt;/el-button&gt;</span><br><span class="line">&lt;el-button size=&quot;small&quot;&gt;小型按钮&lt;/el-button&gt;</span><br><span class="line">&lt;el-button size=&quot;mini&quot;&gt;超小按钮&lt;/el-button&gt;</span><br><span class="line">&lt;/el-row&gt;</span><br></pre></td></tr></table></figure><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><h3 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">size</td><td align="left">尺寸</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">type</td><td align="left">类型</td><td align="left">string</td><td align="left">primary &#x2F; success &#x2F; warning &#x2F; danger &#x2F; info &#x2F; text</td><td align="left">—</td></tr><tr><td align="left">plain</td><td align="left">是否朴素按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">round</td><td align="left">是否圆角按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">circle</td><td align="left">是否圆形按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">loading</td><td align="left">是否加载中状态</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用状态</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">icon</td><td align="left">图标类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">autofocus</td><td align="left">是否默认聚焦</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">native-type</td><td align="left">原生 type 属性</td><td align="left">string</td><td align="left">button &#x2F; submit &#x2F; reset</td><td align="left">button</td></tr></tbody></table><h1 id="Radio单选框"><a href="#Radio单选框" class="headerlink" title="Radio单选框"></a>Radio单选框</h1><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><p>由于选项默认可见，不宜过多，若选项过多，建议使用 Select 选择器。</p><p>选项默认横向排列</p><p>要使用 Radio 组件，只需要设置<code>v-model</code>绑定变量，选中意味着变量的值为相应 Radio <code>label</code>属性的值，<code>label</code>可以是<code>String</code>、<code>Number</code>或<code>Boolean</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-radio v-model=&quot;v&quot; label=&quot;1&quot;&gt;1&lt;/el-radio&gt;  </span><br><span class="line">&lt;el-radio v-model=&quot;v&quot; label=&quot;2&quot;&gt;2&lt;/el-radio&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="keyword">return</span> &#123;  </span><br><span class="line">    <span class="attr">v</span>: <span class="number">1</span>  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="禁用状态"><a href="#禁用状态" class="headerlink" title="禁用状态"></a>禁用状态</h2><p>单选框不可用的状态，只要在<code>el-radio</code>元素中设置<code>disabled</code>属性即可，它接受一个<code>Boolean</code>，<code>true</code>为禁用。用法与<code>el-button</code>中<code>disabled</code>用法一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-radio v-model=&quot;v&quot; label=&quot;禁用&quot; disabled&gt;1&lt;/el-radio&gt;  </span><br><span class="line">&lt;el-radio v-model=&quot;v&quot; label=&quot;选中且禁用&quot;&gt;2&lt;/el-radio&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="keyword">return</span> &#123;  </span><br><span class="line">    <span class="attr">v</span>: <span class="string">&quot;选中且禁用&quot;</span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单选框组"><a href="#单选框组" class="headerlink" title="单选框组"></a>单选框组</h2><p>结合<code>el-radio-group</code>元素和子元素<code>el-radio</code>可以实现单选组，在<code>el-radio-group</code>中绑定<code>v-model</code>，在<code>el-radio</code>中设置好<code>label</code>即可，无需再给每一个<code>el-radio</code>绑定变量，另外，还提供了<code>change</code>事件（**@change**）来响应变化，它会传入一个参数<code>value</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-radio-group v-model=&quot;v&quot;&gt;</span><br><span class="line">&lt;el-radio :label=&quot;3&quot;&gt;备选项&lt;/el-radio&gt;</span><br><span class="line">&lt;el-radio :label=&quot;6&quot;&gt;备选项&lt;/el-radio&gt;</span><br><span class="line">&lt;el-radio :label=&quot;9&quot;&gt;备选项&lt;/el-radio&gt;</span><br><span class="line">&lt;/el-radio-group&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="keyword">return</span> &#123;  </span><br><span class="line">    <span class="attr">v</span>: <span class="number">6</span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="按钮样式"><a href="#按钮样式" class="headerlink" title="按钮样式"></a>按钮样式</h2><p>按钮样式的单选组合。只需要变成<code>el-radio-button</code>即可，此外，Element 还提供了<code>size</code>属性，<code>size</code>属性用在<code>el-radio-group</code>上。</p><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><p>设置<code>border</code>属性可以渲染为带有边框的单选框。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-radio v-model=&quot;v&quot; label=&quot;1&quot; border&gt;1&lt;/el-radio&gt;  </span><br><span class="line">&lt;el-radio v-model=&quot;v&quot; label=&quot;2&quot; border&gt;2&lt;/el-radio&gt;</span><br></pre></td></tr></table></figure><p>该属性<strong>不能</strong>用于单选框组<code>el-radio-group</code></p><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><h3 id="Radio-Attributes"><a href="#Radio-Attributes" class="headerlink" title="Radio Attributes"></a>Radio Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">label</td><td align="left">Radio 的 value</td><td align="left">string &#x2F; number &#x2F; boolean</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">border</td><td align="left">是否显示边框</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">size</td><td align="left">Radio 的尺寸，仅在 border 为真时有效</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">name</td><td align="left">原生 name 属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><h3 id="Radio-Events"><a href="#Radio-Events" class="headerlink" title="Radio Events"></a>Radio Events</h3><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">绑定值变化时触发的事件</td><td align="left">选中的 Radio label 值</td></tr></tbody></table><h3 id="Radio-group-Attributes"><a href="#Radio-group-Attributes" class="headerlink" title="Radio-group Attributes"></a>Radio-group Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">size</td><td align="left">单选框组尺寸，仅对按钮形式的 Radio 或带有边框的 Radio 有效</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">text-color</td><td align="left">按钮形式的 Radio 激活时的文本颜色</td><td align="left">string</td><td align="left">—</td><td align="left">#ffffff</td></tr><tr><td align="left">fill</td><td align="left">按钮形式的 Radio 激活时的填充色和边框色</td><td align="left">string</td><td align="left">—</td><td align="left">#409EFF</td></tr></tbody></table><h3 id="Radio-group-Events"><a href="#Radio-group-Events" class="headerlink" title="Radio-group Events"></a>Radio-group Events</h3><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">绑定值变化时触发的事件</td><td align="left">选中的 Radio label 值</td></tr></tbody></table><h3 id="Radio-button-Attributes"><a href="#Radio-button-Attributes" class="headerlink" title="Radio-button Attributes"></a>Radio-button Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">label</td><td align="left">Radio 的 value</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">name</td><td align="left">原生 name 属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><h1 id="Checkbox多选框"><a href="#Checkbox多选框" class="headerlink" title="Checkbox多选框"></a>Checkbox多选框</h1><h2 id="基础用法-1"><a href="#基础用法-1" class="headerlink" title="基础用法"></a>基础用法</h2><p>单独使用可以表示两种状态之间的切换，写在标签中的内容为 checkbox 按钮后的介绍。</p><p>在<code>el-checkbox</code>元素中定义<code>v-model</code>绑定变量，单一的<code>checkbox</code>中，**默认绑定变量的值会是<code>Boolean</code>，选中为<code>true</code>**，即可以不用<code>label</code>，只需<code>v-model</code>对应的值为<code>true</code>即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-checkbox v-model=&quot;v&quot; label=&quot;1&quot;&gt;1&lt;/el-checkbox&gt;  </span><br><span class="line">&lt;el-checkbox v-model=&quot;v&quot; label=&quot;2&quot;&gt;2&lt;/el-checkbox&gt;  </span><br><span class="line">&lt;el-checkbox v-model=&quot;v&quot; label=&quot;3&quot;&gt;3&lt;/el-checkbox&gt;  </span><br><span class="line">&lt;el-checkbox v-model=&quot;v&quot; label=&quot;4&quot;&gt;4&lt;/el-checkbox&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="keyword">return</span> &#123;  </span><br><span class="line">    <span class="attr">v</span>: [<span class="number">1</span>, <span class="number">3</span>]  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="禁用状态-1"><a href="#禁用状态-1" class="headerlink" title="禁用状态"></a>禁用状态</h2><p>多选框不可用状态。设置<code>disabled</code>属性即可。</p><h2 id="多选框组"><a href="#多选框组" class="headerlink" title="多选框组"></a>多选框组</h2><p>适用于多个勾选框绑定到同一个数组的情景，通过是否勾选来表示这一组选项中选中的项。</p><p><code>checkbox-group</code>元素能把多个 checkbox 管理为一组，只需要在 Group 中使用<code>v-model</code>绑定<code>Array</code>类型的变量即可。 <code>el-checkbox</code> 的 <code>label</code>属性是该 checkbox 对应的值，若该标签中无内容，则该属性也充当 checkbox 按钮后的介绍。<code>label</code>与数组中的元素值相对应，如果存在指定的值则为选中状态，否则为不选中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-checkbox-group v-model=&quot;checkList&quot;&gt;</span><br><span class="line">&lt;el-checkbox label=&quot;复选框 A&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">&lt;el-checkbox label=&quot;复选框 B&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">&lt;el-checkbox label=&quot;复选框 C&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">&lt;el-checkbox label=&quot;禁用&quot; disabled&gt;&lt;/el-checkbox&gt;</span><br><span class="line">&lt;el-checkbox label=&quot;选中且禁用&quot; disabled&gt;&lt;/el-checkbox&gt;</span><br><span class="line">&lt;/el-checkbox-group&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data () &#123; </span><br><span class="line"><span class="keyword">return</span> &#123; </span><br><span class="line"><span class="attr">checkList</span>: [<span class="string">&#x27;选中且禁用&#x27;</span>,<span class="string">&#x27;复选框 A&#x27;</span>] </span><br><span class="line">&#125;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="indeterminate-状态"><a href="#indeterminate-状态" class="headerlink" title="indeterminate 状态"></a>indeterminate 状态</h2><p><code>indeterminate</code> 属性用以表示 checkbox 的不确定状态，一般用于实现全选的效果。但是功能还要自己实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-checkbox :indeterminate=&quot;isIndeterminate&quot; v-model=&quot;checkAll&quot; @change=&quot;handleCheckAllChange&quot;&gt;全选&lt;/el-checkbox&gt;</span><br></pre></td></tr></table></figure><h2 id="可选项目数量的限制"><a href="#可选项目数量的限制" class="headerlink" title="可选项目数量的限制"></a>可选项目数量的限制</h2><p>使用 <code>min</code> 和 <code>max</code> 属性能够限制可以被勾选的项目的数量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-checkbox-group :min=&quot;1&quot; :max=&quot;3&quot;&gt;  </span><br><span class="line">  &lt;el-checkbox v-model=&quot;v&quot; label=&quot;1&quot; border&gt;1&lt;/el-checkbox&gt;  </span><br><span class="line">  &lt;el-checkbox v-model=&quot;v&quot; label=&quot;2&quot; border&gt;2&lt;/el-checkbox&gt;  </span><br><span class="line">  &lt;el-checkbox v-model=&quot;v&quot; label=&quot;2&quot; border&gt;2&lt;/el-checkbox&gt;  </span><br><span class="line">  &lt;el-checkbox v-model=&quot;v&quot; label=&quot;2&quot; border&gt;2&lt;/el-checkbox&gt;  </span><br><span class="line">&lt;/el-checkbox-group&gt;</span><br></pre></td></tr></table></figure><h2 id="按钮样式-1"><a href="#按钮样式-1" class="headerlink" title="按钮样式"></a>按钮样式</h2><p>按钮样式的多选组合。只需要把<code>el-checkbox</code>元素替换为<code>el-checkbox-button</code>元素即可。此外，Element 还提供了<code>size</code>属性。<code>size</code>属性用在<code>el-checkbox-group</code>上</p><h2 id="边框-1"><a href="#边框-1" class="headerlink" title="边框"></a>边框</h2><p>设置<code>border</code>属性可以渲染为带有边框的单选框。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-checkbox v-model=&quot;v&quot; label=&quot;1&quot; border&gt;1&lt;/el-radio&gt;  </span><br><span class="line">&lt;el-checkbox v-model=&quot;v&quot; label=&quot;2&quot; border&gt;2&lt;/el-radio&gt;</span><br></pre></td></tr></table></figure><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><h3 id="Checkbox-Attributes"><a href="#Checkbox-Attributes" class="headerlink" title="Checkbox Attributes"></a>Checkbox Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">label</td><td align="left">选中状态的值（只有在checkbox-group或者绑定对象类型为array时有效）</td><td align="left">string &#x2F; number &#x2F; boolean</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">true-label</td><td align="left">选中时的值</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">false-label</td><td align="left">没有选中时的值</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">border</td><td align="left">是否显示边框</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">size</td><td align="left">Checkbox 的尺寸，仅在 border 为真时有效</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">name</td><td align="left">原生 name 属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">checked</td><td align="left">当前是否勾选</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">indeterminate</td><td align="left">设置 indeterminate 状态，只负责样式控制</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr></tbody></table><h3 id="Checkbox-Events"><a href="#Checkbox-Events" class="headerlink" title="Checkbox Events"></a>Checkbox Events</h3><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">当绑定值变化时触发的事件</td><td align="left">更新后的值</td></tr></tbody></table><h3 id="Checkbox-group-Attributes"><a href="#Checkbox-group-Attributes" class="headerlink" title="Checkbox-group Attributes"></a>Checkbox-group Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">size</td><td align="left">多选框组尺寸，仅对按钮形式的 Checkbox 或带有边框的 Checkbox 有效</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">min</td><td align="left">可被勾选的 checkbox 的最小数量</td><td align="left">number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">max</td><td align="left">可被勾选的 checkbox 的最大数量</td><td align="left">number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">text-color</td><td align="left">按钮形式的 Checkbox 激活时的文本颜色</td><td align="left">string</td><td align="left">—</td><td align="left">#ffffff</td></tr><tr><td align="left">fill</td><td align="left">按钮形式的 Checkbox 激活时的填充色和边框色</td><td align="left">string</td><td align="left">—</td><td align="left">#409EFF</td></tr></tbody></table><h3 id="Checkbox-group-Events"><a href="#Checkbox-group-Events" class="headerlink" title="Checkbox-group Events"></a>Checkbox-group Events</h3><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">当绑定值变化时触发的事件</td><td align="left">更新后的值</td></tr></tbody></table><h3 id="Checkbox-button-Attributes"><a href="#Checkbox-button-Attributes" class="headerlink" title="Checkbox-button Attributes"></a>Checkbox-button Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">label</td><td align="left">选中状态的值（只有在checkbox-group或者绑定对象类型为array时有效）</td><td align="left">string &#x2F; number &#x2F; boolean</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">true-label</td><td align="left">选中时的值</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">false-label</td><td align="left">没有选中时的值</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">name</td><td align="left">原生 name 属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">checked</td><td align="left">当前是否勾选</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr></tbody></table><h1 id="Input输入框"><a href="#Input输入框" class="headerlink" title="Input输入框"></a>Input输入框</h1><h2 id="基础用法-2"><a href="#基础用法-2" class="headerlink" title="基础用法"></a>基础用法</h2><p>与<code>input</code>标签类似</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input v-model=&quot;v&quot; placeholder=&quot;内容&quot;&gt;&lt;/el-input&gt;</span><br><span class="line"></span><br><span class="line">data() &#123;  </span><br><span class="line">  return &#123;  </span><br><span class="line">    v: &quot;&quot;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="禁用状态-2"><a href="#禁用状态-2" class="headerlink" title="禁用状态"></a>禁用状态</h2><p>通过 <code>disabled</code> 属性指定是否禁用 input 组件</p><p><code>disabled</code>与<code>:disabled=&quot;true&quot;</code>效果一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input v-model=&quot;v&quot; placeholder=&quot;内容&quot; :disabled=&quot;true&quot;&gt;&lt;/el-input&gt;</span><br><span class="line"></span><br><span class="line">data() &#123;  </span><br><span class="line">  return &#123;  </span><br><span class="line">    v: &quot;&quot;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可清空"><a href="#可清空" class="headerlink" title="可清空"></a>可清空</h2><p>使用<code>clearable</code>属性即可得到一个可清空的输入框(一键清空功能)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input v-model=&quot;v&quot; placeholder=&quot;内容&quot; :disabled=&quot;false&quot; clearable&gt;&lt;/el-input&gt;</span><br></pre></td></tr></table></figure><h2 id="带-icon-的输入框"><a href="#带-icon-的输入框" class="headerlink" title="带 icon 的输入框"></a>带 icon 的输入框</h2><p>带有图标标记输入类型</p><p>可以通过 <code>prefix-icon</code> 和 <code>suffix-icon</code> 属性在 input 组件首部和尾部增加显示图标，也可以通过 slot(插槽) 来放置图标。</p><p><code>prefix-icon</code>首部<br><code>suffix-icon</code>尾部</p><p><a href="https://zhuanlan.zhihu.com/p/114502325">vue插槽（slot）详解 - 知乎 (zhihu.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input  </span><br><span class="line">  placeholder=&quot;请选择日期&quot;  </span><br><span class="line">  suffix-icon=&quot;el-icon-date&quot;  </span><br><span class="line">  v-model=&quot;v1&quot;&gt;  </span><br><span class="line">&lt;/el-input&gt;  </span><br><span class="line">&lt;el-input  </span><br><span class="line">  placeholder=&quot;请输入内容&quot;  </span><br><span class="line">  prefix-icon=&quot;el-icon-search&quot;  </span><br><span class="line">  v-model=&quot;v2&quot;&gt;  </span><br><span class="line">&lt;/el-input&gt;</span><br></pre></td></tr></table></figure><h2 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h2><p>用于输入多行文本信息，通过将 <code>type</code> 属性的值指定为 textarea。</p><p>文本域高度可通过 <code>rows</code> 属性控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input v-model=&quot;v1&quot; type=&quot;textarea&quot; :rows=&quot;2&quot;&gt;&lt;/el-input&gt;</span><br></pre></td></tr></table></figure><h3 id="可自适应文本高度的文本域"><a href="#可自适应文本高度的文本域" class="headerlink" title="可自适应文本高度的文本域"></a>可自适应文本高度的文本域</h3><p>通过设置 <code>autosize</code> 属性可以使得文本域的高度能够根据文本内容自动进行调整，并且 <code>autosize</code> 还可以设定为一个对象，指定最小行数和最大行数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input v-model=&quot;v1&quot; type=&quot;textarea&quot; :autosize=&quot;&#123; maxRows: 4, minRows: 2&#125;&quot;&gt;&lt;/el-input&gt;</span><br></pre></td></tr></table></figure><h2 id="复合型输入框"><a href="#复合型输入框" class="headerlink" title="复合型输入框"></a>复合型输入框</h2><p>可前置或后置元素，一般为标签或按钮</p><p>可通过 slot 来指定在 input 中前置或者后置内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input placeholder=&quot;请输入内容&quot; v-model=&quot;input4&quot;&gt;  </span><br><span class="line">  &lt;template slot=&quot;append&quot;&gt;.com&lt;/template&gt;  </span><br><span class="line">  &lt;template slot=&quot;prepend&quot;&gt;Http://&lt;/template&gt;  </span><br><span class="line">&lt;/el-input&gt;</span><br></pre></td></tr></table></figure><h2 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h2><p>可通过 <code>size</code> 属性指定输入框的尺寸，除了默认的大小外，还提供了 medium、small 和 mini 三种尺寸。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input placeholder=&quot;请输入内容&quot; size=&quot;small&quot;&gt;  </span><br><span class="line">  &lt;template slot=&quot;prepend&quot;&gt;Http://&lt;/template&gt;  </span><br><span class="line">&lt;/el-input&gt;</span><br></pre></td></tr></table></figure><h2 id="带输入建议"><a href="#带输入建议" class="headerlink" title="带输入建议"></a>带输入建议</h2><p>根据输入内容提供对应的输入建议</p><p>autocomplete 是一个可带输入建议的输入框组件，<code>fetch-suggestions</code> 是一个返回输入建议的方法属性，如 querySearch(queryString, cb)，在该方法中你可以在你的输入建议数据准备好时通过 cb(data) 返回到 autocomplete 组件中。</p><p><code>:trigger-on-focus</code>意味是否在聚焦时显示建议,默认为<code>true</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;  </span><br><span class="line">    &lt;el-autocomplete  </span><br><span class="line">    v-model=&quot;v&quot;  </span><br><span class="line">    :fetch-suggestions=&quot;qS&quot;  </span><br><span class="line">    :trigger-on-focus=&quot;false&quot;  </span><br><span class="line">    clearable&gt;  </span><br><span class="line">    &lt;/el-autocomplete&gt;  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default &#123;  </span><br><span class="line">  name: &#x27;App&#x27;,  </span><br><span class="line">  data() &#123;  </span><br><span class="line">    return &#123;  </span><br><span class="line">      st: [],  </span><br><span class="line">      v: &#x27;&#x27;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;,  </span><br><span class="line">  methods: &#123;  </span><br><span class="line">    sc(item) &#123;  </span><br><span class="line">      console.log(item)  </span><br><span class="line">    &#125;,  </span><br><span class="line">    qS: function (queryString, cb) &#123;  </span><br><span class="line">      let st = this.st;  </span><br><span class="line">      let result = queryString ? st.filter(this.creatFilter(queryString)) : st;  </span><br><span class="line">      cb(result);  </span><br><span class="line">      // 得到的result是个数组  </span><br><span class="line">      // console.log(result[0].address)  </span><br><span class="line">    &#125;,  </span><br><span class="line">    creatFilter(queryString) &#123;  </span><br><span class="line">      return(st1 =&gt; &#123;  </span><br><span class="line">        return (st1.value.toLowerCase().match(queryString.toLowerCase()));  </span><br><span class="line">      &#125;)  </span><br><span class="line">    &#125;,  </span><br><span class="line">    getAll: function () &#123;  </span><br><span class="line">      return [  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;三全鲜食（北新泾店）&quot;, &quot;address&quot;: &quot;长宁区新渔路144号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;Hot honey 首尔炸鸡（仙霞路）&quot;, &quot;address&quot;: &quot;上海市长宁区淞虹路661号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;新旺角茶餐厅&quot;, &quot;address&quot;: &quot;上海市普陀区真北路988号创邑金沙谷6号楼113&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;泷千家(天山西路店)&quot;, &quot;address&quot;: &quot;天山西路438号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;胖仙女纸杯蛋糕（上海凌空店）&quot;, &quot;address&quot;: &quot;上海市长宁区金钟路968号1幢18号楼一层商铺18-101&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;贡茶&quot;, &quot;address&quot;: &quot;上海市长宁区金钟路633号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;豪大大香鸡排超级奶爸&quot;, &quot;address&quot;: &quot;上海市嘉定区曹安公路曹安路1685号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;茶芝兰（奶茶，手抓饼）&quot;, &quot;address&quot;: &quot;上海市普陀区同普路1435号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;十二泷町&quot;, &quot;address&quot;: &quot;上海市北翟路1444弄81号B幢-107&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;星移浓缩咖啡&quot;, &quot;address&quot;: &quot;上海市嘉定区新郁路817号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;阿姨奶茶/豪大大&quot;, &quot;address&quot;: &quot;嘉定区曹安路1611号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;新麦甜四季甜品炸鸡&quot;, &quot;address&quot;: &quot;嘉定区曹安公路2383弄55号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;Monica摩托主题咖啡店&quot;, &quot;address&quot;: &quot;嘉定区江桥镇曹安公路2409号1F，2383弄62号1F&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;浮生若茶（凌空soho店）&quot;, &quot;address&quot;: &quot;上海长宁区金钟路968号9号楼地下一层&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;NONO JUICE  鲜榨果汁&quot;, &quot;address&quot;: &quot;上海市长宁区天山西路119号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;CoCo都可(北新泾店）&quot;, &quot;address&quot;: &quot;上海市长宁区仙霞西路&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;快乐柠檬（神州智慧店）&quot;, &quot;address&quot;: &quot;上海市长宁区天山西路567号1层R117号店铺&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;Merci Paul cafe&quot;, &quot;address&quot;: &quot;上海市普陀区光复西路丹巴路28弄6号楼819&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;猫山王（西郊百联店）&quot;, &quot;address&quot;: &quot;上海市长宁区仙霞西路88号第一层G05-F01-1-306&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;枪会山&quot;, &quot;address&quot;: &quot;上海市普陀区棕榈路&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;纵食&quot;, &quot;address&quot;: &quot;元丰天山花园(东门) 双流路267号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;钱记&quot;, &quot;address&quot;: &quot;上海市长宁区天山西路&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;壹杯加&quot;, &quot;address&quot;: &quot;上海市长宁区通协路&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;唦哇嘀咖&quot;, &quot;address&quot;: &quot;上海市长宁区新泾镇金钟路999号2幢（B幢）第01层第1-02A单元&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;爱茜茜里(西郊百联)&quot;, &quot;address&quot;: &quot;长宁区仙霞西路88号1305室&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;爱茜茜里(近铁广场)&quot;, &quot;address&quot;: &quot;上海市普陀区真北路818号近铁城市广场北区地下二楼N-B2-O2-C商铺&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;鲜果榨汁（金沙江路和美广店）&quot;, &quot;address&quot;: &quot;普陀区金沙江路2239号金沙和美广场B1-10-6&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;开心丽果（缤谷店）&quot;, &quot;address&quot;: &quot;上海市长宁区威宁路天山路341号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;超级鸡车（丰庄路店）&quot;, &quot;address&quot;: &quot;上海市嘉定区丰庄路240号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;妙生活果园（北新泾店）&quot;, &quot;address&quot;: &quot;长宁区新渔路144号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;香宜度麻辣香锅&quot;, &quot;address&quot;: &quot;长宁区淞虹路148号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;凡仔汉堡（老真北路店）&quot;, &quot;address&quot;: &quot;上海市普陀区老真北路160号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;港式小铺&quot;, &quot;address&quot;: &quot;上海市长宁区金钟路968号15楼15-105室&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;蜀香源麻辣香锅（剑河路店）&quot;, &quot;address&quot;: &quot;剑河路443-1&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;北京饺子馆&quot;, &quot;address&quot;: &quot;长宁区北新泾街道天山西路490-1号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;饭典*新简餐（凌空SOHO店）&quot;, &quot;address&quot;: &quot;上海市长宁区金钟路968号9号楼地下一层9-83室&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;焦耳·川式快餐（金钟路店）&quot;, &quot;address&quot;: &quot;上海市金钟路633号地下一层甲部&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;动力鸡车&quot;, &quot;address&quot;: &quot;长宁区仙霞西路299弄3号101B&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;浏阳蒸菜&quot;, &quot;address&quot;: &quot;天山西路430号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;四海游龙（天山西路店）&quot;, &quot;address&quot;: &quot;上海市长宁区天山西路&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;樱花食堂（凌空店）&quot;, &quot;address&quot;: &quot;上海市长宁区金钟路968号15楼15-105室&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;壹分米客家传统调制米粉(天山店)&quot;, &quot;address&quot;: &quot;天山西路428号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;福荣祥烧腊（平溪路店）&quot;, &quot;address&quot;: &quot;上海市长宁区协和路福泉路255弄57-73号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;速记黄焖鸡米饭&quot;, &quot;address&quot;: &quot;上海市长宁区北新泾街道金钟路180号1层01号摊位&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;红辣椒麻辣烫&quot;, &quot;address&quot;: &quot;上海市长宁区天山西路492号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;(小杨生煎)西郊百联餐厅&quot;, &quot;address&quot;: &quot;长宁区仙霞西路88号百联2楼&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;阳阳麻辣烫&quot;, &quot;address&quot;: &quot;天山西路389号&quot; &#125;,  </span><br><span class="line">        &#123; &quot;value&quot;: &quot;南拳妈妈龙虾盖浇饭&quot;, &quot;address&quot;: &quot;普陀区金沙江路1699号鑫乐惠美食广场A13&quot; &#125;  </span><br><span class="line">      ]  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;,  </span><br><span class="line">  mounted() &#123;  </span><br><span class="line">    this.st = this.getAll();  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义输入建议模板"><a href="#自定义输入建议模板" class="headerlink" title="自定义输入建议模板"></a>自定义输入建议模板</h2><p>可自定义输入建议的显示</p><p>使用<code>scoped slot</code>自定义输入建议的模板。该 scope 的参数为<code>item</code>，表示当前输入建议对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-autocomplete  </span><br><span class="line">v-model=&quot;v&quot;  </span><br><span class="line">:fetch-suggestions=&quot;qS&quot;  </span><br><span class="line">:trigger-on-focus=&quot;false&quot;  </span><br><span class="line">clearable&gt;  </span><br><span class="line">  &lt;i  </span><br><span class="line">    class=&quot;el-icon-edit el-input__icon&quot;  </span><br><span class="line">    slot=&quot;suffix&quot;  </span><br><span class="line">    &gt;  </span><br><span class="line">  &lt;/i&gt;  </span><br><span class="line">  &lt;template slot-scope=&quot;&#123; item &#125;&quot;&gt;  </span><br><span class="line">    &lt;div class=&quot;name&quot;&gt;&#123;&#123; item.value &#125;&#125;&lt;/div&gt;  </span><br><span class="line">    &lt;span class=&quot;addr&quot;&gt;&#123;&#123; item.address &#125;&#125;&lt;/span&gt;  </span><br><span class="line">  &lt;/template&gt;  </span><br><span class="line">&lt;/el-autocomplete&gt;</span><br></pre></td></tr></table></figure><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><h3 id="Input-Attributes"><a href="#Input-Attributes" class="headerlink" title="Input Attributes"></a>Input Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">type</td><td align="left">类型</td><td align="left">string</td><td align="left">text，textarea 和其他 原生 input 的 type 值</td><td align="left">text</td></tr><tr><td align="left">value</td><td align="left">绑定值</td><td align="left">string &#x2F; number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">maxlength</td><td align="left">原生属性，最大输入长度</td><td align="left">number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">minlength</td><td align="left">原生属性，最小输入长度</td><td align="left">number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">placeholder</td><td align="left">输入框占位文本</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">clearable</td><td align="left">是否可清空</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">disabled</td><td align="left">禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">size</td><td align="left">输入框尺寸，只在 type!&#x3D;”textarea”时有效</td><td align="left">string</td><td align="left">medium &#x2F; small &#x2F; mini</td><td align="left">—</td></tr><tr><td align="left">prefix-icon</td><td align="left">输入框头部图标</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">suffix-icon</td><td align="left">输入框尾部图标</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">rows</td><td align="left">输入框行数，只对 type&#x3D;”textarea”有效</td><td align="left">number</td><td align="left">—</td><td align="left">2</td></tr><tr><td align="left">autosize</td><td align="left">自适应内容高度，只对 type&#x3D;”textarea” 有效，可传入对象，如，{ minRows: 2, maxRows: 6 }</td><td align="left">boolean &#x2F; object</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">auto-complete</td><td align="left">原生属性，自动补全</td><td align="left">string</td><td align="left">on, off</td><td align="left">off</td></tr><tr><td align="left">name</td><td align="left">原生属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">readonly</td><td align="left">原生属性，是否只读</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">max</td><td align="left">原生属性，设置最大值</td><td align="left">—</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">min</td><td align="left">原生属性，设置最小值</td><td align="left">—</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">step</td><td align="left">原生属性，设置输入字段的合法数字间隔</td><td align="left">—</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">resize</td><td align="left">控制是否能被用户缩放</td><td align="left">string</td><td align="left">none, both, horizontal, vertical</td><td align="left">—</td></tr><tr><td align="left">autofocus</td><td align="left">原生属性，自动获取焦点</td><td align="left">boolean</td><td align="left">true, false</td><td align="left">false</td></tr><tr><td align="left">form</td><td align="left">原生属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">label</td><td align="left">输入框关联的label文字</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">tabindex</td><td align="left">输入框的tabindex</td><td align="left">string</td><td align="left">-</td><td align="left">-</td></tr></tbody></table><h3 id="Input-Slots"><a href="#Input-Slots" class="headerlink" title="Input Slots"></a>Input Slots</h3><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">prefix</td><td align="left">输入框头部内容，只对 type&#x3D;”text” 有效</td></tr><tr><td align="left">suffix</td><td align="left">输入框尾部内容，只对 type&#x3D;”text” 有效</td></tr><tr><td align="left">prepend</td><td align="left">输入框前置内容，只对 type&#x3D;”text” 有效</td></tr><tr><td align="left">append</td><td align="left">输入框后置内容，只对 type&#x3D;”text” 有效</td></tr></tbody></table><h3 id="Input-Events"><a href="#Input-Events" class="headerlink" title="Input Events"></a>Input Events</h3><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">blur</td><td align="left">在 Input 失去焦点时触发</td><td align="left">(event: Event)</td></tr><tr><td align="left">focus</td><td align="left">在 Input 获得焦点时触发</td><td align="left">(event: Event)</td></tr><tr><td align="left">input</td><td align="left">在 Input 值改变时触发</td><td align="left">(value: string | number)</td></tr><tr><td align="left">clear</td><td align="left">在点击由 clearable 属性生成的清空按钮时触发</td><td align="left">—</td></tr><tr><td align="left">change</td><td align="left">仅在输入框失去焦点或用户按下回车时触发</td><td align="left">(value: string | number)</td></tr></tbody></table><h3 id="Input-Methods"><a href="#Input-Methods" class="headerlink" title="Input Methods"></a>Input Methods</h3><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">focus</td><td align="left">使 input 获取焦点</td><td align="left">—</td></tr><tr><td align="left">blur</td><td align="left">使 input 失去焦点</td><td align="left">—</td></tr><tr><td align="left">select</td><td align="left">选中 input 中的文字</td><td align="left">—</td></tr></tbody></table><h3 id="Autocomplete-Attributes"><a href="#Autocomplete-Attributes" class="headerlink" title="Autocomplete Attributes"></a>Autocomplete Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">placeholder</td><td align="left">输入框占位文本</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">value-key</td><td align="left">输入建议对象中用于显示的键名</td><td align="left">string</td><td align="left">—</td><td align="left">value</td></tr><tr><td align="left">value</td><td align="left">必填值，输入绑定值</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">debounce</td><td align="left">获取输入建议的去抖延时</td><td align="left">number</td><td align="left">—</td><td align="left">300</td></tr><tr><td align="left">placement</td><td align="left">菜单弹出位置</td><td align="left">string</td><td align="left">top &#x2F; top-start &#x2F; top-end &#x2F; bottom &#x2F; bottom-start &#x2F; bottom-end</td><td align="left">bottom-start</td></tr><tr><td align="left">fetch-suggestions</td><td align="left">返回输入建议的方法，仅当你的输入建议数据 resolve 时，通过调用 callback(data:[]) 来返回它</td><td align="left">Function(queryString, callback)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">popper-class</td><td align="left">Autocomplete 下拉列表的类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">trigger-on-focus</td><td align="left">是否在输入框 focus 时显示建议列表</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">name</td><td align="left">原生属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">select-when-unmatched</td><td align="left">在输入没有任何匹配建议的情况下，按下回车是否触发 select事件</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">label</td><td align="left">输入框关联的label文字</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">prefix-icon</td><td align="left">输入框头部图标</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">suffix-icon</td><td align="left">输入框尾部图标</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">hide-loading</td><td align="left">是否隐藏远程加载时的加载图标</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">popper-append-to-body</td><td align="left">是否将下拉列表插入至 body 元素。在下拉列表的定位出现问题时，可将该属性设置为 false</td><td align="left">boolean</td><td align="left">-</td><td align="left">true</td></tr></tbody></table><h3 id="Autocomplete-Slots"><a href="#Autocomplete-Slots" class="headerlink" title="Autocomplete Slots"></a>Autocomplete Slots</h3><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">prefix</td><td align="left">输入框头部内容</td></tr><tr><td align="left">suffix</td><td align="left">输入框尾部内容</td></tr><tr><td align="left">prepend</td><td align="left">输入框前置内容</td></tr><tr><td align="left">append</td><td align="left">输入框后置内容</td></tr></tbody></table><h3 id="Autocomplete-Scoped-Slot"><a href="#Autocomplete-Scoped-Slot" class="headerlink" title="Autocomplete Scoped Slot"></a>Autocomplete Scoped Slot</h3><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">—</td><td align="left">自定义输入建议，参数为 { item }</td></tr></tbody></table><h3 id="Autocomplete-Events"><a href="#Autocomplete-Events" class="headerlink" title="Autocomplete Events"></a>Autocomplete Events</h3><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">select</td><td align="left">点击选中建议项时触发</td><td align="left">选中建议项</td></tr></tbody></table><h3 id="Autocomplete-Methods"><a href="#Autocomplete-Methods" class="headerlink" title="Autocomplete Methods"></a>Autocomplete Methods</h3><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">focus</td><td align="left">使 input 获取焦点</td><td align="left">-</td></tr></tbody></table><h1 id="InputNumber计数器"><a href="#InputNumber计数器" class="headerlink" title="InputNumber计数器"></a>InputNumber计数器</h1><p>仅允许输入标准的数字值，可定义范围</p><h2 id="基础用法-3"><a href="#基础用法-3" class="headerlink" title="基础用法"></a>基础用法</h2><p>要使用它，只需要在<code>el-input-number</code>元素中使用<code>v-model</code>绑定变量即可，变量的初始值即为默认值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input-number v-model=&quot;v&quot;&gt;&lt;/el-input-number&gt;</span><br></pre></td></tr></table></figure><h2 id="禁用状态-3"><a href="#禁用状态-3" class="headerlink" title="禁用状态"></a>禁用状态</h2><p><code>disabled</code>属性接受一个<code>Boolean</code>，设置为<code>true</code>即可禁用整个组件，如果你只需要控制数值在某一范围内，可以设置<code>min</code>属性和<code>max</code>属性，不设置<code>min</code>和<code>max</code>时，最小值为 0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input-number v-model=&quot;v&quot; min=&quot;0&quot; max=&quot;10&quot; :disabled=&quot;true&quot;&gt;&lt;/el-input-number&gt;</span><br></pre></td></tr></table></figure><h2 id="步数"><a href="#步数" class="headerlink" title="步数"></a>步数</h2><p>允许定义递增递减的步数控制</p><p>设置<code>step</code>属性可以控制步长，接受一个<code>Number</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input-number v-model=&quot;v&quot; min=&quot;0&quot; max=&quot;10&quot; step=&quot;2&quot;&gt;&lt;/el-input-number&gt;</span><br></pre></td></tr></table></figure><h2 id="精度"><a href="#精度" class="headerlink" title="精度"></a>精度</h2><p>设置 <code>precision</code> 属性可以控制数值精度，接收一个 <code>Number</code>。</p><p><code>precision</code> 的值必须是一个非负整数，并且不能小于 <code>step</code> 的小数位数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input-number v-model=&quot;v&quot; min=&quot;0&quot; max=&quot;10&quot; step=&quot;0.1&quot; precision=&quot;2&quot;&gt;&lt;/el-input-number&gt;</span><br></pre></td></tr></table></figure><h2 id="尺寸-1"><a href="#尺寸-1" class="headerlink" title="尺寸"></a>尺寸</h2><p>额外提供了 <code>medium</code>、<code>small</code>、<code>mini</code> 三种尺寸的数字输入框</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input-number v-model=&quot;v&quot; size=&quot;mini&quot;&gt;&lt;/el-input-number&gt;</span><br></pre></td></tr></table></figure><h2 id="按钮位置"><a href="#按钮位置" class="headerlink" title="按钮位置"></a>按钮位置</h2><p>设置 <code>controls-position</code> 属性可以控制按钮位置。</p><p>按钮上下分布且都在右侧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input-number v-model=&quot;v&quot; size=&quot;mini&quot; controls-position=&quot;right&quot;&gt;&lt;/el-input-number&gt;</span><br></pre></td></tr></table></figure><h2 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h2><h3 id="Attributes-1"><a href="#Attributes-1" class="headerlink" title="Attributes"></a>Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">value</td><td align="left">绑定值</td><td align="left">number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">min</td><td align="left">设置计数器允许的最小值</td><td align="left">number</td><td align="left">—</td><td align="left">-Infinity</td></tr><tr><td align="left">max</td><td align="left">设置计数器允许的最大值</td><td align="left">number</td><td align="left">—</td><td align="left">Infinity</td></tr><tr><td align="left">step</td><td align="left">计数器步长</td><td align="left">number</td><td align="left">—</td><td align="left">1</td></tr><tr><td align="left">precision</td><td align="left">数值精度</td><td align="left">number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">size</td><td align="left">计数器尺寸</td><td align="left">string</td><td align="left">medium, small,mini</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用计数器</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">controls</td><td align="left">是否使用控制按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">controls-position</td><td align="left">控制按钮位置</td><td align="left">string</td><td align="left">right</td><td align="left">-</td></tr><tr><td align="left">name</td><td align="left">原生属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">label</td><td align="left">输入框关联的label文字</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr></tbody></table><h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">绑定值被改变时触发</td><td align="left">最后变更的值</td></tr><tr><td align="left">blur</td><td align="left">在组件 Input 失去焦点时触发</td><td align="left">(event: Event)</td></tr><tr><td align="left">focus</td><td align="left">在组件 Input 获得焦点时触发</td><td align="left">(event: Event)</td></tr></tbody></table><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">focus</td><td align="left">使 input 获取焦点</td><td align="left">-</td></tr></tbody></table><h1 id="Select选择器"><a href="#Select选择器" class="headerlink" title="Select选择器"></a>Select选择器</h1><p>当选项过多时，使用下拉菜单展示并选择内容。</p><h2 id="基础用法-4"><a href="#基础用法-4" class="headerlink" title="基础用法"></a>基础用法</h2><p>适用广泛的基础单选</p><p><code>v-model</code>的值为当前被选中的<code>el-option</code>的 value 属性值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select v-model=&quot;v&quot;&gt;  </span><br><span class="line">  &lt;el-option v-for=&quot;item in st&quot;  </span><br><span class="line">  :key=&quot;item.address&quot;  </span><br><span class="line">  :label=&quot;item.value&quot;  展示内容</span><br><span class="line">  :value=&quot;item.address&quot;&gt;  </span><br><span class="line">  &lt;/el-option&gt;  </span><br><span class="line">&lt;/el-select&gt;</span><br><span class="line"></span><br><span class="line">data() &#123;  </span><br><span class="line">  return &#123;  </span><br><span class="line">    st: [],  </span><br><span class="line">    v: &#x27;&#x27;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="禁用"><a href="#禁用" class="headerlink" title="禁用"></a>禁用</h2><h3 id="选项禁用"><a href="#选项禁用" class="headerlink" title="选项禁用"></a>选项禁用</h3><p>在<code>el-option</code>中，设定<code>disabled</code>值为 true，即可禁用该选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select v-model=&quot;v&quot;&gt;  </span><br><span class="line">  &lt;el-option v-for=&quot;item in st&quot;  </span><br><span class="line">  :key=&quot;item.address&quot;  </span><br><span class="line">  :label=&quot;item.value&quot;  </span><br><span class="line">  :value=&quot;item.address&quot;  </span><br><span class="line">  :disabled=&quot;item.disabled&quot;  </span><br><span class="line">  &gt;  </span><br><span class="line">  &lt;/el-option&gt;  </span><br><span class="line">&lt;/el-select&gt;</span><br></pre></td></tr></table></figure><p>不要调用函数，否则结果只是显示不可选，但是点击可选。</p><h3 id="全部禁用"><a href="#全部禁用" class="headerlink" title="全部禁用"></a>全部禁用</h3><p>选择器不可用状态</p><p>为<code>el-select</code>设置<code>disabled</code>属性，则整个选择器不可用</p><h2 id="可清空单选"><a href="#可清空单选" class="headerlink" title="可清空单选"></a>可清空单选</h2><p>包含清空按钮，可将选择器清空为初始状态</p><p>为<code>el-select</code>设置<code>clearable</code>属性，则可将选择器清空。需要注意的是，<code>clearable</code>属性仅适用于单选。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select v-model=&quot;v&quot; clearable&gt;  </span><br><span class="line">  &lt;el-option v-for=&quot;item in st&quot;  </span><br><span class="line">  :key=&quot;item.address&quot;  </span><br><span class="line">  :label=&quot;item.value&quot;  </span><br><span class="line">  :value=&quot;item.address&quot;  </span><br><span class="line">  :disabled=&quot;item.disabled&quot;  </span><br><span class="line">  &gt;  </span><br><span class="line">  &lt;/el-option&gt;  </span><br><span class="line">&lt;/el-select&gt;</span><br></pre></td></tr></table></figure><h2 id="基础多选"><a href="#基础多选" class="headerlink" title="基础多选"></a>基础多选</h2><p>适用性较广的基础多选，用 Tag 展示已选项</p><p>为<code>el-select</code>设置<code>multiple</code>属性即可启用多选，此时<code>v-model</code>的值为当前选中值所组成的数组。默认情况下选中值会以 Tag 的形式展现，你也可以设置<code>collapse-tags</code>属性将它们合并为一段文字。</p><p><code>collapse-tags</code>属性设置后只会显示<strong>第一个</strong>属性,其余的则是<code>+n</code>标签,代表一共选了几个</p><p><img src="https://raw.githubusercontent.com/2768085634/pic/main/202210172043734.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select v-model=&quot;v&quot; clearable multiple collapse-tags&gt;  </span><br><span class="line">  &lt;el-option v-for=&quot;item in st&quot;  </span><br><span class="line">  :key=&quot;item.address&quot;  </span><br><span class="line">  :label=&quot;item.value&quot;  </span><br><span class="line">  :value=&quot;item.address&quot;  </span><br><span class="line">  :disabled=&quot;item.disabled&quot;  </span><br><span class="line">  &gt;  </span><br><span class="line">  &lt;/el-option&gt;  </span><br><span class="line">&lt;/el-select&gt;</span><br></pre></td></tr></table></figure><h2 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h2><p>可以自定义备选项</p><p>将自定义的 HTML 模板插入<code>el-option</code>的 slot 中即可。</p><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>备选项进行分组展示</p><p>使用<code>el-option-group</code>对备选项进行分组，它的<code>label</code>属性为分组名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select v-model=&quot;v&quot; multiple collapse-tags&gt;  </span><br><span class="line">  &lt;el-option-group v-for=&quot;group in options3&quot;  </span><br><span class="line">                   :key=&quot;group.label&quot;  </span><br><span class="line">                   :label=&quot;group.label&quot;&gt;  </span><br><span class="line">    &lt;el-option v-for=&quot;item in group.options&quot;  </span><br><span class="line">               :key=&quot;item.value&quot;  </span><br><span class="line">               :label=&quot;item.label&quot;  </span><br><span class="line">               :value=&quot;item.value&quot;  </span><br><span class="line">    &gt;  </span><br><span class="line">    &lt;/el-option&gt;  </span><br><span class="line">  &lt;/el-option-group&gt;  </span><br><span class="line">&lt;/el-select&gt;</span><br><span class="line"></span><br><span class="line">v: &#x27;&#x27;,  </span><br><span class="line">options3: [&#123;  </span><br><span class="line">  label: &#x27;热门城市&#x27;,  </span><br><span class="line">  options: [&#123;  </span><br><span class="line">    value: &#x27;Shanghai&#x27;,  </span><br><span class="line">    label: &#x27;上海&#x27;  </span><br><span class="line">  &#125;, &#123;  </span><br><span class="line">    value: &#x27;Beijing&#x27;,  </span><br><span class="line">    label: &#x27;北京&#x27;  </span><br><span class="line">  &#125;]  </span><br><span class="line">&#125;, &#123;  </span><br><span class="line">  label: &#x27;城市名&#x27;,  </span><br><span class="line">  options: [&#123;  </span><br><span class="line">    value: &#x27;Chengdu&#x27;,  </span><br><span class="line">    label: &#x27;成都&#x27;  </span><br><span class="line">  &#125;, &#123;  </span><br><span class="line">    value: &#x27;Shenzhen&#x27;,  </span><br><span class="line">    label: &#x27;深圳&#x27;  </span><br><span class="line">  &#125;, &#123;  </span><br><span class="line">    value: &#x27;Guangzhou&#x27;,  </span><br><span class="line">    label: &#x27;广州&#x27;  </span><br><span class="line">  &#125;, &#123;  </span><br><span class="line">    value: &#x27;Dalian&#x27;,  </span><br><span class="line">    label: &#x27;大连&#x27;  </span><br><span class="line">  &#125;]  </span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h2 id="可搜索"><a href="#可搜索" class="headerlink" title="可搜索"></a>可搜索</h2><p>可以利用搜索功能快速查找选项</p><p>为<code>el-select</code>添加<code>filterable</code>属性即可启用搜索功能。默认情况下，Select 会找出所有<code>label</code>属性包含输入值的选项。如果希望使用其他的搜索逻辑，可以通过传入一个<code>filter-method</code>来实现。<code>filter-method</code>为一个<code>Function</code>，它会在输入值发生变化时调用，参数为当前输入值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select v-model=&quot;v&quot; multiple collapse-tags filterable&gt;  </span><br><span class="line">  &lt;el-option-group v-for=&quot;group in options3&quot;  </span><br><span class="line">                   :key=&quot;group.label&quot;  </span><br><span class="line">                   :label=&quot;group.label&quot;&gt;  </span><br><span class="line">    &lt;el-option v-for=&quot;item in group.options&quot;  </span><br><span class="line">               :key=&quot;item.value&quot;  </span><br><span class="line">               :label=&quot;item.label&quot;  </span><br><span class="line">               :value=&quot;item.value&quot;  </span><br><span class="line">    &gt;  </span><br><span class="line">    &lt;/el-option&gt;  </span><br><span class="line">  &lt;/el-option-group&gt;  </span><br><span class="line">&lt;/el-select&gt;</span><br></pre></td></tr></table></figure><h2 id="创建条目"><a href="#创建条目" class="headerlink" title="创建条目"></a>创建条目</h2><p>可以创建并选中选项中不存在的条目</p><p>使用<code>allow-create</code>属性即可通过在输入框中输入文字来创建新的条目。注意此时<code>filterable</code>必须为真。本例还使用了<code>default-first-option</code>属性，在该属性打开的情况下，按下回车就可以选中当前选项列表中的第一个选项，无需使用鼠标或键盘方向键进行定位。</p><p>如果 Select 的绑定值为对象类型，请务必指定 <code>value-key</code> 作为它的唯一性标识。</p><p><img src="https://raw.githubusercontent.com/2768085634/pic/main/202210172103102.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select v-model=&quot;v&quot; multiple collapse-tags filterable default-first-option allow-create&gt;  </span><br><span class="line">  &lt;el-option-group v-for=&quot;group in options3&quot;  </span><br><span class="line">                   :key=&quot;group.label&quot;  </span><br><span class="line">                   :label=&quot;group.label&quot;&gt;  </span><br><span class="line">    &lt;el-option v-for=&quot;item in group.options&quot;  </span><br><span class="line">               :key=&quot;item.value&quot;  </span><br><span class="line">               :label=&quot;item.label&quot;  </span><br><span class="line">               :value=&quot;item.value&quot;  </span><br><span class="line">    &gt;  </span><br><span class="line">    &lt;/el-option&gt;  </span><br><span class="line">  &lt;/el-option-group&gt;  </span><br><span class="line">&lt;/el-select&gt;</span><br></pre></td></tr></table></figure><h2 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h2><h3 id="Select-Attributes"><a href="#Select-Attributes" class="headerlink" title="Select Attributes"></a>Select Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">multiple</td><td align="left">是否多选</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">value-key</td><td align="left">作为 value 唯一标识的键名，绑定值为对象类型时必填</td><td align="left">string</td><td align="left">—</td><td align="left">value</td></tr><tr><td align="left">size</td><td align="left">输入框尺寸</td><td align="left">string</td><td align="left">medium&#x2F;small&#x2F;mini</td><td align="left">—</td></tr><tr><td align="left">clearable</td><td align="left">单选时是否可以清空选项</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">collapse-tags</td><td align="left">多选时是否将选中值按文字的形式展示</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">multiple-limit</td><td align="left">多选时用户最多可以选择的项目数，为 0 则不限制</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">name</td><td align="left">select input 的 name 属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">auto-complete</td><td align="left">select input 的 autocomplete 属性</td><td align="left">string</td><td align="left">—</td><td align="left">off</td></tr><tr><td align="left">placeholder</td><td align="left">占位符</td><td align="left">string</td><td align="left">—</td><td align="left">请选择</td></tr><tr><td align="left">filterable</td><td align="left">是否可搜索</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">allow-create</td><td align="left">是否允许用户创建新条目，需配合 filterable 使用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">filter-method</td><td align="left">自定义搜索方法</td><td align="left">function</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">remote</td><td align="left">是否为远程搜索</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">remote-method</td><td align="left">远程搜索方法</td><td align="left">function</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">loading</td><td align="left">是否正在从远程获取数据</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">loading-text</td><td align="left">远程加载时显示的文字</td><td align="left">string</td><td align="left">—</td><td align="left">加载中</td></tr><tr><td align="left">no-match-text</td><td align="left">搜索条件无匹配时显示的文字</td><td align="left">string</td><td align="left">—</td><td align="left">无匹配数据</td></tr><tr><td align="left">no-data-text</td><td align="left">选项为空时显示的文字</td><td align="left">string</td><td align="left">—</td><td align="left">无数据</td></tr><tr><td align="left">popper-class</td><td align="left">Select 下拉框的类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">reserve-keyword</td><td align="left">多选且可搜索时，是否在选中一个选项后保留当前的搜索关键词</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">default-first-option</td><td align="left">在输入框按下回车，选择第一个匹配项。需配合 filterable 或 remote 使用</td><td align="left">boolean</td><td align="left">-</td><td align="left">false</td></tr><tr><td align="left">popper-append-to-body</td><td align="left">是否将弹出框插入至 body 元素。在弹出框的定位出现问题时，可将该属性设置为 false</td><td align="left">boolean</td><td align="left">-</td><td align="left">true</td></tr><tr><td align="left">automatic-dropdown</td><td align="left">对于不可搜索的 Select，是否在输入框获得焦点后自动弹出选项菜单</td><td align="left">boolean</td><td align="left">-</td><td align="left">false</td></tr></tbody></table><h3 id="Select-Events"><a href="#Select-Events" class="headerlink" title="Select Events"></a>Select Events</h3><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">选中值发生变化时触发</td><td align="left">目前的选中值</td></tr><tr><td align="left">visible-change</td><td align="left">下拉框出现&#x2F;隐藏时触发</td><td align="left">出现则为 true，隐藏则为 false</td></tr><tr><td align="left">remove-tag</td><td align="left">多选模式下移除tag时触发</td><td align="left">移除的tag值</td></tr><tr><td align="left">clear</td><td align="left">可清空的单选模式下用户点击清空按钮时触发</td><td align="left">—</td></tr><tr><td align="left">blur</td><td align="left">当 input 失去焦点时触发</td><td align="left">(event: Event)</td></tr><tr><td align="left">focus</td><td align="left">当 input 获得焦点时触发</td><td align="left">(event: Event)</td></tr></tbody></table><h3 id="Select-Slots"><a href="#Select-Slots" class="headerlink" title="Select Slots"></a>Select Slots</h3><table><thead><tr><th align="left">name</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">—</td><td align="left">Option 组件列表</td></tr><tr><td align="left">prefix</td><td align="left">Select 组件头部内容</td></tr></tbody></table><h3 id="Option-Group-Attributes"><a href="#Option-Group-Attributes" class="headerlink" title="Option Group Attributes"></a>Option Group Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">label</td><td align="left">分组的组名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否将该分组下所有选项置为禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr></tbody></table><h3 id="Option-Attributes"><a href="#Option-Attributes" class="headerlink" title="Option Attributes"></a>Option Attributes</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">value</td><td align="left">选项的值</td><td align="left">string&#x2F;number&#x2F;object</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">label</td><td align="left">选项的标签，若不设置则默认与 value 相同</td><td align="left">string&#x2F;number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用该选项</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr></tbody></table><h3 id="Methods-1"><a href="#Methods-1" class="headerlink" title="Methods"></a>Methods</h3><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">focus</td><td align="left">使 input 获取焦点</td><td align="left">-</td></tr><tr><td align="left">blur</td><td align="left">使 input 失去焦点，并隐藏下拉框</td><td align="left">-</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css</title>
      <link href="/2022/12/10/%E7%AC%94%E8%AE%B0/css/"/>
      <url>/2022/12/10/%E7%AC%94%E8%AE%B0/css/</url>
      
        <content type="html"><![CDATA[<p>安装<code>Postcss</code>解决webstorm嵌套css报错</p><h1 id="css样式优先级"><a href="#css样式优先级" class="headerlink" title="css样式优先级"></a>css样式优先级</h1><p>优先级设置为最高则优先执行此语句,不会受到js更改样式而更改</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">条件后加上!important</span><br><span class="line"></span><br><span class="line">// 示例</span><br><span class="line"><span class="selector-class">.manager_tag</span><span class="selector-pseudo">:hover</span> &#123;  </span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#91c1ff</span> <span class="meta">!important</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="旋转效果"><a href="#旋转效果" class="headerlink" title="旋转效果"></a>旋转效果</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>)</span><br></pre></td></tr></table></figure><p>此处意味顺时针旋转30°</p><h2 id="transform其他属性"><a href="#transform其他属性" class="headerlink" title="transform其他属性"></a>transform其他属性</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 以X轴旋转</span><br><span class="line">rotateX(angle)</span><br><span class="line">// 以Y轴旋转</span><br><span class="line">rotateY(angle)</span><br><span class="line">// 以Z轴旋转</span><br><span class="line">rotateZ(angle)</span><br><span class="line">// 代表沿着(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)-&gt;(x,y,z)这条线旋转</span><br><span class="line">roate3D(x,y,z,angle)</span><br></pre></td></tr></table></figure><h2 id="更改旋转中心"><a href="#更改旋转中心" class="headerlink" title="更改旋转中心"></a>更改旋转中心</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: 当前元素左边距 当前元素上边距;</span><br></pre></td></tr></table></figure><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="绝对定位相对于父元素"><a href="#绝对定位相对于父元素" class="headerlink" title="绝对定位相对于父元素"></a>绝对定位相对于父元素</h2><p>父元素使用相对定位<code>position: relative</code>属性,子元素使用绝对定位<code>position: absolute</code>即可实现子元素的绝对定位是相对于父元素进行的</p><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">922px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1199px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">933px</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: auto <span class="meta">!important</span>;</span><br><span class="line">        <span class="attribute">margin-right</span>: auto <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="div内img底部留白问题"><a href="#div内img底部留白问题" class="headerlink" title="div内img底部留白问题"></a>div内img底部留白问题</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>图片的display属性的默认值是<code>lnline</code></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>为图片加上<code>display: block</code>即可</p><h1 id="模糊"><a href="#模糊" class="headerlink" title="模糊"></a>模糊</h1><p>高斯模糊</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">10px</span>);</span><br></pre></td></tr></table></figure><h1 id="a标签下划线-router-link"><a href="#a标签下划线-router-link" class="headerlink" title="a标签下划线(router-link)"></a>a标签下划线(router-link)</h1><p>vue中<code>router-link</code>本身也是<code>a</code>标签,所以也适用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span>: none;</span><br></pre></td></tr></table></figure><h1 id="filter-滤镜属性"><a href="#filter-滤镜属性" class="headerlink" title="filter(滤镜属性)"></a>filter(滤镜属性)</h1><h2 id="更改灰度"><a href="#更改灰度" class="headerlink" title="更改灰度"></a>更改灰度</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br></pre></td></tr></table></figure><h1 id="选择子元素"><a href="#选择子元素" class="headerlink" title="选择子元素"></a>选择子元素</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:nth-child(2)</span><br><span class="line">此处为选择第二个</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/10/%E5%85%B6%E4%BB%96/idea/"/>
      <url>/2022/12/10/%E5%85%B6%E4%BB%96/idea/</url>
      
        <content type="html"><![CDATA[<h1 id="idea链接git时显示无法访问"><a href="#idea链接git时显示无法访问" class="headerlink" title="idea链接git时显示无法访问"></a>idea链接git时显示无法访问</h1><p>修改<code>C:\Windows\System32\drivers\etc</code>中的<code>host文件</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 localhost</span><br><span class="line">127.0.0.1       activate.navicat.com</span><br><span class="line"># 0.0.0.0 account.jetbrains.com </span><br><span class="line">0.0.0.0 oauth.account.jetbrains.com </span><br><span class="line"># 0.0.0.0 jrebel.npegeek.com </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2022/12/10/Resource/template/"/>
      <url>/2022/12/10/Resource/template/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
